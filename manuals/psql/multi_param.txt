['escape_string_warning', 'standard_conforming_strings']	 In addition to  standard_conforming_strings , the configuration parameters escape_string_warning  and  backslash_quote  govern treatment of backslashes in string constants
['lc_monetary', 'lc_numeric']	) Ł The pattern characters  S ,  L ,  D , and  G  represent the sign, currency symbol, decimal point, and thousands separator characters defined by the current locale (see  lc_monetary  and  lc_numeric )
['port', 'ssl']	, it avoids them when retrieving common values, so the earlier example really only saves index size, it is not required to avoid index usage), and grossly incorrect plan choices are cause for a bug report
['enable_nestloop', 'enable_seqscan']	 For instance, turning off sequential scans ( enable_seqscan ) and nested-loop joins ( enable_nestloop ), which are the most basic plans, will force the system to use a different plan
['max_pred_locks_per_transaction', 'max_pred_locks_per_relation', 'max_pred_locks_per_page']	 You can avoid this by increasing  max_pred_locks_per_transaction , max_pred_locks_per_relation , and/or  max_pred_locks_per_page 
['random_page_cost', 'cpu_tuple_cost']	 It may be helpful to encourage the use of index scans by reducing  random_page_cost  and/or increasing  cpu_tuple_cost 
['max_connections', 'max_locks_per_transaction']	 Both advisory locks and regular locks are stored in a shared memory pool whose size is defined by the configuration variables  max_locks_per_transaction  and  max_connections 
['seq_page_cost', 'cpu_tuple_cost']	 The estimated cost is computed as (disk pages read *  seq_page_cost ) + (rows scanned *  cpu_tuple_cost )
['from_collapse_limit', 'join_collapse_limit']	 from_collapse_limit  and  join_collapse_limit  are similarly named because they do almost the same thing: one controls when the planner will  ﬁflatten outﬂ  subqueries, and the other controls when it will flatten out explicit joins
['from_collapse_limit', 'join_collapse_limit']	 Typically you would either set  join_collapse_limit equal to  from_collapse_limit  (so that explicit joins and subqueries act similarly) or set join_collapse_limit  to 1 (if you want to control join order with explicit joins)
['archive_mode', 'max_wal_senders']	 To prevent incremental WAL logging while loading, disable archiving and streaming replication, by setting  wal_level  to  minimal ,  archive_mode  to  off , and max_wal_senders  to zero
['maintenance_work_mem', 'max_wal_size']	, larger than normal) values for  maintenance_work_mem  and max_wal_size 
['archive_mode', 'max_wal_senders']	 To do that, set  archive_mode  to  off ,  wal_level  to  minimal , and  max_wal_senders  to zero before loading the dump
['maintenance_work_mem', 'max_wal_size']	 It's still useful to increase  max_wal_size while loading the data, but don't bother increasing  maintenance_work_mem ; rather, you'd do that while manually recreating indexes and foreign keys afterwards
['checkpoint_timeout', 'max_wal_size']	 Ł Increase  max_wal_size  and  checkpoint_timeout ; this reduces the frequency of checkpoints, but increases the storage requirements of  /pg_wal 
['max_worker_processes', 'max_parallel_workers']	 The total number of background workers that can exist at any one time is limited by both  max_worker_processes  and  max_parallel_workers 
['max_worker_processes', 'max_parallel_workers_per_gather']	 If this occurrence is frequent, consider increasing  max_worker_processes and  max_parallel_workers  so that more workers can be run simultaneously or alternatively reducing  max_parallel_workers_per_gather  so that the planner requests fewer worker
['parallel_tuple_cost', 'parallel_setup_cost']	 Parallel Plan Tips If a query that is expected to do so does not produce a parallel plan, you can try reducing parallel_setup_cost  or  parallel_tuple_cost 
['port', 'ssl']	) --with-openssl   Build with support for SSL (encrypted) connections
['port', 'ssl']	 openssl Required for SSL support
['max_connections', 'max_worker_processes', 'autovacuum_max_workers']	, sets) at least ceil((max_connections + autovacuum_max_workers + max_worker_processes + 5) / 16)  plus room for other applications SEMMNS Maximum number of semaphores system-wide ceil((max_connections + autovacuum_max_workers + max_worker_processes 
['max_connections', 'max_worker_processes', 'autovacuum_max_workers']	 When using System V semaphores, PostgreSQL uses one semaphore per allowed connection ( max_connections ), allowed autovacuum worker process ( autovacuum_max_workers ) and allowed background process ( max_worker_processes ), in sets of 16
['max_connections', 'max_worker_processes', 'autovacuum_max_workers']	 The maximum number of semaphores in the system is set by  SEMMNS , which consequently must be at least as high as  max_connections  plus autovacuum_max_workers  plus  max_worker_processes , plus one extra for each 16 allowed connections plus workers
['max_connections', 'max_worker_processes', 'autovacuum_max_workers']	 Hence this parameter must be at least  ceil((max_connections + autovacuum_max_workers + max_worker_processes + 5) / 16) 
['max_connections', 'autovacuum_max_workers']	 When using POSIX semaphores, the number of semaphores needed is the same as for System V, that is one semaphore per allowed connection ( max_connections ), allowed autovacuum worker process ( autovacuum_max_workers ) and allowed background process (
['shared_buffers', 'work_mem']	 In some cases, it may help to lower memory-related configuration parameters, particularly  shared_buffers  and  work_mem 
['port', 'ssl']	 With SSL support compiled in, the PostgreSQL server can be started with SSL enabled by setting the parameter  ssl  to  on  in  postgresql
['port', 'ssl']	cnf  and is located in the directory reported by  openssl version -d 
['ssl_cert_file', 'ssl_key_file']	key , respectively, in the server's data directory, but other names and locations can be specified using the configuration parameters ssl_cert_file  and  ssl_key_file 
['shared_buffers', 'log_connections']	 An example of what this file might look like is: # This is a comment log_connections = yes log_destination = 'syslog' search_path = '"$user", public' shared_buffers = 128MB One parameter is specified per line
['geqo', 'statement_timeout']	 For example, env PGOPTIONS="-c geqo=off -c statement_timeout=5min" psql Other clients and libraries might provide their own mechanisms, via the shell or otherwise, that allow the user to alter session settings without direct use of SQL commands
['hba_file', 'ident_file']	 If you wish, you can specify the configuration file names and locations individually using the parameters  config_file ,  hba_file  and/or  ident_file 
['shared_buffers', 'max_wal_size']	 Larger settings for shared_buffers  usually require a corresponding increase in  max_wal_size , in order to spread out the process of writing large quantities of new or changed data over a longer period of time
['max_connections', 'max_prepared_transactions']	 If you are using prepared transactions, you will probably want  max_prepared_transactions  to be at least as large as  max_connections , so that every session can have a prepared transaction pending
['vacuum_cost_delay', 'vacuum_cost_limit']	 When the accumulated cost reaches a limit (specified by  vacuum_cost_limit ), the process performing the operation will sleep for a short period of time, as specified by  vacuum_cost_delay 
['ssl', 'vacuum_cost_delay', 'vacuum_cost_limit']	 To avoid uselessly long delays in such cases, the actual delay is calculated as vacuum_cost_delay  *  accumulated_balance  /  vacuum_cost_limit  with a maximum of  vacuum_cost_delay  * 4
['bgwriter_lru_maxpages', 'bgwriter_lru_multiplier']	 Smaller values of  bgwriter_lru_maxpages  and  bgwriter_lru_multiplier  reduce the extra I/O load caused by the background writer, but make it more likely that server processes will have to issue writes for themselves, delaying interactive queries
['port', 'max_worker_processes']	Server Configuration max_worker_processes  ( integer )  Sets the maximum number of background processes that the system can support
['max_worker_processes', 'max_parallel_workers']	 Parallel workers are taken from the pool of processes established by max_worker_processes , limited by  max_parallel_workers 
['port', 'max_parallel_workers']	 max_parallel_workers  ( integer )  Sets the maximum number of workers that the system can support for parallel queries
['fsync', 'synchronous_commit']	 In many situations, turning off  synchronous_commit  for noncritical transactions can provide much of the potential performance benefit of turning off  fsync , without the attendant risks of data corruption
['port', 'synchronous_commit']	 So, turning  synchronous_commit  off can be a useful alternative when performance is more important than exact certainty about the durability of a transaction
['full_page_writes', 'wal_compression']	 wal_compression  ( boolean )  When this parameter is  on , the PostgreSQL server compresses a full page image written to WAL when  full_page_writes  is on or during a base backup
['wal_writer_delay', 'wal_writer_flush_after']	 If the last flush happened less than  wal_writer_delay  milliseconds ago and less than  wal_writer_flush_after  bytes of WAL have been produced since, then WAL is only written to the operating system, not flushed to disk
['wal_writer_delay', 'wal_writer_flush_after']	 If the last flush happened less than wal_writer_delay  milliseconds ago and less than  wal_writer_flush_after  bytes of WAL have been produced since, then WAL is only written to the operating system, not flushed to disk
['commit_delay', 'commit_siblings']	 commit_siblings  ( integer )  Minimum number of concurrent open transactions to require before performing the commit_delay  delay
['max_wal_size', 'checkpoint_warning']	 checkpoint_warning  ( integer )  Write a message to the server log if checkpoints caused by the filling of checkpoint segment files happen closer together than this many seconds (which suggests that  max_wal_size  ought 525 
['checkpoint_timeout', 'checkpoint_warning']	 No warnings will be generated if  checkpoint_timeout  is less than  checkpoint_warning 
['max_wal_size', 'wal_keep_segments']	 This is a soft limit; WAL size can exceed  max_wal_size  under special circumstances, like under heavy load, a failing  archive_command , or a high  wal_keep_segments  setting
['wal_receiver_status_interval', 'wal_receiver_timeout', 'wal_retrieve_retry_interval']	 Note that  wal_receiver_timeout ,  wal_receiver_status_interval  and wal_retrieve_retry_interval  configuration parameters affect the logical replication workers as well
['seq_page_cost', 'random_page_cost']	 Tip Although the system will let you set  random_page_cost  to less than seq_page_cost , it is not physically sensible to do so
['logging_collector', 'log_file_mode']	 log_file_mode  ( integer )  On Unix systems this parameter sets the permissions for log files when  logging_collector is enabled
['logging_collector', 'log_rotation_age']	 log_rotation_age  ( integer )  When  logging_collector  is enabled, this parameter determines the maximum lifetime of an individual log file
['logging_collector', 'log_rotation_size']	 log_rotation_size  ( integer )  When  logging_collector  is enabled, this parameter determines the maximum size of an individual log file
['logging_collector', 'log_truncate_on_rotation']	 log_truncate_on_rotation  ( boolean )  When  logging_collector  is enabled, this parameter will cause PostgreSQL to truncate (overwrite), rather than append to, any existing log file of the same name
['log_truncate_on_rotation', 'log_rotation_age']	%a ,  log_truncate_on_rotation  to  on , and log_rotation_age  to  1440 
['log_truncate_on_rotation', 'log_rotation_age', 'log_rotation_size']	 %H%M ,  log_truncate_on_rotation  to  on ,  log_rotation_age  to  60 , and log_rotation_size  to  1000000 
['debug_print_parse', 'debug_print_rewritten', 'debug_print_plan']	 debug_print_parse  ( boolean )  debug_print_rewritten  ( boolean )  debug_print_plan  ( boolean )  These parameters enable various debugging output to be emitted
['debug_print_parse', 'debug_print_rewritten', 'debug_print_plan', 'debug_pretty_print']	 debug_pretty_print  ( boolean )  When set,  debug_pretty_print  indents the messages produced by debug_print_parse ,  debug_print_rewritten , or  debug_print_plan 
['log_min_duration_statement', 'log_duration']	 Thus, if  log_duration  is  on  and log_min_duration_statement  has a positive value, all durations are logged but the query text is included only for statements exceeding the threshold
['log_line_prefix', 'log_lock_waits', 'deadlock_timeout']	Server Configuration log_line_prefix = '%m [%p] %q%u@%d/%a ' log_lock_waits  ( boolean )  Controls whether a log message is produced when a session waits longer than  deadlock_timeout to acquire a lock
['log_parser_stats', 'log_planner_stats', 'log_executor_stats', 'log_statement_stats']	 Statistics Monitoring log_statement_stats  ( boolean )  log_parser_stats  ( boolean )  log_planner_stats  ( boolean )  log_executor_stats  ( boolean )  For each query, output performance statistics of the respective module to the server log
['port', 'log_statement_stats']	 log_statement_stats  reports total statement statistics, while the others report per-module statistics
['track_counts', 'autovacuum']	 This is on by default; however,  track_counts  must also be enabled for autovacuum to work
['autovacuum_vacuum_threshold', 'autovacuum_vacuum_scale_factor']	 autovacuum_vacuum_scale_factor  ( floating point )  Specifies a fraction of the table size to add to  autovacuum_vacuum_threshold  when deciding whether to trigger a  VACUUM 
['autovacuum_analyze_threshold', 'autovacuum_analyze_scale_factor']	 autovacuum_analyze_scale_factor  ( floating point )  Specifies a fraction of the table size to add to  autovacuum_analyze_threshold  when deciding whether to trigger an  ANALYZE 
['autovacuum', 'autovacuum_vacuum_cost_delay']	 autovacuum_vacuum_cost_delay  ( integer )  Specifies the cost delay value that will be used in automatic  VACUUM  operations
['autovacuum', 'autovacuum_vacuum_cost_limit']	 autovacuum_vacuum_cost_limit  ( integer )  Specifies the cost limit value that will be used in automatic  VACUUM  operations
['port', 'autovacuum']	 Note that the value is distributed proportionally among the running autovacuum workers, if there is more than one, so that the sum of the limits for each worker does not exceed the value of this variable
['statement_timeout', 'lock_timeout']	 Note that if  statement_timeout  is nonzero, it is rather pointless to set  lock_timeout to the same or larger value, since the statement timeout would always trigger first
['max_connections', 'max_prepared_transactions', 'max_locks_per_transaction']	 max_locks_per_transaction  ( integer )  The shared lock table tracks locks on  max_locks_per_transaction  * ( max_connections  + max_prepared_transactions ) objects (e
['max_connections', 'max_prepared_transactions', 'max_pred_locks_per_transaction']	 max_pred_locks_per_transaction  ( integer )  The shared predicate lock table tracks locks on  max_pred_locks_per_transaction  * ( max_connections  +  max_prepared_transactions ) objects (e
['shared_buffers', 'enable_bitmapscan', 'enable_hashjoin', 'enable_indexscan', 'datestyle']	 Short Option Key Short Option Equivalent -B  x shared_buffers =  x -d  x log_min_messages = DEBUG x -e datestyle = euro -fb ,  -fh ,  -fi ,  -fm ,  -fn ,  -fo ,  -fs ,  -ft enable_bitmapscan = off , enable_hashjoin = off , enable_indexscan = off , e
['work_mem', 'log_parser_stats', 'log_planner_stats', 'log_executor_stats']	Server Configuration Short Option Equivalent -S  x work_mem =  x -tpa ,  -tpl ,  -te log_parser_stats = on , log_planner_stats = on , log_executor_stats = on -W  x post_auth_delay =  x 567 
['autovacuum_freeze_max_age', 'vacuum_freeze_min_age']	) This implies that if a table is not otherwise vacuumed, autovacuum will be invoked on it approximately once every  autovacuum_freeze_max_age  minus  vacuum_freeze_min_age  transactions
['autovacuum_freeze_max_age', 'vacuum_freeze_min_age']	 Obviously one can do this either by increasing autovacuum_freeze_max_age  or decreasing  vacuum_freeze_min_age 
['autovacuum_freeze_max_age', 'vacuum_freeze_table_age']	 As a rule of thumb,  vacuum_freeze_table_age  should be set to a value somewhat below autovacuum_freeze_max_age , leaving enough gap so that a regularly scheduled  VACUUM  or an autovacuum triggered by normal delete and update activity is run in tha
['autovacuum_freeze_max_age', 'vacuum_freeze_table_age']	 The sole disadvantage of increasing  autovacuum_freeze_max_age  (and vacuum_freeze_table_age  along with it) is that the  pg_xact  and  pg_commit_ts subdirectories of the database cluster will take more space, because it must store the commit status
['track_counts', 'autovacuum']	 These checks use the statistics collection facility; therefore, autovacuum cannot be used unless  track_counts  is set to  true 
['autovacuum_vacuum_threshold', 'autovacuum_vacuum_scale_factor']	 The vacuum threshold is defined as: vacuum threshold = vacuum base threshold + vacuum scale factor *  number of tuples where the vacuum base threshold is  autovacuum_vacuum_threshold , the vacuum scale factor is autovacuum_vacuum_scale_factor , and 
['autovacuum_vacuum_cost_delay', 'autovacuum_vacuum_cost_limit']	 However, any workers processing tables whose per-table  autovacuum_vacuum_cost_delay  or  autovacuum_vacuum_cost_limit storage parameters have been set are not considered in the balancing algorithm
['port', 'tcp_keepalives_idle', 'tcp_keepalives_interval', 'tcp_keepalives_count']	 On systems that support the keepalive socket option, setting  tcp_keepalives_idle , tcp_keepalives_interval  and  tcp_keepalives_count  helps the primary promptly notice a broken connection
['vacuum_defer_cleanup_age', 'hot_standby_feedback']	 Similarly,  hot_standby_feedback  and  vacuum_defer_cleanup_age  provide protection against relevant rows being removed by vacuum, but the former provides no protection during any time period when the standby is not connected, and the latter often n
['max_wal_senders', 'hot_standby']	 To use cascading replication, set up the cascading standby so that it can accept replication connections (that is, set  max_wal_senders  and  hot_standby , and configure  host-based authentication )
['port', 'synchronous_commit']	 Setting  synchronous_commit  to  remote_apply  will cause each commit to wait until the current synchronous standbys report that they have replayed the transaction, making it visible to user queries
['archive_mode', 'archive_timeout']	 Ensure that  archive_mode ,  archive_command  and  archive_timeout  are set appropriately on the primary (see  Section 25
['max_standby_archive_delay', 'max_standby_streaming_delay']	 So the cancel mechanism has parameters,  max_standby_archive_delay  and  max_standby_streaming_delay , that define the maximum allowed delay in WAL application
['max_standby_archive_delay', 'max_standby_streaming_delay']	 Once the delay specified by  max_standby_archive_delay  or max_standby_streaming_delay  has been exceeded, conflicting queries will be canceled
['max_standby_archive_delay', 'max_standby_streaming_delay', 'statement_timeout']	High Availability, Load Balancing, and Replication finite value for  max_standby_archive_delay  or  max_standby_streaming_delay  can be considered similar to setting  statement_timeout 
['port', 'max_connections', 'max_prepared_transactions', 'max_worker_processes', 'max_standby_archive_delay', 'max_locks_per_transaction']	High Availability, Load Balancing, and Replication Ł max_connections Ł max_prepared_transactions Ł max_locks_per_transaction Ł max_worker_processes It is important that the administrator select appropriate settings for  max_standby_archive_delay  and
['max_standby_archive_delay', 'max_standby_streaming_delay']	 max_standby_archive_delay  and  max_standby_streaming_delay  have no effect if set on the primary
['hot_standby', 'max_standby_archive_delay', 'max_standby_streaming_delay']	 On the standby, parameters  hot_standby ,  max_standby_archive_delay  and max_standby_streaming_delay  can be used
['port', 'track_activities']	 Ł disabled : This state is reported if  track_activities  is disabled in this backend
['port', 'hot_standby_feedback']	, when the client connected to this WAL sender backend_xmin xid This standby's  xmin  horizon reported by hot_standby_feedback 
['port', 'autovacuum']	 VACUUM Progress Reporting Whenever  VACUUM  is running, the  pg_stat_progress_vacuum  view will contain one row for each backend (including autovacuum worker processes) that is currently vacuuming
['checkpoint_timeout', 'max_wal_size']	 A checkpoint is begun every  checkpoint_timeout  seconds, or if  max_wal_size  is about to be exceeded, whichever comes first
['checkpoint_timeout', 'max_wal_size']	 Reducing  checkpoint_timeout  and/or  max_wal_size  causes checkpoints to occur more often
['max_wal_size', 'checkpoint_warning']	 If checkpoints happen closer together than  checkpoint_warning  seconds, a message will be output to the server log recommending increasing  max_wal_size 
['checkpoint_timeout', 'max_wal_size']	 The I/O rate is adjusted so that the checkpoint finishes when the given fraction of  checkpoint_timeout  seconds have elapsed, or before  max_wal_size  is exceeded, whichever is sooner
['max_wal_size', 'min_wal_size']	Reliability and the Write-Ahead Log The number of WAL segment files in  pg_wal  directory depends on  min_wal_size , max_wal_size  and the amount of WAL generated in previous checkpoint cycles
['max_wal_size', 'wal_keep_segments']	 Independently of  max_wal_size ,  wal_keep_segments  + 1 most recent WAL files are kept at all times
['checkpoint_timeout', 'max_wal_size']	 A restartpoint is triggered when a checkpoint record is reached if at least  checkpoint_timeout seconds have passed since the last restartpoint, or if WAL size is about to exceed  max_wal_size 
['full_page_writes', 'wal_buffers']	 When  full_page_writes  is set and the system is very busy, setting  wal_buffers  higher will help smooth response times during the period immediately following each checkpoint
['fsync', 'commit_siblings']	 No sleep will occur if  fsync  is not enabled, or if fewer than  commit_siblings  other sessions are currently in active transactions; this avoids sleeping when it's unlikely that any other session will commit soon
['port', 'commit_delay']	 A value of half of the average time the program reports it takes to flush after a single 8kB write operation is often the most effective setting for  commit_delay , so this value is recommended as the starting point to use when optimizing for a part
['max_wal_senders', 'max_replication_slots']	 And  max_wal_senders  should be set to at least the same as max_replication_slots  plus the number of physical replicas that are connected at the same time
['max_worker_processes', 'max_logical_replication_workers']	Logical Replication max_worker_processes  may need to be adjusted to accommodate for replication workers, at least ( max_logical_replication_workers  +  1 )
['port', 'max_stack_depth']	 On platforms supporting  getrlimit() , the server should automatically choose a safe value of max_stack_depth ; so unless you've manually overridden this setting, a failure of this kind is a reportable bug
['enable_indexscan', 'enable_seqscan']	 For example, changing parameters such as  enable_seqscan  or enable_indexscan  could cause plan changes that would affect the results of tests that use EXPLAIN 
['port', 'standard_conforming_strings']	0;  standard_conforming_strings  was not reported by releases before 8
['port', 'standard_conforming_strings']	 If no value for  standard_conforming_strings  is reported, applications can assume it is  off , that is, backslashes are treated as escapes in string literals
['port', 'ssl']	com description:port=5439 description:dbname=mydb description:user=mydb_user description:sslmode=require might be queried with the following LDAP URL: ldap://ldap
['port', 'ssl']	 SSL Library Initialization If your application initializes  libssl  and/or  libcrypto  libraries and libpq is built with SSL support, you should call  PQinitOpenSSL  to tell libpq that the  libssl  and/or  libcrypto libraries have been initialized b
['debug_print_parse', 'debug_print_rewritten', 'debug_print_plan']	 These query trees can be shown in the server log if you set the configuration parameters  debug_print_parse ,  debug_print_rewritten , or  debug_print_plan 
['effective_io_concurrency', 'seq_page_cost', 'random_page_cost']	 Currently, the only available parameters are seq_page_cost ,  random_page_cost  and  effective_io_concurrency 
['autovacuum', 'autovacuum_vacuum_cost_delay']	CREATE TABLE autovacuum_vacuum_cost_delay ,  toast
['autovacuum', 'autovacuum_vacuum_cost_delay']	autovacuum_vacuum_cost_delay ( integer ) Per-table value for  autovacuum_vacuum_cost_delay  parameter
['autovacuum', 'autovacuum_vacuum_cost_limit']	 autovacuum_vacuum_cost_limit ,  toast
['autovacuum', 'autovacuum_vacuum_cost_limit']	autovacuum_vacuum_cost_limit ( integer ) Per-table value for  autovacuum_vacuum_cost_limit  parameter
['autovacuum', 'vacuum_freeze_min_age']	 autovacuum_freeze_min_age ,  toast
['autovacuum', 'vacuum_freeze_min_age']	autovacuum_freeze_min_age  ( integer ) Per-table value for  vacuum_freeze_min_age  parameter
['autovacuum_freeze_max_age', 'vacuum_freeze_min_age']	 Note that autovacuum will ignore per- table  autovacuum_freeze_min_age  parameters that are larger than half the system-wide autovacuum_freeze_max_age  setting
['autovacuum', 'vacuum_freeze_table_age']	 autovacuum_freeze_table_age ,  toast
['autovacuum', 'vacuum_freeze_table_age']	autovacuum_freeze_table_age ( integer ) Per-table value for  vacuum_freeze_table_age  parameter
['autovacuum', 'vacuum_multixact_freeze_min_age']	 autovacuum_multixact_freeze_min_age , toast
['autovacuum', 'vacuum_multixact_freeze_min_age']	autovacuum_multixact_freeze_min_age  ( integer ) Per-table value for  vacuum_multixact_freeze_min_age  parameter
['autovacuum_multixact_freeze_max_age', 'vacuum_multixact_freeze_min_age']	 Note that autovacuum will ignore per-table  autovacuum_multixact_freeze_min_age  parameters that are larger than half the system-wide  autovacuum_multixact_freeze_max_age  setting
['autovacuum', 'vacuum_multixact_freeze_table_age']	 autovacuum_multixact_freeze_table_age , toast
['autovacuum', 'vacuum_multixact_freeze_table_age']	autovacuum_multixact_freeze_table_age  ( integer ) Per-table value for  vacuum_multixact_freeze_table_age  parameter
['default_transaction_read_only', 'default_transaction_deferrable']	 The session default transaction modes can also be set by setting the configuration parameters default_transaction_isolation ,  default_transaction_read_only , and  default_transaction_deferrable 
['vacuum_freeze_min_age', 'vacuum_freeze_table_age']	 Specifying  FREEZE  is equivalent to performing VACUUM  with the  vacuum_freeze_min_age  and  vacuum_freeze_table_age  parameters set to zero
['max_wal_senders', 'hot_standby']	 To take a backup from the standby, set up the standby so that it can accept replication connections (that is, set max_wal_senders  and  hot_standby , and configure  host-based authentication )
['ssl', 'full_page_writes']	 Ł All WAL records required for the backup must contain sufficient full-page writes, which requires you to enable  full_page_writes  on the master and not to use a tool like pg_compresslog as archive_command  to remove full-page writes from WAL files
['port', 'fsync']	 Specifying an interval of  0  disables issuing  fsync()  calls altogether, while still reporting progress to the server
['port', 'ssl']	 The new connection can re-use connection parameters from the previous connection; not only database name, user, host, and port, but other settings such as  sslmode 
['port', 'ssl']	dom 6432 => \c service=foo => \c "host=localhost port=5432 dbname=mydb connect_timeout=10  sslmode=disable" => \c -reuse-previous=on sslmode=require    -- changes only  sslmode => \c postgresql://tom@localhost/mydb?application_name=myapp \C [  title 
['port', 'fsync']	 Examples Starting the Server To start the server, waiting until the server is accepting connections: $   pg_ctl start To start the server using port 5433, and running without  fsync , use: $   pg_ctl -o "-F -p 5433" start Stopping the Server To stop
['port', 'fsync']	 To restart using port 5433, disabling  fsync upon restart: $   pg_ctl -o "-F -p 5433" restart Showing the Server Status Here is sample status output from pg_ctl: $   pg_ctl status pg_ctl: server is running (PID: 13718) /usr/local/pgsql/bin/postgres 
['port', 'fsync', 'commit_delay']	 pg_test_fsync reports average file sync operation time in microseconds for each  wal_sync_method , which can also be used to inform efforts to optimize the value of commit_delay 
['max_connections', 'shared_buffers']	 You might be able to postpone reconfiguring your kernel by decreasing  shared_buffers  to reduce the shared memory consumption of PostgreSQL, and/or by reducing  max_connections  to reduce the semaphore consumption
['port', 'standard_conforming_strings']	0; standard_conforming_strings  was not reported by releases before 8
['seq_page_cost', 'random_page_cost', 'cpu_index_tuple_cost']	c : a sequential disk block fetch has cost  seq_page_cost , a nonsequential fetch has cost  random_page_cost , and the cost of processing one index row should usually be taken as  cpu_index_tuple_cost 
['seq_page_cost', 'random_page_cost']	 A generic estimator might do this: /*  * Our generic assumption is that the index pages will be read  * sequentially, so they cost seq_page_cost each, not  random_page_cost
['seq_page_cost', 'cpu_index_tuple_cost']	startup; *indexTotalCost = seq_page_cost * numIndexPages +     (cpu_index_tuple_cost + index_qual_cost
['port', 'ssl']	 This convention allows GiST to support both lossless and lossy index structures
['autovacuum', 'gin_pending_list_limit']	 Foreground cleanup operations can be avoided by increasing  gin_pending_list_limit  or making autovacuum more aggressive
['port', 'gin_fuzzy_search_limit']	 gin_fuzzy_search_limit The primary goal of developing GIN indexes was to create support for highly scalable full-text search in PostgreSQL, and there are often situations when a full-text search returns a very large set of results
['hba_file', 'port']	 Ł Fix rare  ﬁlost saved point in indexﬂ  errors in scans of multicolumn GIN indexes (Tom Lane) Ł Fix unportable use of  getnameinfo()  in  pg_hba_file_rules  view (Tom Lane) On FreeBSD 11, and possibly other platforms, the view's  address  and  netm
['port', 'ssl']	 Ł Add missing SQLSTATE values to a few error reports (Sawada Masahiko) Ł Fix PL/pgSQL to reliably refuse to execute an event trigger function as a plain function (Tom Lane) Ł Fix memory leak in libpq when using  sslmode=verify-full  (Roman Peshkurov
['track_activities', 'statement_timeout', 'lock_timeout', 'idle_in_transaction_session_timeout']	 Ł Mark some timeout and statistics-tracking GUC variables as  PGDLLIMPORT , to allow extensions to access them on Windows (Pascal Legrand) This applies to  idle_in_transaction_session_timeout ,  lock_timeout , statement_timeout ,  track_activities ,
['port', 'timezone']	 Ł Sync our copy of the timezone library with IANA tzcode release 2019b (Tom Lane) This adds support for zic's new  -b slim  option to reduce the size of the installed zone files
['port', 'autovacuum']	 Ł Report correct relation name in autovacuum's  pg_stat_activity  display during BRIN summarize operations (Álvaro Herrera) Ł Fix  ﬁfailed to build any  N -way joinsﬂ  planner failures with lateral references leading out of  FULL outer joins (Tom La
['port', 'fsync']	 Changes Ł By default, panic instead of retrying after  fsync()  failure, to avoid possible data corruption (Craig Ringer, Thomas Munro) Some popular operating systems discard kernel data buffers when unable to write them out, reporting this as  fsyn
['port', 'full_page_writes']	 Ł Properly handle turning  full_page_writes  on dynamically (Kyotaro Horiguchi) Ł Fix possible crash due to double  free()  during SP-GiST rescan (Andrew Gierth) Ł Prevent mis-linking of src/port and src/common functions on ELF-based BSD platforms, 
['statement_timeout', 'idle_in_transaction_session_timeout']	 Ł Prevent  idle_in_transaction_session_timeout  from being ignored when a statement_timeout  occurred earlier (Lukas Fittl) Ł Fix low-probability loss of  NOTIFY  messages due to XID wraparound (Marko Tiikkaja, Tom Lane) If a session executed no que
['min_parallel_table_scan_size', 'min_parallel_index_scan_size']	 Ł Add  min_parallel_table_scan_size  and  min_parallel_index_scan_size  server parameters to control parallel queries (Amit Kapila, Robert Haas) These replace  min_parallel_relation_size , which was found to be too generic
['max_pred_locks_per_relation', 'max_pred_locks_per_page']	 Ł Allow tuning of predicate lock promotion thresholds (Dagfinn Ilmari Mannsåker) Lock promotion can now be controlled through two new server parameters, max_pred_locks_per_relation  and  max_pred_locks_per_page 
['port', 'fsync']	  pg_stat_activity Ł Add  pg_stat_activity  reporting of low-level wait states (Michael Paquier, Robert Haas, Rushabh Lathia) This change enables reporting of numerous low-level wait conditions, including latch waits, file reads/writes/fsyncs, client
['max_wal_senders', 'max_replication_slots']	Release Notes Ł Reduce configuration changes necessary to perform streaming backup and replication (Magnus Hagander, Dang Minh Huong) Specifically, the defaults were changed for  wal_level ,  max_wal_senders ,  max_replication_slots , and  hot_standb
['commit_delay', 'commit_siblings']	Index column reference,  40 col_description,  318 comment about database objects,  318 in SQL,  38 COMMENT,  1394 COMMIT,  1398 COMMIT PREPARED,  1399 commit_delay configuration parameter,  525 commit_siblings configuration parameter,  525 common tab
['default_statistics_target', 'default_transaction_deferrable', 'default_text_search_config']	Index changing,  67 default_statistics_target configuration parameter,  535 default_tablespace configuration parameter,  551 default_text_search_config configuration parameter, 556 default_transaction_deferrable configuration parameter,  552 default_
['enable_hashagg', 'enable_hashjoin', 'enable_indexscan', 'enable_indexonlyscan']	Index enable_gathermerge configuration parameter,  532 enable_hashagg configuration parameter,  532 enable_hashjoin configuration parameter,  532 enable_indexonlyscan configuration parameter,  532 enable_indexscan configuration parameter,  532 enable
['ident_file', 'idle_in_transaction_session_timeout']	Index I icount,  2373 ICU,  458 ,  603 ,  1422 ident,  580 identifier length,  31 syntax of,  31 IDENTIFY_SYSTEM,  2008 ident_file configuration parameter,  509 idle_in_transaction_session_timeout configuration parameter,  553 idx,  2373 IFNULL,  282
['max_connections', 'max_files_per_process']	Index max_connections configuration parameter,  510 max_files_per_process configuration parameter,  517 max_function_args configuration parameter,  562 max_identifier_length configuration parameter,  562 max_index_keys configuration parameter,  562 m
['wal_log_hints', 'wal_keep_segments', 'wal_receiver_status_interval']	Index wal_debug configuration parameter,  565 wal_keep_segments configuration parameter,  527 wal_level configuration parameter,  521 wal_log_hints configuration parameter,  524 wal_receiver_status_interval configuration parameter, 530 wal_receiver_t
