filenr,sentence,parameter,value,base,operators
1,query_cache_size – Specifies the size of the cache of MySQL queries waiting to run The recommendation is to start with small values around 10MB and then increase to no more than 100-200MB,query_cache_size,200MB,3,0;2
1,"The following variables are largely dependent on your hardware: innodb_buffer_pool_size Generally, set to 50% – 70% of your total RAM as a starting point",innodb_buffer_pool_size,50%,0,2;4
1,"The following variables are largely dependent on your hardware: innodb_buffer_pool_size Generally, set to 50% – 70% of your total RAM as a starting point",innodb_buffer_pool_size,70%,0,0;2
1,innodb_log_file_size This is generally set between 128M – 2G,innodb_log_file_size,128M,3,2;4
1,innodb_log_file_size This is generally set between 128M – 2G,innodb_log_file_size,2G,3,0;2
1,"innodb_flush_log_at_trx_commit Setting to “1” (default in 5.7) gives the most durability Setting to “0” or “2” will give more performance, but less durability",innodb_flush_log_at_trx_commit,0,3,2
1,"innodb_flush_log_at_trx_commit Setting to “1” (default in 5.7) gives the most durability Setting to “0” or “2” will give more performance, but less durability",innodb_flush_log_at_trx_commit,2,3,2
1,"innodb_buffer_pool_instances A best practice is to set this to “8” unless the buffer pool size is < 1G, in which case set to “1”",innodb_buffer_pool_instances,8,3,2
1,Other SettingsOther InnoDB settings that can be further tuned for better performance are: innodb_autoinc_lock_mode Setting this to “2” (interleaved mode) can remove the need for an auto-inc lock (at the table level) and can increase performance when using multi-row insert statements to insert values into a table with an auto increment primary key,innodb_autoinc_lock_mode,2,3,2
1,"join_buffer_size By default, value is of 256K The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans Also used by the BKA optimization (which is disabled by default) Increase its value to get faster full joins when adding indexes is not possible Caveat though might be memory issues if you set this too high Remember that one join buffer is allocated for each full join between two tables For a complex join between several tables for which indexes are not used, multiple join buffers might be necessary Best left low globally and set high in sessions (by using SET SESSION syntax) that require large full joins In 64-bit platforms, Windows truncates values above 4GB to 4GB-1 with a warning",join_buffer_size,4GB,3,0;2
1,"The open tables cache can be partitioned into several smaller cache instances of size table_open_cache / table_open_cache_instances A session needs to lock only one instance to access it for DML statements This segments cache access among instances, permitting higher performance for operations that use the cache when there are many sessions accessing tables (DDL statements still require a lock on the entire cache, but such statements are much less frequent than DML statements A value of 8 or 16 is recommended on systems that routinely use 16 or more cores",table_open_cache_instances,8,3,2
1,"The open tables cache can be partitioned into several smaller cache instances of size table_open_cache / table_open_cache_instances A session needs to lock only one instance to access it for DML statements This segments cache access among instances, permitting higher performance for operations that use the cache when there are many sessions accessing tables (DDL statements still require a lock on the entire cache, but such statements are much less frequent than DML statements A value of 8 or 16 is recommended on systems that routinely use 16 or more cores",table_open_cache_instances,16,3,2
1,This variable must be set to 0 along with query_cache_type = 0 as well to turn it off,query_cache_type,0,3,2
1,"innodb_buffer_pool_size This variable acts like a key buffer of MyISAM but it has lots of things to offer Since InnoDB relies heavily on the buffer pool, you would consider setting this value typically to 70%-80% of your server’s memory",innodb_buffer_pool_size,70%,0,2;4
1,"innodb_buffer_pool_size This variable acts like a key buffer of MyISAM but it has lots of things to offer Since InnoDB relies heavily on the buffer pool, you would consider setting this value typically to 70%-80% of your server’s memory",innodb_buffer_pool_size,80%,0,0;2
1,"When innodb_flush_log_at_trx_commit is set to 1 the log buffer is flushed on every transaction commit to the log file on disk and provides maximum data integrity but it also has performance impact Setting it to 2 means log buffer is flushed to OS file cache on every transaction commit The implication of 2 is optimal and improves performance if you can relax your ACID requirements, and can afford to lose transactions for the last second or two in case of OS crashes",innodb_flush_log_at_trx_commit,2,3,2
1,"innodb_thread_concurrency With improvements to the InnoDB engine, it is recommended to allow the engine to control the concurrency by keeping it to default value (which is zero) If you see concurrency issues, you can tune this variable A recommended value is 2 times the number of CPUs plus the number of disks",innodb_thread_concurrency,2,2,3;4
1,"key_buffer_size InnoDB is the default storage engine now of MySQL, the default for key_buffer_size can probably be decreased unless you are using MyISAM productively as part of your application (but who uses MyISAM in production now?) I would suggest here to set perhaps 1% of RAM or 256 MiB at start if you have larger memory and dedicate the remaining memory for your OS cache and InnoDB buffer pool",key_buffer_size,1%,0,2
1,"sync_binlog This variable controls how often MySQL will sync binlogs to the disk By default (>=5.7.7), this is set to 1 which means it will sync to disk before transactions are committed However, this impose a negative impact on performance due to increased number of writes But this is the safest setting if you want strictly ACID compliant along with your slaves Alternatively, you can set this to 0 if you want to disable disk synchronization and just rely on the OS to flush the binary log to disk from time to time",sync_binlog,0,3,2
1,Ensure that you have swappiness = 1,swappiness,1,3,2