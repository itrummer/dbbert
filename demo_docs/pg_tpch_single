filenr,sentence
1,Robert Haas: PostgreSQL 9.6 with Parallel Query vs. TPC-H
1,Robert Haas
1,"VP, Chief Architect, Database Server @ EnterpriseDB, PostgreSQL Major Contributor and Committer"
1,"Thursday, April 21, 2016"
1,PostgreSQL 9.6 with Parallel Query vs. TPC-H
1,"I decided to try out parallel query, as implemented in PostgreSQL 9.6devel, on the TPC-H queries.  To do this, I followed the directions at https://github.com/tvondra/pg_tpch - thanks to Tomas Vondra for those instructions.  I did the test on an IBM POWER7 server provided to the PostgreSQL community by IBM.  I scaled the database to use 10GB of input data; the resulting database size was 22GB, of which 8GB was indexes.  I tried out each query just once without really tuning the database at all, except for increasing shared_buffers to 8GB.  Then I tested them again after enabling parallel query by configuring max_parallel_degree = 4."
1,"Of the 22 queries, 17 switched to a parallel plan, while the plans for the other 5 were unchanged.  Of the 17 queries where the plan changed, 15 got faster, 1 ran at the same speed, and 1 got slower.  11 of the queries ran at least twice as fast with parallelism as they did without parallelism.  Here are the comparative results for the queries where the plan changed:"
1,Q1: 229 seconds → 45 seconds (5.0x)
1,Q3: 45 seconds → 17 seconds (2.6x)
1,Q4: 12 seconds → 3 seconds (4.0x)
1,Q5: 38 seconds → 17 seconds (2.2x)
1,Q6: 17 seconds → 6 seconds (2.8x)
1,Q7: 41 seconds → 12 seconds (3.4x)
1,Q8: 10 seconds → 4 seconds (2.5x)
1,Q9: 81 seconds → 61 seconds (1.3x)
1,Q10: 37 seconds → 18 seconds (2.0x)
1,Q12: 34 seconds → 7 seconds (4.8x)
1,Q15: 33 seconds → 24 seconds (1.3x)
1,Q16: 17 seconds → 16 seconds (1.0x)
1,Q17: 140 seconds → 55 seconds (2.5x)
1,Q19: 2 seconds → 1 second (2.0x)
1,Q20: 70 seconds → 70 seconds (1.0x)
1,Q21: 80 seconds → 99 seconds (0.8x)
1,Q22: 4 seconds → 3 seconds (1.3x)
1,"Linear scaling with a leader process and 4 workers would mean a 5.0x speedup, which we achieved in only one case.  However, for many users, that won't matter: if you have CPUs that would otherwise be sitting idle, it's better to get some speedup than no speedup at all."
1,"Of course, I couldn't resist analyzing what went wrong here, especially for Q21, which actually got slower.  To some degree, that's down to misconfiguration: I ran this test with the default value of work_mem=4MB, but Q21 chooses a plan that builds a hash table on the largest table in the database, which is about 9.5GB in this test.   Therefore, it ends up doing a 1024-batch hash join, which is somewhat painful under the best of circumstances.  With work_mem=1GB, the regression disappears, and it's 6% faster with parallel query than without."
1,"However, there's a deeper problem, which is that while PostgreSQL 9.6 can perform a hash join in parallel, each process must build its own copy of the hash table.   That means we use N times the CPU and N times the memory, and we may induce I/O contention, locking contention, or memory pressure as well.  It would be better to have the ability to build a shared hash table, and EnterpriseDB is working on that as a feature, but it won't be ready in time for PostgreSQL 9.6, which is already in feature freeze.  Since Q21 needs a giant hash table, this limitation really stings.  In fact, there are a number of queries here where it seems like building a shared hash table would speed things up significantly: Q3, Q5, Q7, Q8, and Q21."
1,"An even more widespread problem is that, at present, the driving table for a parallel query must be accessed via a parallel sequential scan; that's the only operation we have that can partition the input data.  Many of these queries - Q4, Q5, Q6, Q7, Q14, Q15, and Q20 - would have been better off using a bitmap index scan on the driving table, but unfortunately that's not supported in PostgreSQL 9.6.  We still come out ahead on these queries in terms of runtime because the system simply substitutes raw power for finesse: with enough workers, we can scan the whole table quicker than a single process can scan the portion identified as relevant by the index.  However, it would clearly be nice to do better."
1,"Four queries - Q2, Q15, Q16, Q22 - were parallelized either not at all or only to a limited degree due to restrictions related to the handling of subqueries, about which the current implementation of parallel query is not always smart.  Three queries - Q2, Q13, and Q15 - made no or limited use of parallelism because the optimal join strategy is a merge join, which can't be made parallel in a trivial way.  One query - Q17 - managed to perform the same an expensive sort twice, once in the workers and then again in the leader.  This is because the Gather operation reads tuples from the workers in an arbitrary and not necessarily predictable order; so even if each worker's stream of tuples is sorted, the way those streams get merged together will probably destroy the sort ordering."
1,"There are no doubt other issues here that I haven't found yet, but on the whole I find these results pretty encouraging.  Parallel query basically works, and makes queries that someone thought were representative of real workloads significantly faster.  There's a lot of room for further improvement, but that's likely to be true of the first version of almost any large feature."
1,"(If you liked this post, you may want to read my previous blog posts on parallelism.)"
1,Posted by
1,Robert Haas
1,9:58 AM
1,Labels:
1,"parallelism,"
1,postgresql
1,12 comments:
1,"VApril 21, 2016 1:51 PMImpressive! Could you please run the same test for different values of max_parallel_degree? I would love to see how does it behaves.Thank you!ReplyDeleteRepliesReplyGarenApril 21, 2016 4:43 PMIn your list of queries (Q1 - Q20), Q2 is missing.ReplyDeleteRepliesRobert HaasApril 22, 2016 8:03 AMThat's one of the ones for which the plan didn't change."
1,"I didn't show those in the list.DeleteRepliesReplyReplyAnonymousApril 22, 2016 6:42 AM>Many of these queries - Q4, Q5, Q6, Q7, Q14, Q15, and Q20 - >would have been better off using a bitmap index scan >on the driving table, but unfortunately that's >not supported in PostgreSQL 9.6. the new Bloom index (9.6) can help here ?http://www.postgresql.org/docs/devel/static/bloom.html"
1,"ReplyDeleteRepliesRobert HaasApril 22, 2016 8:04 AMNo, the problem is we don't support any sort of index scan on the driving table for parallel queries yet.DeleteRepliesReplyReplyMike SofenApril 27, 2016 1:47 PMIn the MS SQL Server world, they've supported adjustable parallelism for more than a decade, and...it has stung us from time to time.In a complex query, both in real time and ETL/Batch scenarios with parallelism enabled (query hint option maxdop = n), we'd start seeing cxpacket wait types appearing."
1,"Research showed that a query split into, say, 5 threads/cores, would wait for the longest running thread to complete before continuing to the next step...and sometimes that long running thread would be dependent on something that took a long time to resolve so it looked liked the query had stalled."
1,"Our only solution for that type of query was to force it to run on a single thread/core (maxdop=1).Hopefully the new Postgres parallelism finds a way to avoid that, since I've got some very large, complex queries coming up for dev and it will be interesting to see if they can make it through faster via parallel.Great article and research, Robert!"
1,"You are always meticulous and detailed, and I appreciate the effort you take to create these reports.ReplyDeleteRepliesReplyDavidApril 29, 2016 1:40 PMHello, can you tell me how and why you selected your queries? Why 22 and what is specific for each one of them? Are they just some random queries?ReplyDeleteRepliesRobert HaasMay 24, 2016 12:12 PMThey are the queries from the TPC-H benchmark.DeleteRepliesReplyReplyWangdongMay 18, 2016 9:38 AMHi dear HassMy question is how to set parallel query in Windows OS?I set max_parallel_degree to 4 ,but no execute with parallel query.Thank youReplyDeleteRepliesRobert HaasMay 24, 2016 12:12 PMThere's no difference in the correct method of configuring this on Linux vs. on Windows."
1,"It may be, however, that your queries are not parallel-safe (e.g. because they write data or call a parallel-unsafe function) or that the planner decided there was no parallel plan faster than the serial plan.DeleteRepliesReplyReplySimonJanuary 11, 2018 5:01 AMHi, I do the same like you, in Ubuntu in virtual desktop with max_parallel_workers_per_gather=4, same benchmark(TPC H) on postgresql 10.1, I have wrong result not optimization time on queries from Q2 to Q22."
1,"can you please help me to understand. ReplyDeleteRepliesRobert HaasJanuary 30, 2018 8:55 AMI don't think that's a question that we can really handle in blog comments, especially without all the details."
1,Please see https://wiki.postgresql.org/wiki/Guide_to_reporting_problemsDeleteRepliesReplyReplyAdd commentLoad more...
1,Newer Post
1,Older Post
1,Home
1,Subscribe to:
1,Post Comments (Atom)
1,About Me
1,Robert Haas
1,View my complete profile
1,Blog Archive
1,2020
1,(5)
1,December
1,(1)
1,May
1,(2)
1,February
1,(1)
1,January
1,(1)
1,2019
1,(7)
1,October
1,(1)
1,September
1,(1)
1,June
1,(1)
1,February
1,(1)
1,January
1,(3)
1,2018
1,(5)
1,June
1,(2)
1,May
1,(1)
1,January
1,(2)
1,2017
1,(6)
1,December
1,(1)
1,September
1,(1)
1,August
1,(1)
1,April
1,(2)
1,March
1,(1)
1,2016
1,(6)
1,August
1,(1)
1,May
1,(1)
1,April
1,(1)
1,PostgreSQL 9.6 with Parallel Query vs. TPC-H
1,March
1,(2)
1,January
1,(1)
1,2015
1,(4)
1,November
1,(1)
1,October
1,(1)
1,March
1,(2)
1,2014
1,(11)
1,December
1,(1)
1,August
1,(1)
1,June
1,(1)
1,May
1,(1)
1,April
1,(2)
1,March
1,(5)
1,2013
1,(5)
1,October
1,(2)
1,July
1,(1)
1,May
1,(1)
1,April
1,(1)
1,2012
1,(14)
1,June
1,(2)
1,May
1,(1)
1,April
1,(2)
1,March
1,(7)
1,February
1,(1)
1,January
1,(1)
1,2011
1,(41)
1,December
1,(1)
1,November
1,(3)
1,October
1,(5)
1,September
1,(2)
1,August
1,(2)
1,July
1,(2)
1,June
1,(2)
1,May
1,(5)
1,April
1,(3)
1,March
1,(7)
1,February
1,(4)
1,January
1,(5)
1,2010
1,(46)
1,December
1,(6)
1,November
1,(7)
1,October
1,(5)
1,September
1,(6)
1,August
1,(4)
1,July
1,(5)
1,June
1,(4)
1,May
1,(4)
1,April
1,(5)
1,Simple theme. Powered by Blogger.
