['old', 'port']	 DBAs are advised to also convert accounts that use the mysql_old_password  authentication plugin to use  mysql_native_password  instead, because support for  mysql_old_password  has been removed
['new', 'old']	 If older client software cannot be upgraded immediately, the new  named_pipe_full_access_group  system variable can be used to give a Windows group the necessary permissions to open a named pipe connection
['innodb_temp_data_file_path', 'new']	 A newly added configuration file option,  innodb_temp_data_file_path , allows for a user-defined temporary data file path
['innodb_buffer_pool_dump_pct', 'new']	 A new system variable, innodb_buffer_pool_dump_pct , allows you to specify the percentage of most recently used pages in each buffer pool to read out and dump
['flush', 'port']	 Ł InnoDB  supports multiple page cleaner threads for flushing dirty pages from buffer pool instances
['innodb_page_cleaners', 'new']	 A new system variable,  innodb_page_cleaners , is used to specify the number of page cleaner threads
['innodb_buffer_pool_chunk_size', 'new']	 Chunk size is configurable using the new innodb_buffer_pool_chunk_size  configuration option
['innodb_page_cleaners', 'port']	 Ł Multithreaded page cleaner support ( innodb_page_cleaners ) is extended to shutdown and recovery phases
['innodb_fill_factor', 'new']	 A new global configuration option,  innodb_fill_factor , defines the percentage of space on each page that is filled with data during a sorted index build, with the remaining space reserved for future index growth
['old', 'port']	ibd'   [FILE_BLOCK_SIZE = n] General tablespaces can be created outside of the MySQL data directory, are capable of holding multiple tables, and support tables of all row formats
['innodb_default_row_format', 'new']	 A new configuration option,  innodb_default_row_format , specifies the default  InnoDB  row format
['new', 'old']	 This option uses the format  --rewrite-db=' dboldname -> dbnewname ' 
['query_cache_limit', 'query_cache_min_res_unit', 'query_cache_size', 'query_cache_type', 'query_cache_wlock_invalidate']	 Ł These system variables:  have_query_cache ,  ndb_cache_check_time ,  query_cache_limit , query_cache_min_res_unit ,  query_cache_size ,  query_cache_type , query_cache_wlock_invalidate 
['transaction_isolation', 'transaction_read_only']	 For better name correspondence between startup option and system variable names,  transaction_isolation  and transaction_read_only  have been created as aliases for  tx_isolation  and  tx_read_only 
['transaction_isolation', 'transaction_read_only']	 Applications should be adjusted to use  transaction_isolation  and transaction_read_only  instead
['metadata_locks_cache_size', 'metadata_locks_hash_instances']	 Ł The  metadata_locks_cache_size  and  metadata_locks_hash_instances  system variables are deprecated
['innodb_file_per_table', 'port']	 Ł Support for  TABLESPACE = innodb_file_per_table  and  TABLESPACE = innodb_temporary clauses with  CREATE TEMPORARY TABLE  is deprecated as of MySQL 5
['old', 'port']	 Ł Support for passwords that use the older pre-4
['binlog_group_commit_sync_delay', 'binlog_group_commit_sync_no_delay_count']	 Ł binlog_group_commit_sync_no_delay_count : Sets maximum number of transactions to wait for before aborting current delay specified by binlog_group_commit_sync_delay
['innodb_flush_sync', 'innodb_io_capacity']	 Ł innodb_flush_sync : Enable innodb_flush_sync to ignore innodb_io_capacity setting for bursts of I/O activity that occur at checkpoints
['innodb_flush_sync', 'innodb_io_capacity']	 Disable innodb_flush_sync to adhere to limit on I/O activity defined by innodb_io_capacity setting
['innodb_max_undo_log_size', 'old']	 Ł innodb_max_undo_log_size : Sets threshold for truncating InnoDB undo log
['performance_schema', 'performance_schema_max_digest_length']	 Ł performance_schema_max_digest_length : Maximum Performance Schema digest size in bytes
['innodb_file_format', 'new']	 Ł innodb_file_format : Format for new InnoDB tables
['innodb_rollback_segments', 'innodb_undo_logs']	 Ł innodb_undo_logs : Number of undo logs (rollback segments) used by InnoDB; alias for innodb_rollback_segments
['old', 'query_cache_size']	 Ł query_cache_size : Memory allocated to store results from old queries
['old', 'secure_auth']	 Ł secure_auth : Disallow authentication for accounts that have old (pre-4
['new', 'port']	 If you log in to the system, you can enter new reports
['new', 'port']	 Very often we get questions like,  ﬁWhy doesn't this work for me?ﬂ  Then we find that the feature requested wasn't implemented in that MySQL version, or that a bug described in a report has been fixed in newer MySQL versions
['port', 'sql_mode']	 Ł The SQL mode in effect when the problem occurred can be significant, so please report the value of the  sql_mode  system variable
['new', 'port']	com>" 53 new signatures gpg: no ultimately trusted keys found gpg: Total number processed: 1 gpg:           new user IDs: 1 gpg:         new signatures: 53 If you want to import the key into your RPM configuration to validate RPM install packages, yo
['new', 'port']	MySQL on Windows Considerations MySQL on Windows Considerations Ł Large Table Support If you need tables with a size larger than 4 GB, install MySQL on an NTFS or newer file system
['flush', 'port']	 Ł Running MySQL on a 4K Sector Hard Drive Running the MySQL server on a 4K sector hard drive on Windows is not supported with innodb_flush_method=async_unbuffered , which is the default setting
['new', 'port']	 If a port number is in use already, you will see the information icon ( ) next to the default value and Next  is disabled until you provide a new port number
['new', 'port']	 However, if you are unable to update your clients and applications to support this new authentication method, you can configure the MySQL server to use  mysql_native_password  for legacy authentication
['new', 'port']	0 supports a new authentication based on improved, stronger SHA256-based password methods
['new', 'port']	 Important The  caching_sha2_password  authentication plugin on the server requires new versions of connectors and clients, which add support for the new MySQL 8
['new', 'old']	 In addition, old and new configuration files might conflict
['new', 'old']	 You need either to copy the  data  directory from the old version to the new version, or to specify an alternative  datadir value to set location of the data directory
['new', 'old']	 Ł After you have copied over the MySQL database files from the previous installation and have successfully started the new server, you should consider removing the old installation files to save disk space
['new', 'port']	 Important If you have chosen to replace your third-party MySQL distribution with a newer version of MySQL from the MySQL Yum repository, remember to run  mysql_upgrade  after the server starts, to check and possibly resolve any incompatibilities bet
['new', 'old']	 The command replaces old packages with new ones to ensure compatibility of old applications with the new installation; for example, the old  mysql-libs  package is replaced with the  mysql-community-libs-compat  package, which provides a replacement
['new', 'port']	7   To start a new Docker container for the MySQL Enterprise Server with a Docker image downloaded from My Oracle Support, use this command: docker run --name=mysql1 -d mysql/enterprise-server:5
['new', 'port']	Configuring SSL Library Support Play hard with your new installation
['innodb_data_file_path', 'innodb_log_file_size']	 If you do not want to use the default values, make sure that the settings for the  innodb_data_file_path  and innodb_log_file_size  configuration parameters are in place in the MySQL  configuration file   before  running  mysqld 
['old', 'port']	5, support for passwords that use the older pre-4
['old', 'port']	 FOR UPGRADE  reports a table as needing a rebuild if it contains old temporal columns in pre-5
['avoid_temporal_upgrade', 'port']	4 format ( TIME ,  DATETIME , and  TIMESTAMP  columns without support for fractional seconds precision) and the  avoid_temporal_upgrade  system variable is disabled
['avoid_temporal_upgrade', 'old']	7 avoid_temporal_upgrade  is enabled,  FOR UPGRADE  ignores the old temporal columns present in the table; consequently,  mysql_upgrade  does not upgrade them
['avoid_temporal_upgrade', 'old']	 If avoid_temporal_upgrade  is enabled,  REPAIR TABLE  ignores the old temporal columns present in the table and does not upgrade them
['new', 'old']	 Upgrade the MySQL binaries in place by replacing the old binaries with the new ones 3
['new', 'old']	 Upgrade the MySQL binaries in place (replace the old binaries with the new ones) 4
['new', 'old']	 Upgrade the MySQL binaries in place (replace the old binaries with the new ones) 3
['old', 'port']	 After following the preceding instructions, DBAs are advised also to convert accounts that use the mysql_old_password  authentication plugin to use  mysql_native_password  instead, because support for  mysql_old_password  has been removed
['binlog_format', 'new']	 Alternatively, if you cannot stop new statements, temporarily change to row-based logging on the source ( binlog_format=ROW ) and wait until all replicas have processed all binary logs produced up to the point of this change
['new', 'old']	 Example of old  <AUDIT_RECORD>  format: <AUDIT_RECORD  TIMESTAMP="2013-04-15T15:27:27"  NAME="Query"  CONNECTION_ID="3"  STATUS="0"  SQLTEXT="SELECT 1" /> Example of new format: <AUDIT_RECORD>  <TIMESTAMP>2013-04-15T15:27:27 UTC</TIMESTAMP>  <RECORD
['new', 'old']	1</IP>  <COMMAND_CLASS>select</COMMAND_CLASS>  <SQLTEXT>SELECT 1</SQLTEXT> </AUDIT_RECORD> If you previously used an older version of the audit log plugin, use this procedure to avoid writing new- format log entries to an existing log file that conta
['new', 'slave_net_timeout']	 The new default is applied when a replica without a setting for the  slave_net_timeout  system variable is upgraded to MySQL 5
['innodb_default_row_format', 'new']	9, any new tables that you create use the row format defined by innodb_default_row_format  unless you explicitly define a row format ( ROW_FORMAT )
['new', 'old']	 Ł In-Place Upgrade Ł Logical Upgrade In-Place Upgrade An in-place upgrade involves shutting down the old MySQL server, replacing the old MySQL binaries or packages with the new ones, restarting MySQL on the existing data directory, and upgrading any
['old', 'port']	 For example: mysqladmin -u root -p shutdown mysqld_safe --user=mysql --datadir= /path/to/existing-datadir  & Logical Upgrade A logical upgrade involves exporting SQL from the old MySQL instance using a backup or export utility such as  mysqldump  or
['new', 'old']	1, ﬁInstalling MySQL on Linux Using the MySQL Yum Repositoryﬂ , for a list), you can perform an in-place upgrade for MySQL (that is, replacing the old version and then running the new version using the old data files) with the MySQL Yum repository
['new', 'old']	 If you recompile applications and dynamically link them with the updated libraries:   As typical with new versions of shared libraries where there are differences or additions in symbol versioning between the newer and older libraries (for example, 
['new', 'old']	7 shared client libraries and some olderŠprior or variantŠversions of the shared libraries shipped natively by the Linux distributions' software repositories, or from some other sources), any applications compiled using the updated, newer shared libr
['new', 'old']	 The latest versions of RPMs, when installed using the standard package management tool ( yum , dnf , or  zypper ), seamlessly upgrade those older installations, making it unnecessary to uninstall those old packages before installing the new ones
['old', 'port']	cnf  file No Yes Multilib support No Yes Note Installation of previous versions of MySQL using older packages might have created a configuration file named  /usr/my
['new', 'old']	11 Upgrade Troubleshooting Ł If problems occur, such as that the new  mysqld  server does not start, verify that you do not have an old my
['flush', 'new', 'port']	 After you import the  mysql  database on the new machine, execute  mysqladmin flush-privileges so that the server reloads the grant table information
['new', 'port']	 Ł Use of new features, new configuration options, or new configuration option values that are not supported by a previous release may cause downgrade errors or failures
['new', 'port']	 Before downgrading, reverse changes resulting from the use of new features and remove configuration settings that are not supported by the release you are downgrading to
['old', 'port']	 If you downgrade a server that supports multiple triggers to an older version that does not, the downgrade has these effects: Ł For each table that has triggers, all trigger definitions remain in the  
['new', 'old']	 Ł In-Place Downgrade Ł Logical Downgrade In-Place Downgrade In-place downgrade involves shutting down the new MySQL version, replacing the new MySQL binaries or packages with the old ones, and restarting the old MySQL version on the existing data di
['new', 'old']	 Downgrade the MySQL binaries or packages in-place by replacing the newer binaries or packages with the older ones
['new', 'old']	 Start the older MySQL server, using the new data directory
['new', 'old']	 Stop the newer MySQL server and restart the older one
['auto_increment_increment', 'auto_increment_offset']	 Ł Server-system variables related to  AUTO_INCREMENT  ( auto_increment_increment  and auto_increment_offset ) that can be used for replication:  Section 5
['connect_timeout', 'key_buffer_size', 'max_allowed_packet']	sock key_buffer_size=16M max_allowed_packet=8M [mysqldump] quick Here is a typical user option file: [client] # The following password is sent to all standard MySQL clients password="my password" [mysql] no-auto-rehash connect_timeout=2 To create opt
['max_allowed_packet', 'max_join_size']	 For example, the max_allowed_packet  variable can be set for  mysql  as  --max_a , but not as  --max  because the latter is ambiguous: shell>  mysql --max=1000000 mysql: ambiguous option '--max=1000000' (max_allowed_packet, max_join_size) Be aware t
['old', 'port']	5, ﬁConnection Transport Protocolsﬂ Ł --secure-auth Do not send passwords to the server in old (pre-4
['ssl_cert', 'ssl_key']	 To specify additional parameters for encrypted connections, consider setting at least the  ssl_cert and  ssl_key  system variables on the server side and the  --ssl-ca  option on the client side
['innodb_data_file_path', 'innodb_log_file_size']	 If you do not want to use the default values, make sure that the settings for the  innodb_data_file_path  and  innodb_log_file_size configuration parameters are in place in the MySQL  configuration file  before running  mysql_install_db 
['new', 'old']	mysqladmin  Š A MySQL Server Administration Program Ł old-password  new_password This is like the  password  command but stores the password using the old (pre-4
['old', 'port']	 However, if a  mysqldump  dump file contains multiple triggers for a table that have the same trigger event and action time, an error occurs for attempts to load the dump file into an older server that does not support multiple triggers
['flush', 'old']	7 or higher from older versions, do not use  -- flush-privileges 
['general_log', 'slow_query_log']	 mysqldump  includes statements to recreate the  general_log  and  slow_query_log  tables for dumps of the  mysql  database
['key_buffer_size', 'myisam_sort_buffer_size']	MYI If you want to check all  MyISAM  tables and repair any that are corrupted, you can use the following command: shell>  myisamchk --silent --force --fast --update-state \            --key_buffer_size=64M --myisam_sort_buffer_size=64M \            
['ft_max_word_len', 'ft_min_word_len', 'ft_stopword_file']	 For use with the -r or -o option --ft_max_word_len Maximum word length for FULLTEXT indexes --ft_min_word_len Minimum word length for FULLTEXT indexes --ft_stopword_file Use stopwords from this file instead of built-in list --HELP Display help messa
['ft_max_word_len', 'ft_min_word_len', 'ft_stopword_file', 'key_buffer_size']	 You can also set the following variables by using  -- var_name = value  syntax: Variable Default Value decode_bits 9 ft_max_word_len version-dependent ft_min_word_len 4 ft_stopword_file built-in list key_buffer_size 523264 myisam_block_size 1024 myi
['key_buffer_size', 'myisam_sort_buffer_size']	 If you want a faster repair, set the  key_buffer_size  and  myisam_sort_buffer_size  variables to about 25% of your available memory
['ft_max_word_len', 'ft_min_word_len']	 ft_min_word_len  and  ft_max_word_len  indicate the minimum and maximum word length for FULLTEXT  indexes on  MyISAM  tables
['ft_max_word_len', 'ft_min_word_len', 'ft_stopword_file']	 To avoid the problem if you have modified the minimum or maximum word length or the stopword file in the server, specify the same  ft_min_word_len ,  ft_max_word_len , and ft_stopword_file  values to  myisamchk  that you use for  mysqld 
['key_buffer_size', 'myisam_sort_buffer_size']	 For example, if you have more than 512MB RAM available, you could use options such as these (in addition to any other options you might specify): shell>  myisamchk --myisam_sort_buffer_size=256M \             --key_buffer_size=512M \ 505 
['new', 'old']	 Ł Space for the new index file that replaces the old one
['flush', 'new']	MYI After you have installed the packed table into the MySQL database directory, you should execute mysqladmin flush-tables  to force  mysqld  to start using the new table
['port', 'server_id']	 Ł --connection-server-id= server_id This option is used to test a MySQL server for support of the  BINLOG_DUMP_NON_BLOCK  connection flag
['key_buffer_size', 'port', 'table_open_cache']	 When tuning a MySQL server, the two most important variables to configure are  key_buffer_size  and table_open_cache 
['key_buffer_size', 'sort_buffer_size', 'table_open_cache']	 Ł If you have at least 1-2GB of memory and many tables and want maximum performance with a moderate number of clients, use something like this: shell>  mysqld_safe --key_buffer_size=384M --table_open_cache=4000 \             --sort_buffer_size=4M --
['key_buffer_size', 'read_buffer_size', 'sort_buffer_size']	 Ł With little memory and lots of connections, use something like this: shell>  mysqld_safe --key_buffer_size=512K --sort_buffer_size=100K \             --read_buffer_size=100K & Or even this: shell>  mysqld_safe --key_buffer_size=512K --sort_buffer_
['end_markers_in_json', 'enforce_gtid_consistency']	Server Option, System Variable, and Status Variable Reference Name Cmd-Line Option File System Var Status Var Var Scope Dynamic early-plugin-load Yes Yes end_markers_in_json Yes Yes Yes Both Yes enforce_gtid_consistency Yes Yes Yes Global Varies eq_r
['innodb_file_format_check', 'innodb_file_format_max', 'innodb_file_per_table']	Server Option, System Variable, and Status Variable Reference Name Cmd-Line Option File System Var Status Var Var Scope Dynamic innodb_file_format_check Yes Yes Yes Global No innodb_file_format_max Yes Yes Yes Global Yes innodb_file_per_table Yes Yes
['innodb_read_io_threads', 'innodb_read_only', 'innodb_replication_delay']	Server Option, System Variable, and Status Variable Reference Name Cmd-Line Option File System Var Status Var Var Scope Dynamic innodb_read_io_threads Yes Yes Yes Global No innodb_read_only Yes Yes Yes Global No innodb_replication_delay Yes Yes Yes G
['log_slave_updates', 'log_slow_admin_statements']	Server Option, System Variable, and Status Variable Reference Name Cmd-Line Option File System Var Status Var Var Scope Dynamic log-short-format Yes Yes log_slave_updates Yes Yes Yes Global No log_slow_admin_statements Yes Yes Yes Global Yes log_slow
['max_join_size', 'max_length_for_sort_data']	Server Option, System Variable, and Status Variable Reference Name Cmd-Line Option File System Var Status Var Var Scope Dynamic max_insert_delayed_threads Yes Both Yes max_join_size Yes Yes Yes Both Yes max_length_for_sort_data Yes Yes Yes Both Yes m
['optimizer_prune_level', 'optimizer_search_depth']	Server Option, System Variable, and Status Variable Reference Name Cmd-Line Option File System Var Status Var Var Scope Dynamic Opened_tables Yes Both No optimizer_prune_level Yes Yes Yes Both Yes optimizer_search_depth Yes Yes Yes Both Yes optimizer
['performance_schema_max_file_classes', 'performance_schema_max_file_handles']	Server Option, System Variable, and Status Variable Reference Name Cmd-Line Option File System Var Status Var Var Scope Dynamic performance_schema_max_file_classes Yes Yes Yes Global No performance_schema_max_file_handles Yes Yes Yes Global No perfor
['query_cache_type', 'query_cache_wlock_invalidate', 'query_prealloc_size']	Server Option, System Variable, and Status Variable Reference Name Cmd-Line Option File System Var Status Var Var Scope Dynamic query_cache_type Yes Yes Yes Both Yes query_cache_wlock_invalidate Yes Yes Yes Both Yes query_prealloc_size Yes Yes Yes Bo
['server_id_bits', 'session_track_gtids']	Server Option, System Variable, and Status Variable Reference Name Cmd-Line Option File System Var Status Var Var Scope Dynamic server_id_bits Yes Yes Yes Global No server_uuid Yes Global No session_track_gtids Yes Yes Yes Both Yes session_track_sche
['slave_max_allowed_packet', 'slave_net_timeout']	Server Option, System Variable, and Status Variable Reference Name Cmd-Line Option File System Var Status Var Var Scope Dynamic slave_load_tmpdir Yes Yes Yes Global No slave_max_allowed_packet Yes Yes Yes Global Yes slave_net_timeout Yes Yes Yes Glob
['binlog_checksum', 'binlog_direct_non_transactional_updates', 'binlog_error_action', 'binlog_format']	Server System Variable Reference Name Cmd-Line Option File System Var Var Scope Dynamic binlog_checksum Yes Yes Yes Global Yes binlog_direct_non_transactional_updates Yes Yes Yes Both Yes binlog_error_action Yes Yes Yes Global Yes binlog_format Yes Y
['general_log', 'group_concat_max_len']	Server System Variable Reference Name Cmd-Line Option File System Var Var Scope Dynamic general_log Yes Yes Yes Global Yes general_log_file Yes Yes Yes Global Yes group_concat_max_len Yes Yes Yes Both Yes group_replication_allow_local_disjoint_gtids_
['innodb_buffer_pool_chunk_size', 'innodb_buffer_pool_dump_at_shutdown']	Server System Variable Reference Name Cmd-Line Option File System Var Var Scope Dynamic innodb_background_drop_list_empty Yes Yes Yes Global Yes innodb_buffer_pool_chunk_size Yes Yes Yes Global No innodb_buffer_pool_dump_at_shutdown Yes Yes Yes Globa
['innodb_flush_log_at_trx_commit', 'innodb_flush_neighbors', 'innodb_flush_sync']	Server System Variable Reference Name Cmd-Line Option File System Var Var Scope Dynamic innodb_flush_log_at_trx_commit Yes Yes Yes Global Yes innodb_flush_method Yes Yes Yes Global No innodb_flush_neighbors Yes Yes Yes Global Yes innodb_flush_sync Ye
['innodb_max_undo_log_size', 'old']	Server System Variable Reference Name Cmd-Line Option File System Var Var Scope Dynamic innodb_max_undo_log_size Yes Yes Yes Global Yes innodb_merge_threshold_set_all_debug Yes Yes Yes Global Yes innodb_monitor_disable Yes Yes Yes Global Yes innodb_m
['innodb_strict_mode', 'innodb_support_xa', 'innodb_sync_array_size']	Server System Variable Reference Name Cmd-Line Option File System Var Var Scope Dynamic innodb_strict_mode Yes Yes Yes Both Yes innodb_support_xa Yes Yes Yes Both Yes innodb_sync_array_size Yes Yes Yes Global No innodb_sync_debug Yes Yes Yes Global N
['large_pages', 'lc_messages', 'port']	Server System Variable Reference Name Cmd-Line Option File System Var Var Scope Dynamic large_files_support Yes Global No large_page_size Yes Global No large_pages Yes Yes Yes Global No last_insert_id Yes Session Yes lc_messages Yes Yes Yes Both Yes 
['max_allowed_packet', 'max_binlog_cache_size', 'max_binlog_size', 'max_binlog_stmt_cache_size']	Server System Variable Reference Name Cmd-Line Option File System Var Var Scope Dynamic max_allowed_packet Yes Yes Yes Both Yes max_binlog_cache_size Yes Yes Yes Global Yes max_binlog_size Yes Yes Yes Global Yes max_binlog_stmt_cache_size Yes Yes Yes
['bind_address', 'connect_timeout', 'mysql_native_password_proxy_users']	Server System Variable Reference Name Cmd-Line Option File System Var Var Scope Dynamic mysql_native_password_proxy_users Yes Yes Yes Global Yes mysqlx_bind_address Yes Yes Yes Global No mysqlx_connect_timeout Yes Yes Yes Global Yes mysqlx_idle_worke
['performance_schema_events_stages_history_size', 'performance_schema_events_statements_history_long_size']	Server System Variable Reference Name Cmd-Line Option File System Var Var Scope Dynamic performance_schema_events_stages_history_size Yes Yes Yes Global No performance_schema_events_statements_history_long_size Yes Yes Yes Global No performance_schem
['slave_checkpoint_period', 'slave_compressed_protocol', 'slave_exec_mode']	Server System Variable Reference Name Cmd-Line Option File System Var Var Scope Dynamic slave_checkpoint_period Yes Yes Yes Global Yes slave_compressed_protocol Yes Yes Yes Global Yes slave_exec_mode Yes Yes Yes Global Yes slave_load_tmpdir Yes Yes Y
['ssl_key', 'stored_program_cache', 'super_read_only', 'sync_binlog', 'sync_frm']	Server System Variable Reference Name Cmd-Line Option File System Var Var Scope Dynamic ssl_key Yes Yes Yes Global No stored_program_cache Yes Yes Yes Global Yes super_read_only Yes Yes Yes Global Yes sync_binlog Yes Yes Yes Global Yes sync_frm Yes Y
['read_only', 'updatable_views_with_limit']	Server Status Variable Reference Name Cmd-Line Option File System Var Var Scope Dynamic tx_read_only Yes Both Yes unique_checks Yes Both Yes updatable_views_with_limit Yes Yes Yes Both Yes validate_password_check_user_name Yes Yes Yes Global Yes vali
['large_pages', 'port']	Server Command Options Ł --large-pages Command-Line Format --large-pages[={OFF|ON}] System Variable large_pages Scope Global Dynamic No Platform Specific Linux Type Boolean Default Value OFF Some hardware/operating system architectures support memory
['log_error_verbosity', 'log_warnings']	 For more information, see the descriptions of  log_error_verbosity and  log_warnings 
['automatic_sp_privileges', 'concurrent_insert', 'delay_key_write']	 It results in these settings:  delay_key_write=OFF ,  concurrent_insert=NEVER , automatic_sp_privileges=OFF 
['ssl_cert', 'ssl_key']	 Consider setting at least the  ssl_cert  and  ssl_key  system variables on the server side and the  --ssl-ca  (or  --ssl-capath ) option on the client side
['autocommit', 'automatic_sp_privileges']	 To set the variable using an option file, include these lines: [mysqld] autocommit=0 Ł automatic_sp_privileges Command-Line Format --automatic-sp-privileges[={OFF|ON}] System Variable automatic_sp_privileges Scope Global Dynamic Yes Type Boolean 664
['automatic_sp_privileges', 'new']	 If you start  mysqld  with  --skip-new ,  automatic_sp_privileges  is set to  OFF 
['back_log', 'new']	 The back_log  value indicates how many requests can be stacked during this short time before MySQL momentarily stops answering new requests
['mysql_native_password_proxy_users', 'port']	 However, it may also be necessary to enable plugin- specific system variables to take advantage of server proxy user mapping support: Ł For the  mysql_native_password  plugin, enable  mysql_native_password_proxy_users 
['concurrent_insert', 'new']	 If you start  mysqld  with  --skip-new ,  concurrent_insert  is set to  NEVER 
['default_authentication_plugin', 'new']	 The  default_authentication_plugin  value affects these aspects of server operation: Ł It determines which authentication plugin the server assigns to new accounts created by  CREATE USER  and  GRANT  statements that do not explicitly specify an aut
['delay_key_write', 'new']	 If you start  mysqld  with  --skip-new ,  delay_key_write  is set to  OFF 
['default_storage_engine', 'default_tmp_storage_engine']	 It is permitted to set the  default_storage_engine  or  default_tmp_storage_engine  system variable to a storage engine that is disabled
['key_buffer_size', 'key_cache_block_size']	 The fraction of the key buffer in use can be determined using  key_buffer_size  in conjunction with the  Key_blocks_unused  status variable and the buffer block size, which is available from the key_cache_block_size  system variable: 1 - ((Key_block
['large_pages', 'port']	 Ł large_pages Command-Line Format --large-pages[={OFF|ON}] System Variable large_pages Scope Global Dynamic No Platform Specific Linux Type Boolean Default Value OFF Whether large page support is enabled (via the  --large-pages  option)
['lock_wait_timeout', 'port']	 A given statement can require more than one lock, so it is possible for the statement to block for longer than the  lock_wait_timeout value before reporting a timeout error
['log_warnings', 'old']	 It is preferred over, and should be used instead of, the older  log_warnings  system variable
['log_error_verbosity', 'log_warnings']	 See the description of  log_warnings  for information about how that variable relates to  log_error_verbosity 
['log_error_verbosity', 'log_warnings']	 In particular, assigning a value to log_warnings  assigns a value to  log_error_verbosity  and vice versa
['general_log', 'slow_query_log']	 To do that, enable the general_log  and  slow_query_log  system variables
['general_log', 'slow_query_log']	 For  FILE  logging, the  general_log_file and  slow_query_log_file  system variables determine the log file locations
['log_syslog', 'port']	 Regardless of the default,  log_syslog  can be set explicitly to control output on any supported platform
['log_queries_not_using_indexes', 'log_throttle_queries_not_using_indexes']	 Ł log_throttle_queries_not_using_indexes Command-Line Format --log-throttle-queries-not-using-indexes=# System Variable log_throttle_queries_not_using_indexes Scope Global Dynamic Yes Type Integer Default Value 0 If  log_queries_not_using_indexes  i
['log_error_verbosity', 'log_warnings', 'old']	2, information items previously governed by  log_warnings  are governed by  log_error_verbosity , which is preferred over, and should be used instead of, the older  log_warnings  system variable
['log_error_verbosity', 'log_warnings']	 Assigning a value to  log_warnings  assigns a value to  log_error_verbosity  and vice versa
['log_error_verbosity', 'log_warnings']	 The variables are related as follows: Ł Suppression of all  log_warnings  items, achieved with  log_warnings=0 , is achieved with log_error_verbosity=1  (errors only)
['log_error_verbosity', 'log_warnings']	 Ł Items printed for  log_warnings=1  or higher count as warnings and are printed for log_error_verbosity=2  or higher
['log_error_verbosity', 'log_warnings']	 Ł Items printed for  log_warnings=2  count as notes and are printed for  log_error_verbosity=3 
['log_error_verbosity', 'log_warnings']	2 and higher, use of  log_warnings  is still permitted but maps onto use of log_error_verbosity  as follows: Ł Setting  log_warnings=0  is equivalent to  log_error_verbosity=1  (errors only)
['log_error_verbosity', 'log_warnings']	 Ł Setting  log_warnings=1  is equivalent to  log_error_verbosity=2  (errors, warnings)
['log_error_verbosity', 'log_warnings']	 Ł Setting  log_warnings=2  (or higher) is equivalent to  log_error_verbosity=3  (errors, warnings, notes), and the server sets  log_warnings  to 2 if a larger value is specified
['max_allowed_packet', 'net_buffer_length']	 The packet message buffer is initialized to  net_buffer_length  bytes, but can grow up to max_allowed_packet  bytes when needed
['performance_schema', 'performance_schema_max_digest_length']	 The Performance Schema, if it tracks statement digests, makes a copy of the digest value, using the  performance_schema_max_digest_length 
['performance_schema', 'performance_schema_max_digest_length']	 Consequently, if performance_schema_max_digest_length  is less than  max_digest_length , digest values stored in the Performance Schema are truncated relative to the original digest values
['max_execution_time', 'new']	 max_execution_time  applies as follows: Ł The global  max_execution_time  value provides the default for the session value for new connections
['max_sort_length', 'sort_buffer_size']	 Increasing the value of  max_sort_length  may require increasing the value of  sort_buffer_size  as well
['max_sp_recursion_depth', 'thread_stack']	 If you increase the value of max_sp_recursion_depth , it may be necessary to increase thread stack size by increasing the value of  thread_stack  at server startup
['new', 'old']	 Ideally, a new Windows local group name (for example,  mysql_old_client_users ) should be created in Windows and then used to replace the default value for this variable when access to older client software is absolutely necessary
['max_allowed_packet', 'net_buffer_length']	 Both begin with a size given by  net_buffer_length  but are dynamically enlarged up to  max_allowed_packet  bytes as needed
['default_authentication_plugin', 'old_passwords']	 The server sets the global  old_passwords  value during startup to be consistent with the password hashing method required by the authentication plugin indicated by the default_authentication_plugin  system variable
['max_connections', 'open_files_limit', 'table_open_cache']	 The effective  open_files_limit  value is based on the value specified at system startup (if any) and the values of  max_connections  and  table_open_cache , using these formulas: Ł 10 + max_connections + (table_open_cache * 2) Ł max_connections * 5
['new', 'old']	  pseudo_slave_mode  assists with the correct handling of transactions that originated on older or newer servers than the server currently processing them
['query_cache_size', 'query_cache_type']	 For nonzero values of  query_cache_size , that many bytes of memory are allocated even if query_cache_type=0 
['port', 'super_read_only']	 The server also supports a  super_read_only  system variable (disabled by default), which has these effects: Ł If  super_read_only  is enabled, the server prohibits client updates, even from users who have the SUPER  privilege
['old', 'read_only']	 Ł read_only  can be enabled while you hold a global read lock (acquired with  FLUSH TABLES WITH READ LOCK ) because that does not involve table locks
['new', 'old']	 If the schema name tracker is enabled, name notification occurs each time the default schema is set, even if the new schema name is the same as the old
['new', 'old']	 If the session state tracker is enabled, notification occurs for each change that involves tracked session attributes, even if the new attribute values are the same as the old
['session_track_schema', 'session_track_system_variables']	 To receive notification of the schema name or session system variable values, use the session_track_schema  or  session_track_system_variables  system variable, respectively
['port', 'session_track_state_change']	 Note Assigning a value to  session_track_state_change  itself is not considered a state change and is not reported as such
['new', 'session_track_system_variables']	 However, if its name listed in the value of  session_track_system_variables , any assignments to it do result in notification of the new value
['autocommit', 'session_track_system_variables']	 Ł session_track_system_variables Command-Line Format --session-track-system-variables=# System Variable session_track_system_variables Scope Global, Session Dynamic Yes Type String Default Value time_zone, autocommit, character_set_client, character
['new', 'old']	 If session system variable tracking is enabled, notification occurs for all assignments to tracked session variables, even if the new values are the same as the old
['max_sort_length', 'sort_buffer_size']	 Also, increasing the value of  max_sort_length  may require increasing the value of  sort_buffer_size 
['port', 'ssl_cert']	 If the server is started with  ssl_cert  set to a certificate that uses any restricted cipher or cipher category, the server starts with support for encrypted connections disabled
['table_definition_cache', 'table_open_cache']	 The default value is based on the following formula, capped to a limit of 2000: 400 + (table_open_cache / 2) For  InnoDB ,  table_definition_cache  acts as a soft limit for the number of open table instances in the  InnoDB  data dictionary cache
['innodb_open_files', 'table_definition_cache']	 Additionally,  table_definition_cache  defines a soft limit for the number of  InnoDB  file-per- table tablespaces that can be open at one time, which is also controlled by  innodb_open_files 
['innodb_open_files', 'table_definition_cache']	 If both  table_definition_cache  and  innodb_open_files  are set, the highest setting is used
['flush', 'innodb_open_files', 'table_definition_cache']	 If the number of open tablespace file handles exceeds the limit defined by  table_definition_cache  or innodb_open_files , the LRU mechanism searches the tablespace file LRU list for files that are fully flushed and are not currently being extended
['new', 'thread_cache_size']	 However, if your server sees hundreds of connections per second you should normally set  thread_cache_size  high enough so that most new connections use cached threads
['max_heap_table_size', 'tmp_table_size']	 The actual limit is the smaller of  tmp_table_size  and  max_heap_table_size 
['max_heap_table_size', 'tmp_table_size']	 Increase the value of  tmp_table_size  (and  max_heap_table_size  if necessary) if you do many advanced  GROUP BY  queries and you have lots of memory
['interactive_timeout', 'wait_timeout']	 On thread startup, the session  wait_timeout  value is initialized from the global  wait_timeout value or from the global  interactive_timeout  value, depending on the type of client (as defined by the  CLIENT_INTERACTIVE  connect option to  mysql_r
['max_connections', 'sql_mode']	max_connections = 1000; Ł Set a session system variable: SET SESSION sql_mode = 'TRADITIONAL'; SET @@SESSION
['innodb_autoextend_increment', 'innodb_buffer_pool_size', 'innodb_checksums', 'innodb_commit_concurrency']	 | innodb_autoextend_increment     | 8                                 | | innodb_buffer_pool_size         | 8388608                           | | innodb_checksums                | ON                                | | innodb_commit_concurrency      
['character_set_server', 'check_proxy_users', 'collation_server', 'completion_type']	Using System Variables Variable Name Variable Type Variable Scope character_set_server String Both check_proxy_users Boolean Global collation_connection String Both collation_database String Both collation_server String Both completion_type Enumerati
['innodb_fill_factor', 'innodb_flush_log_at_timeout', 'innodb_flush_log_at_trx_commit', 'innodb_flush_neighbors']	Using System Variables Variable Name Variable Type Variable Scope innodb_fill_factor Integer Global innodb_flush_log_at_timeout Integer Global innodb_flush_log_at_trx_commit Enumeration Global innodb_flush_neighbors Enumeration Global innodb_flush_sy
['innodb_purge_batch_size', 'innodb_purge_rseg_truncate_frequency', 'innodb_random_read_ahead', 'innodb_read_ahead_threshold']	Using System Variables Variable Name Variable Type Variable Scope innodb_purge_batch_size Integer Global innodb_purge_rseg_truncate_frequency Integer Global innodb_random_read_ahead Boolean Global innodb_read_ahead_threshold Integer Global innodb_rep
['max_error_count', 'max_execution_time', 'max_heap_table_size', 'max_join_size']	Using System Variables Variable Name Variable Type Variable Scope max_error_count Integer Both max_execution_time Integer Both max_heap_table_size Integer Both max_insert_delayed_threads Integer Both max_join_size Integer Both max_length_for_sort_dat
['read_buffer_size', 'read_only', 'read_rnd_buffer_size', 'relay_log_info_repository', 'relay_log_purge']	Using System Variables Variable Name Variable Type Variable Scope rbr_exec_mode Enumeration Both read_buffer_size Integer Both read_only Boolean Global read_rnd_buffer_size Integer Both relay_log_info_repository String Global relay_log_purge Boolean 
['slave_pending_jobs_size_max', 'slave_preserve_commit_order', 'slave_rows_search_algorithms', 'slave_sql_verify_checksum']	Using System Variables Variable Name Variable Type Variable Scope slave_pending_jobs_size_max Integer Global slave_preserve_commit_order Boolean Global slave_rows_search_algorithms Set Global slave_sql_verify_checksum Boolean Global slave_transaction
['transaction_alloc_block_size', 'transaction_isolation', 'transaction_prealloc_size', 'transaction_read_only']	Using System Variables Variable Name Variable Type Variable Scope transaction_alloc_block_size Integer Both transaction_allow_batching Boolean Session transaction_isolation Enumeration Both transaction_prealloc_size Integer Both transaction_read_only
['key_buffer_size', 'key_cache_age_threshold', 'key_cache_block_size', 'key_cache_division_limit']	 A key cache structured variable has these components: Ł key_buffer_size Ł key_cache_block_size Ł key_cache_division_limit Ł key_cache_age_threshold This section describes the syntax for referring to structured variables
['key_buffer_size', 'old']	key_buffer_size=2M \           --cold_cache
['innodb_rollback_segments', 'port']	 In this case, Innodb_available_undo_logs  reports 33 available rollback segments even though the instance was initialized with a lesser  innodb_rollback_segments  value
['innodb_buffer_pool_dump_at_shutdown', 'innodb_buffer_pool_dump_now']	 Ł Innodb_buffer_pool_dump_status The progress of an operation to record the  pages  held in the  InnoDB   buffer pool , triggered by the setting of  innodb_buffer_pool_dump_at_shutdown  or  innodb_buffer_pool_dump_now 
['flush', 'port']	Server Status Variables Ł Not_flushed_delayed_rows This status variable is deprecated (because  DELAYED  inserts are not supported); expect it to be removed in a future release
['sha256_password_private_key_path', 'sha256_password_public_key_path']	 The value is nonempty only if the server successfully initializes the private and public keys in the files named by the sha256_password_private_key_path  and  sha256_password_public_key_path  system variables
['port', 'sql_mode']	sql_mode; Important SQL mode and user-defined partitioning
['port', 'sql_mode']	 The Most Important SQL Modes The most important  sql_mode  values are probably these: Ł     ANSI 825 
['max_connections', 'port']	 The maximum number of connections MySQL supports (that is, the maximum value to which max_connections  can be set) depends on several factors: Ł The quality of the thread library on a given platform
['host_cache_size', 'skip_name_resolve']	Connection Management If you have a very slow DNS and many hosts, you might be able to improve performance either by enabling skip_name_resolve  to disable DNS lookups, or by increasing the value of  host_cache_size  to make the host cache larger
['flush', 'host_cache_size']	 To flush the host cache, use any of these methods: Ł Change the value of the  host_cache_size  system variable
['max_connect_errors', 'port']	IPv6 Support The value of the  max_connect_errors  system variable determines how many successive interrupted connection requests the server permits before blocking a host
['max_connect_errors', 'old']	 Increasing max_connect_errors  to a large value makes it less likely that a host reaches the threshold and becomes blocked
['bind_address', 'port']	IPv6 Support | CURRENT_USER() | @@bind_address | +----------------+----------------+ | ipv6user@::1   | ::             | +----------------+----------------+ 5
['bind_address', 'port']	MySQL Server Time Zone Support After configuring your server host to use a broker-supplied IPv6 address, start the MySQL server with an appropriate  bind_address  setting to permit the server to accept IPv6 connections
['transaction_isolation', 'transaction_read_only']	 To track changes to those session defaults, track the session values of the transaction_isolation  and  transaction_read_only  system variables
['new', 'port']	 To prevent new activity from being initiated during shutdown, the server stops accepting new client connections by closing the handlers for the network interfaces to which it normally listens for connections: the TCP/IP port, the Unix socket file, t
['flush', 'innodb_fast_shutdown']	  InnoDB  flushes its buffer pool to disk (unless  innodb_fast_shutdown  is 2), writes the current LSN to the tablespace, and terminates its own internal threads
['flush', 'new']	 You can force the server to close and reopen the log files (or in some cases switch to a new log file) by flushing the logs
['flush', 'max_binlog_size']	 In addition, the binary log is flushed when its size reaches the value of the  max_binlog_size  system variable
['general_log', 'log_output']	 Examples: Ł To write general query log entries to the log table and the log file, use  --log_output=TABLE,FILE  to select both log destinations and  --general_log  to enable the general query log
['general_log', 'log_output', 'slow_query_log']	 Ł To write general and slow query log entries only to the log tables, use  --log_output=TABLE  to select tables as the log destination and  --general_log  and  --slow_query_log  to enable both logs
['log_output', 'slow_query_log']	 Ł To write slow query log entries only to the log file, use  --log_output=FILE  to select files as the log destination and  --slow_query_log  to enable the slow query log
['general_log', 'slow_query_log']	 Ł The  general_log  and  slow_query_log  variables indicate whether the general query log and slow query log are enabled ( ON ) or disabled ( OFF )
['general_log', 'slow_query_log']	 Ł The  general_log_file  and  slow_query_log_file  variables indicate the names of the general query log and slow query log files
['open_files_limit', 'table_open_cache_instances']	 To work around this issue, execute FLUSH TABLES  or ensure that the value of  open_files_limit  is greater than the value of table_open_cache_instances 
['general_log', 'old']	general_log ENGINE = MyISAM; SET GLOBAL general_log = @old_log_state; Ł TRUNCATE TABLE  is a valid operation on a log table
['flush', 'old']	err-old mysqladmin flush-logs mv  host_name 
['flush', 'new']	 If the location of the error log file is not writable by the server, the log-flushing operation fails to create a new log file
['flush', 'new']	 Server restarts and log flushing do not cause a new general query log file to be generated (although flushing closes and reopens it)
['flush', 'old']	log shell>  mysqladmin flush-logs shell>  mv  host_name -old
['flush', 'new']	 The server creates a new file in the series each time any of the following events occurs: Ł The server is started or restarted Ł The server flushes the logs
['flush', 'old']	 For example, if your replicas never run more than three days behind, once a day you can execute  mysqladmin flush-logs  on the source and then remove any logs that are more than three days old
['auto_increment_increment', 'auto_increment_offset']	   The following system variables, when used with session scope (only), do not cause the logging format to switch: Ł auto_increment_increment Ł auto_increment_offset Ł character_set_client Ł character_set_connection Ł character_set_database Ł charact
['long_query_time', 'min_examined_row_limit']	5 The Slow Query Log The slow query log consists of SQL statements that take more than  long_query_time  seconds to execute and require at least  min_examined_row_limit  rows to be examined
['log_queries_not_using_indexes', 'log_slow_admin_statements']	 This behavior can be changed using  log_slow_admin_statements  and log_queries_not_using_indexes , as described later
['log_queries_not_using_indexes', 'long_query_time']	 The query must have taken at least  long_query_time  seconds, or log_queries_not_using_indexes  must be enabled and the query used no indexes for row lookups
['binlog_format', 'log_slow_slave_statements']	 Note that if row-based replication is in use ( binlog_format=ROW ),  log_slow_slave_statements  has no effect
['binlog_format', 'log_slow_slave_statements']	 Slow queries that are logged in row format when  binlog_format=MIXED  is set, or that are logged when  binlog_format=ROW  is set, are not added to the replica's slow query log, even if log_slow_slave_statements  is enabled
['new', 'old']	 When using MySQL with logging enabled, you may want to back up and remove old log files from time to time and tell MySQL to start logging to new files
['flush', 'new']	 To force MySQL to start using new log files, flush the logs
['flush', 'max_binlog_size']	 In addition, the server flushes the binary log automatically when current binary log file size reaches the value of the  max_binlog_size  system variable
['flush', 'port']	 FLUSH LOGS  supports optional modifiers to enable selective flushing of individual logs (for example, FLUSH BINARY LOGS )
['flush', 'new']	 A log-flushing operation has the following effects: Ł If binary logging is enabled, the server closes the current binary log file and opens a new log file with the next sequence number
['flush', 'new']	 As mentioned previously, flushing the binary log creates a new binary log file, whereas flushing the general query log, slow query log, or error log just closes and reopens the log file
['flush', 'new']	 For the latter logs, to cause a new log file to be created on Unix, rename the current log file first before flushing it
['flush', 'new']	 At flush time, the server opens the new log file with the original name
['flush', 'old']	old mysqladmin flush-logs On Windows, use  rename  rather than  mv 
['general_log', 'slow_query_log']	 To rename the general query log or slow query log at runtime, first connect to the server and disable the log: SET GLOBAL general_log = 'OFF'; SET GLOBAL slow_query_log = 'OFF'; With the logs disabled, rename the log files externally (for example, f
['general_log', 'slow_query_log']	 Then enable the logs again: SET GLOBAL general_log = 'ON'; SET GLOBAL slow_query_log = 'ON'; This method works on any platform and does not require a server restart
['flush', 'new']	 In this case, log-flushing operations fail to create a new log file
['new', 'port']	 You need not compile a new MySQL server just to start with a different Unix socket file and TCP/IP port number
['new', 'port']	cnf2 Another way to achieve a similar effect is to use environment variables to set the Unix socket file name and TCP/IP port number: shell>  MYSQL_UNIX_PORT=/tmp/mysqld-new
['new', 'old']	 It is very hard to debug MySQL under  gdb  if you do a lot of new connections the whole time as gdb  does not free the memory for old threads
['max_connections', 'thread_cache_size']	 You can avoid this problem by starting  mysqld  with thread_cache_size  set to a value equal to  max_connections  + 1
['new', 'old']	h  file from an old MySQL installation with new MySQL library
['old_passwords', 'secure_auth']	 Also,  secure_auth  cannot be disabled, and  old_passwords  cannot be set to 1
['port', 'secure_auth']	) In addition, the  mysql  client supports a  --secure-auth  option that is analogous to  secure_auth , but from the client side
['old', 'port']	) This information is of particular importance to PHP programmers migrating MySQL databases from versions older than 4
['old', 'port']	) This scenario illustrates that, if you must support older pre-4
['new', 'old_passwords']	 In this scenario, newly created accounts have short password hashes because  old_passwords=1 prevents generation of long hashes
['new', 'old_passwords']	 To create a new account that has a long password hash, or to change the password of any existing account to use a long hash, first set the session value of  old_passwords  set to 0 while leaving the global value set to 1, as described previously
['old_passwords', 'secure_auth']	 When that has been done, it is preferable to run the server with  old_passwords=0  and secure_auth=1 
['local_infile', 'old_passwords', 'secure_auth']	How to Run MySQL as a Normal User Name Cmd-Line Option File System Var Status Var Var Scope Dynamic local_infile Yes Yes Yes Global Yes old_passwords Yes Yes Yes Both Yes safe-user-create Yes Yes secure_auth Yes Yes Yes Global Yes secure_file_priv Ye
['old', 'port']	 The preferred API's support the improved MySQL authentication protocol and passwords, as well as prepared statements with placeholders
['new', 'port']	 Important Some MySQL releases introduce changes to the grant tables to add new privileges or features
['new', 'old']	 Renaming a table requires  ALTER  and  DROP  on the old table,  CREATE , and  INSERT  on the new table
['new', 'offline_mode']	 Ł A server in offline mode ( offline_mode  enabled) does not terminate  SUPER  client connections at the next client request, and accepts new connections from  SUPER  clients
['new', 'port']	Password Management To assign a password when you create a new account, use  CREATE USER  and include an  IDENTIFIED BY  clause: CREATE USER 'jeffrey'@'localhost' IDENTIFIED BY ' password '; CREATE USER  also supports syntax for specifying the accoun
['disconnect_on_expired_password', 'old']	Pluggable Authentication If a client does not indicate that it can handle expired passwords (or uses an older version of the client library that cannot so indicate), the server action depends on the value of the disconnect_on_expired_password  system
['check_proxy_users', 'mysql_native_password_proxy_users', 'port']	 Ł If  check_proxy_users  is enabled, it may also be necessary to enable a plugin-specific system variable to take advantage of server proxy user mapping support: Ł For the  mysql_native_password  plugin, enable  mysql_native_password_proxy_users 
['check_proxy_users', 'mysql_native_password_proxy_users', 'sha256_password_proxy_users']	cnf  file: [mysqld] check_proxy_users=ON mysql_native_password_proxy_users=ON sha256_password_proxy_users=ON Assuming that the relevant system variables have been enabled, create the proxy user as usual using CREATE USER , then grant it the  PROXY  p
['max_connections', 'max_user_connections']	 The max_questions ,  max_updates , and  max_connections  columns store the per-hour limits, and the max_user_connections  column stores the  MAX_USER_CONNECTIONS  limit
['new', 'port']	 Ł If a client program receives the following error message when it tries to connect, it means that the server expects passwords in a newer format than the client is capable of generating: shell>  mysql Client does not support authentication protocol
['flush', 'new']	 Remember that after you change the  root  password with an  UPDATE  statement, you do not need to specify the new password until after you flush the privileges, because the server does not yet know that you have changed the password
['auto_generate_certs', 'sha256_password_auto_generate_rsa_keys']	 For servers compiled using OpenSSL, the  auto_generate_certs  and sha256_password_auto_generate_rsa_keys  system variables are available to enable autogeneration and autodiscovery of SSL/RSA certificate and key files at startup
['port', 'tls_version']	 The tls_version  system variable on the server side and  --tls-version  option on the client side enable the level of support to be selected
['require_secure_transport', 'ssl_ca']	pem To specify in addition that clients are required to use encrypted connections, enable the require_secure_transport  system variable: [mysqld] ssl_ca=ca
['ssl_ca', 'ssl_cert', 'ssl_key']	 They are similar to the  ssl_ca ,  ssl_cert , and  ssl_key  system variables used on the server side, but  --ssl-cert  and  --ssl-key  identify the client public and private key: Ł --ssl-ca : The path name of the Certificate Authority (CA) certifica
['old', 'port']	 This may not be possible for older versions of MySQL that support only lower protocol versions
['new', 'port']	46 server fail even if the client is from a newer MySQL version that supports higher protocol versions
['port', 'tls_version']	2 connections, set  tls_version  like this (assuming that your server is compiled using OpenSSL because yaSSL does not support TLSv1
['old', 'port']	2 : Ł Connection attempts fail for clients invoked with  --tls-version=TLSv1 , and for older clients that support only TLSv1
['old', 'port']	 Ł Similarly, connection attempts fail for replicas configured with  MASTER_TLS_VERSION = 'TLSv1' , and for older replicas that support only TLSv1
['old', 'port', 'tls_version']	 Ł If the server is configured with  tls_version=TLSv1  or is an older server that supports only TLSv1: Ł Connection attempts fail for clients invoked with  --tls-version=TLSv1
['auto_generate_certs', 'sha256_password_auto_generate_rsa_keys']	 The  auto_generate_certs  and sha256_password_auto_generate_rsa_keys  system variables control automatic generation of these files
['ssl_ca', 'ssl_cert', 'ssl_key']	pem  files to set the corresponding system variables ( ssl_ca ,  ssl_cert ,  ssl_key )
['sha256_password_private_key_path', 'sha256_password_public_key_path']	 If the server autogenerates the RSA files, it uses their names to set the corresponding system variables ( sha256_password_private_key_path ,  sha256_password_public_key_path )
['ssl_cert', 'ssl_key']	pem : Use these to set the  ssl_cert  and  ssl_key  system variables on the server side
['port', 'ssl_ca']	 Ł OpenSSL supports the  ssl_capath  system variable and  --ssl-capath  client option
['new', 'ssl_ca']	 To work around this limitation, concatenate the individual certificate files comprising the certificate tree into a new file and specify that file as the value of the  ssl_ca  system variable and  -- ssl-ca  option
['auto_generate_certs', 'sha256_password_auto_generate_rsa_keys']	Connecting to MySQL Remotely from Windows with SSH Certain OpenSSL-related system and status variables are present only if MySQL was compiled using OpenSSL: Ł auto_generate_certs Ł sha256_password_auto_generate_rsa_keys Ł sha256_password_private_key_
['old', 'port']	1 passwords are deprecated and support for them (including the  mysql_old_password  plugin) was removed in MySQL 5
['old', 'port']	7 that the  plugin  column must be nonempty, coupled with removal of mysql_old_password  support, DBAs are advised to upgrade accounts as follows: Ł Upgrade accounts that use  mysql_native_password  implicitly to use it explicitly Ł Upgrade accounts 
['new', 'old']	 (Otherwise, users cannot connect to the server using their old-format password hashes for the purpose of upgrading to a new-format hash
['port', 'sha256_password_private_key_path', 'sha256_password_public_key_path']	 RSA support has these characteristics: Ł On the server side, two system variables name the RSA private and public key-pair files: sha256_password_private_key_path  and  sha256_password_public_key_path 
['log_output', 'port']	 Example: <STARTUP_OPTIONS>/usr/local/mysql/bin/mysqld   --port=3306 --log_output=FILE</STARTUP_OPTIONS> Ł <STATUS> An unsigned integer representing the command status: 0 for success, nonzero if an error occurred
['log_output', 'port']	 Example:  STARTUP_OPTIONS="--port=3306 --log_output=FILE" Ł STATUS An unsigned integer representing the command status: 0 for success, nonzero if an error occurred
['flush', 'new']	 Connect to the server and flush the log file so the plugin closes it and reopens a new  audit
['new', 'old']	 Permitted values are  OLD  (old-style XML),  NEW  (new-style XML; the default), and (as of MySQL 5
['new', 'port']	 If you configure  mysqld  to use a different TCP  port , you may need to set the context for the new port
['flush', 'new']	 While the server is running, you can also tell it to close the current binary log file and begin a new one manually by issuing a  FLUSH LOGS  SQL statement or with a  mysqladmin flush-logs command
['flush', 'new']	 Let's modify the previous  mysqldump  command a bit so that it flushes the MySQL binary logs at the moment of the full backup, and so that the dump file contains the name of the new current binary log: shell>  mysqldump --single-transaction --flush-
['flush', 'new']	, we can create an incremental backup by flushing the logs to begin a new binary log file
['key_buffer_size', 'sort_buffer_size']	 Note If you want a repair operation to go much faster, you should set the values of the sort_buffer_size  and  key_buffer_size  variables each to about 25% of your available memory when running  myisamchk 
['autocommit', 'new']	 Use the table description file to create new (empty) data and index files: shell>  mysql  db_name mysql>  SET autocommit=1; mysql>  TRUNCATE TABLE  tbl_name ; mysql>  quit 3
['new', 'old']	 Copy the old data file back onto the newly created data file
['new', 'old']	 (Do not just move the old file back onto the new file
['optimizer_switch', 'port']	 Optimizer Hints for Block Nested-Loop and Batched Key Access Algorithms In addition to using the  optimizer_switch  system variable to control optimizer use of the BNL and BKA algorithms session-wide, MySQL supports optimizer hints to influence the 
['max_sort_length', 'sort_buffer_size']	 For example, if tuples store values of long string columns and you increase the value of  max_sort_length , the size of sort buffer tuples increases as well and may require you to increase  sort_buffer_size 
['innodb_stats_method', 'myisam_stats_method']	 For  InnoDB  and  MyISAM  tables, you have some control over collection of table statistics by means of the innodb_stats_method  and  myisam_stats_method  system variables, respectively
['innodb_stats_method', 'myisam_stats_method']	 The  innodb_stats_method  system variable has a global value; the  myisam_stats_method  system variable has both global and session values
['innodb_stats_method', 'myisam_stats_method']	) If this happens, the statistics are collected using whatever value  innodb_stats_method  or  myisam_stats_method  has at the time
['new', 'port']	 This can be helpful for checking your existing tables, or after importing new data
['max_connections', 'table_open_cache']	) The  table_open_cache  and  max_connections  system variables affect the maximum number of files the server keeps open
['max_connections', 'table_open_cache']	 table_open_cache  is related to  max_connections 
['max_heap_table_size', 'tmp_table_size']	 The maximum size for in-memory temporary tables is defined by the  tmp_table_size  or  max_heap_table_size  value, whichever is smaller
['max_heap_table_size', 'tmp_table_size']	 If too many internal temporary tables are created on disk, consider increasing the  tmp_table_size  and  max_heap_table_size  settings
['flush', 'innodb_support_xa']	 Also, set the value of  innodb_support_xa to 0, which reduces the number of disk flushes due to synchronizing on disk data and the binary log
['autocommit', 'port']	 Thus, for a read-intensive application such as a report generator, you can tune a sequence of  InnoDB queries by grouping them inside  START TRANSACTION READ ONLY  and  COMMIT , or by turning on the autocommit  setting before running the  SELECT  st
['innodb_log_file_size', 'innodb_log_files_in_group']	 The size and number of redo log files are configured using the  innodb_log_file_size  and innodb_log_files_in_group  configuration options
['innodb_log_write_ahead_size', 'innodb_page_size']	 If you specify a value for  innodb_log_write_ahead_size  that is larger than the  innodb_page_size value, the  innodb_log_write_ahead_size  setting is truncated to the  innodb_page_size  value
['autocommit', 'flush', 'port']	 Ł When importing data into  InnoDB , turn off autocommit mode, because it performs a log flush to disk for every insert
['autocommit', 'port']	 To disable autocommit during your import operation, surround it with  SET autocommit and  COMMIT  statements: SET autocommit=0; 
['autocommit', 'port']	 COMMIT; The  mysqldump  option  --opt  creates dump files that are fast to import into an  InnoDB  table, even without wrapping them with the  SET autocommit  and  COMMIT  statements
['innodb_buffer_pool_size', 'port']	 This memory area is important enough that it is typically recommended that innodb_buffer_pool_size  is configured to 50 to 75 percent of system memory
['flush', 'innodb_io_capacity']	 Ł Lower I/O capacity if flushing does not fall behind If the system is not falling behind with  InnoDB   flushing  operations, consider lowering the value of the innodb_io_capacity  configuration option
['new', 'port']	 Ł MyISAM  supports concurrent inserts: If a table has no free blocks in the middle of the data file, you can INSERT  new rows into it at the same time that other threads are reading from the table
['key_buffer_size', 'myisam_sort_buffer_size', 'read_buffer_size']	 Suppose that a  myisamchk  table-repair operation is done using the following options to set its memory- allocation variables: --key_buffer_size=128M --myisam_sort_buffer_size=256M --read_buffer_size=64M --write_buffer_size=64M Some of those  myisam
['key_buffer_size', 'myisam_max_sort_file_size']	 Changing a global-only variable ( key_buffer_size ,  myisam_max_sort_file_size ) affects other users as well
['myisam_max_sort_file_size', 'myisam_sort_buffer_size', 'read_buffer_size']	 SET SESSION myisam_sort_buffer_size = 256*1024*1024; SET SESSION read_buffer_size = 64*1024*1024; SET GLOBAL myisam_max_sort_file_size = 100*1024*1024*1024; SET GLOBAL repair_cache
['myisam_sort_buffer_size', 'old']	 For example: SET @old_myisam_sort_buffer_size = @@GLOBAL
['myisam_max_sort_file_size', 'old']	Optimizing for MEMORY Tables SET GLOBAL myisam_max_sort_file_size = 100*1024*1024*1024; REPAIR TABLE tbl_name ; SET GLOBAL myisam_max_sort_file_size = @old_myisam_max_sort_file_size; The system variables that affect  REPAIR TABLE  can be set globally
['key_buffer_size', 'myisam_max_sort_file_size', 'myisam_sort_buffer_size', 'read_buffer_size']	cnf  file: [mysqld] myisam_sort_buffer_size=256M key_buffer_size=1G myisam_max_sort_file_size=100G These settings do not include  read_buffer_size 
['key_buffer_size', 'old']	key_buffer_size = 2G cold_cache
['key_buffer_size', 'key_cache_block_size', 'new', 'old']	key_buffer_size=4*1024*1024; If you assign to either the  key_buffer_size  or  key_cache_block_size  key cache component a value that differs from the component's current value, the server destroys the cache's old structure and creates a new one base
['new', 'query_cache_size']	 row ***************************   Level: Warning    Code: 1282 Message: Query cache failed to set size 39936;          new query cache size is 0 mysql>  SET GLOBAL query_cache_size = 41984; Query OK, 0 rows affected (0
['old', 'query_cache_size']	00 sec) mysql>  SHOW VARIABLES LIKE 'query_cache_size'; +------------------+-------+ | Variable_name    | Value | +------------------+-------+ | query_cache_size | 41984 | +------------------+-------+ For the query cache to actually be able to hold a
['query_cache_size', 'query_cache_type']	The MySQL Query Cache If  query_cache_size  is 0, you should also set  query_cache_type  variable to 0
['flush', 'new']	 Reparsing also occurs after referenced tables or views are flushed from the table definition cache, either implicitly to make room for new entries in the cache, or explicitly due to  FLUSH TABLES 
['new', 'old']	 Client 3: RENAME TABLE x TO x_old, x_new TO x; The statement requests exclusive locks in name order on  x ,  x_new , and  x_old , but blocks waiting for the lock on  x 
['new', 'old']	 The exclusive lock request for  x  by Client 3 has higher priority than the write lock request by Client 2, so Client 3 acquires its lock on  x , then also on  x_new and  x_old , performs the renaming, and releases its locks
['new', 'old']	 The  x  into which the insert occurs is the table that was named  x_new  when Client 2 issued the insert and was renamed to  x  by Client 3: mysql>  SELECT * FROM x; +------+ | i    | +------+ |    1 | +------+ mysql>  SELECT * FROM x_old; Empty set
['new', 'old']	 Client 3: RENAME TABLE x TO old_x, new_x TO x; 1478 
['new', 'old']	Metadata Locking The statement requests exclusive locks in name order on  new_x ,  old_x , and  x , but blocks waiting for the lock on  new_x 
['new', 'old']	 For  new_x , the only pending request is by Client 3, which is permitted to acquire that lock (and also the lock on  old_x )
['new', 'port']	 This new feature is a supported, cross-platform technique
['max_heap_table_size', 'tmp_table_size']	 Ł If an internal in-memory temporary table becomes too large (as determined using the  tmp_table_size and  max_heap_table_size  system variables), MySQL automatically converts the table from in-memory to on-disk format
['net_buffer_length', 'thread_stack']	 The following list indicates these and which system variables control their size: Ł A stack ( thread_stack ) Ł A connection buffer ( net_buffer_length ) Ł A result buffer ( net_buffer_length ) The connection buffer and result buffer each begin with 
['old', 'slave_preserve_commit_order']	 Ł     Waiting for its turn to commit A state that occurs when the replica thread is waiting for older worker threads to commit if slave_preserve_commit_order  is enabled
['new', 'old']	 If you have databases or tables from an older version of MySQL that contain special characters and for which the underlying directory names or file names have not been updated to use the new encoding, the server displays their names with a prefix of
['lower_case_table_names', 'new', 'old']	 If you plan to set the  lower_case_table_names  system variable to 1 on Unix, you must first convert your old database and table names to lowercase before stopping  mysqld  and restarting it with the new variable setting
['character_set_server', 'collation_server']	 The current server character set and collation can be determined from the values of the character_set_server  and  collation_server  system variables
['character_set_server', 'collation_server']	 If there is no default database, the variables have the same value as the corresponding server-level system variables,  character_set_server  and collation_server 
['character_set_server', 'collation_server']	 Some of these have been mentioned in earlier sections: Ł The  character_set_server  and  collation_server  system variables indicate the server character set and collation
['innodb_file_format', 'innodb_file_per_table']	 Creating such tables also requires the option values  innodb_file_format=barracuda and  innodb_file_per_table=true 
['new', 'old']	 The older server sees  utf8  in the dump file object definitions and creates new objects that use the (3-byte)  utf8  character set
['old', 'port']	 Case folding defined by Unicode is also supported (based on  CaseFolding-6
['new', 'port']	3 Multi-Byte Character Support for Complex Character Sets If you want to add support for a new character set named  MYSET  that includes multibyte characters, you must use multibyte character functions in the  ctype- MYSET 
['lc_time_names', 'port']	16 MySQL Server Locale Support The locale indicated by the  lc_time_names  system variable controls the language used to display day and month names and abbreviations
['new', 'port']	5,  YEAR(2)  column definitions for new tables produce an ER_INVALID_YEAR_COLUMN_LENGTH  error: mysql>  CREATE TABLE t1 (y YEAR(2)); ERROR 1818 (HY000): Supports only YEAR or YEAR(4) column
['max_allowed_packet', 'port']	 It is important to keep in mind that the size of any JSON document stored in a  JSON  column is limited to the value of the max_allowed_packet  system variable
['ft_min_word_len', 'innodb_ft_min_token_size']	 You can control the cutoff by setting a configuration option before creating the index:  innodb_ft_min_token_size configuration option for  InnoDB  search indexes, or  ft_min_word_len  for  MyISAM 
['ft_stopword_file', 'innodb_ft_enable_stopword']	 Stopword processing is controlled by the configuration options  innodb_ft_enable_stopword ,  innodb_ft_server_stopword_table , and  innodb_ft_user_stopword_table  for  InnoDB  search indexes, and  ft_stopword_file  for MyISAM  ones
['innodb_ft_max_token_size', 'innodb_ft_min_token_size']	  innodb_ft_min_token_size  and innodb_ft_max_token_size  are used for  InnoDB  search indexes
['ft_max_word_len', 'ft_min_word_len']	  ft_min_word_len  and ft_max_word_len  are used for  MyISAM  search indexes
['ft_stopword_file', 'innodb_ft_enable_stopword']	 Ł The stopword list applies, controlled by  innodb_ft_enable_stopword , innodb_ft_server_stopword_table , and  innodb_ft_user_stopword_table  for  InnoDB search indexes, and  ft_stopword_file  for  MyISAM  ones
['ft_min_word_len', 'innodb_ft_min_token_size']	 Whether a word is too short is determined from the  innodb_ft_min_token_size setting for  InnoDB  tables, or  ft_min_word_len  for  MyISAM  tables
['character_set_server', 'collation_server']	4 Full-Text Stopwords The stopword list is loaded and searched for full-text queries using the server character set and collation (the values of the  character_set_server  and  collation_server  system variables)
['character_set_server', 'collation_server']	 False hits or misses might occur for stopword lookups if the stopword file or columns used for full-text indexing or searches have a character set or collation different from  character_set_server  or collation_server 
['innodb_ft_max_token_size', 'innodb_ft_min_token_size']	 Maximum and minimum word length values are configurable using the  innodb_ft_max_token_size  and innodb_ft_min_token_size  variables
['ft_min_word_len', 'innodb_ft_min_token_size']	 For example, to make two-character words searchable, you could put the following lines in an option file: [mysqld] innodb_ft_min_token_size=2 ft_min_word_len=2 Then restart the server and rebuild your  FULLTEXT  indexes
['innodb_ft_max_token_size', 'innodb_ft_min_token_size']	 Rebuilding InnoDB Full-Text Indexes For the changes to take effect,  FULLTEXT  indexes must be rebuilt after modifying any of the following full-text index variables:  innodb_ft_min_token_size ;  innodb_ft_max_token_size ; innodb_ft_server_stopword_
['innodb_ft_max_token_size', 'innodb_ft_min_token_size', 'ngram_token_size']	 Modifying  innodb_ft_min_token_size , innodb_ft_max_token_size , or  ngram_token_size  requires restarting the server
['ft_max_word_len', 'ft_min_word_len', 'ft_stopword_file']	 Rebuilding MyISAM Full-Text Indexes If you modify full-text variables that affect indexing ( ft_min_word_len ,  ft_max_word_len , or ft_stopword_file ), or if you change the stopword file itself, you must rebuild your  FULLTEXT  indexes after making
['ft_max_word_len', 'ft_min_word_len', 'ft_stopword_file']	 To avoid the problem if you have modified the minimum or maximum word length or stopword file values used by the server, specify the same  ft_min_word_len ,  ft_max_word_len , and ft_stopword_file  values for  myisamchk  that you use for  mysqld 
['ft_max_word_len', 'ft_min_word_len', 'innodb_ft_max_token_size', 'innodb_ft_min_token_size']	 Full-text-related configuration options, except for minimum and maximum word length options ( innodb_ft_min_token_size , innodb_ft_max_token_size ,  ft_min_word_len ,  ft_max_word_len ) are also applicable
['new', 'port']	00 sec) Ł UpdateXML( xml_target ,  xpath_expr ,  new_xml ) This function replaces a single portion of a given fragment of XML markup  xml_target  with a new XML fragment  new_xml , and then returns the changed XML
['new', 'old']	 For  REPLACE  statements, the affected-rows value is 2 if the new row replaced an old row, because in this case, one row was inserted after the duplicate was deleted
['slave_checkpoint_group', 'slave_checkpoint_period']	 On a multithreaded replica, the function waits until expiry of the limit set by the slave_checkpoint_group  or  slave_checkpoint_period  system variable, when the checkpoint operation is called to update the status of the replica
['old', 'server_id']	 The value of  UUID_SHORT()  is guaranteed to be unique if the following conditions hold: Ł The  server_id  value of the current server is between 0 and 255 and is unique among your set of source and replica servers Ł You do not set back the system t
['new', 'old']	myevent; To execute the previous statement, the user executing it must have the  EVENT  privilege on both the  olddb and  newdb  databases
['new', 'old']	)          reference_definition   | ADD CHECK ( expr )   | ALGORITHM [=] {DEFAULT | INPLACE | COPY}   | ALTER [COLUMN]  col_name  {SET DEFAULT  literal  | DROP DEFAULT}   | CHANGE [COLUMN]  old_col_name   new_col_name   column_definition         [FIR
['new', 'old']	   | RENAME {INDEX | KEY}  old_index_name  TO  new_index_name   | RENAME [TO | AS]  new_tbl_name   | {WITHOUT | WITH} VALIDATION } partition_options :      partition_option  [ partition_option ] 
['new', 'old']	 Renaming a table requires  ALTER  and  DROP  on the old table,  ALTER ,  CREATE , and  INSERT  on the new table
['new', 'old']	 To alter a column to change both its name and definition, use  CHANGE , specifying the old and new names and the new definition
['new', 'old']	 DROP DEFAULT  specify a new default value for a column or remove the old default value, respectively
['new', 'old']	 RENAME INDEX  old_index_name  TO  new_index_name  renames an index
['innodb_page_size', 'port']	 KEY_BLOCK_SIZE  is not supported with 32KB and 64KB  innodb_page_size  values
['innodb_file_per_table', 'port']	 TABLESPACE=innodb_file_per_table  but is otherwise not supported for use in combination with the  TABLESPACE  option
['innodb_file_per_table', 'port']	 Note Support for  TABLESPACE = innodb_file_per_table  and  TABLESPACE = innodb_temporary  clauses with  CREATE TEMPORARY TABLE  is deprecated as of MySQL 5
['old', 'port']	 It can hold multiple tables, and supports all table row formats
['innodb_file_format_max', 'innodb_file_per_table']	 Ł innodb_file_per_table ,  innodb_file_format , and  innodb_file_format_max  settings have no influence on  CREATE TABLESPACE  operations
['innodb_force_recovery', 'port']	 DROP TABLE  is not supported with all  innodb_force_recovery  settings
['new', 'old']	 For example, to rename a table named  old_table  to  new_table , use this statement: RENAME TABLE old_table TO new_table; That statement is equivalent to the following  ALTER TABLE  statement: ALTER TABLE old_table RENAME new_table; RENAME TABLE , u
['new', 'old']	TRUNCATE TABLE Statement RENAME TABLE old_table TO tmp_table,              new_table TO old_table,              tmp_table TO new_table; Metadata locks on tables are acquired in name order, which in some cases can make a difference in operation outcom
['new', 'old']	  REPLACE  is the counterpart to  INSERT IGNORE  in the treatment of new rows that contain unique key values that duplicate old rows: The new rows replace the old rows rather than being discarded
['new', 'port']	 You can verify that the dump is valid by creating a copy of the  person  table and importing the dump file into the new table, like this: mysql>  USE test; mysql>  CREATE TABLE person2 LIKE person; Query OK, 0 rows affected (0
['new', 'old']	 REPLACE  works exactly like  INSERT , except that if an old row in the table has the same value as a new row for a  PRIMARY KEY  or a  UNIQUE  index, the old row is deleted before the new row is inserted
['new', 'old']	 If the count is greater than 1, one or more old rows were deleted before the new row was inserted
['new', 'old']	 It is possible for a single row to replace more than one old row if the table contains multiple unique indexes and the new row duplicates values for different old rows in different unique indexes
['new', 'old']	 (If you attempt to do so, the statement is rejected with the error  Can't update table ' old_table ' while ' new_table ' is being created 
['old', 'port']	column1; Ł Some subqueries can be transformed to joins for compatibility with older versions of MySQL that do not support subqueries
['autocommit', 'port']	3 Transactional and Locking Statements MySQL supports local transactions (within a given client session) through statements such as  SET autocommit ,  START TRANSACTION ,  COMMIT , and  ROLLBACK 
['autocommit', 'new']	 To disable autocommit mode for each new connection, see the description of the  autocommit  system variable at  Section 5
['new', 'old']	 If the current transaction has a savepoint with the same name, the old savepoint is deleted and a new one is set
['new', 'old']	 Ł If a session issues a  LOCK TABLES  statement to acquire a lock while already holding locks, its existing locks are released implicitly before the new locks are granted
['autocommit', 'new']	 In addition, if the client had an active transaction, the server rolls back the transaction upon disconnect, and if reconnect occurs, the new session begins with autocommit enabled
['autocommit', 'old']	  InnoDB  does not acquire the internal table lock at all if  autocommit = 1 , to help old applications avoid unnecessary deadlocks
['transaction_isolation', 'transaction_read_only']	 They can also be set directly using the  SET  statement to assign values to the  transaction_isolation  and  transaction_read_only system variables: Ł SET TRANSACTION  permits optional  GLOBAL  and  SESSION  keywords for setting transaction characte
['transaction_isolation', 'transaction_read_only']	 Ł The  SET  statement for assigning values to the  transaction_isolation  and transaction_read_only  system variables has syntaxes for setting these variables at different scope levels
['transaction_isolation', 'transaction_read_only']	20, use  tx_isolation  and  tx_read_only  rather than  transaction_isolation and  transaction_read_only 
['master_info_repository', 'relay_log_info_repository']	 Also, with the settings  master_info_repository=TABLE  and relay_log_info_repository=TABLE  on a replica, which became the defaults in MySQL 8
['old', 'port']	 In prepared  CALL  statements used with  PREPARE  and  EXECUTE , placeholder support for  OUT  and  INOUT parameters is available beginning with MySQL 5
['max_heap_table_size', 'tmp_table_size']	 Initially, this is a MEMORY  table, but is converted to a  MyISAM  table when its size exceeds the minimum value of the max_heap_table_size  and  tmp_table_size  system variables
['new', 'old']	 Ł IDENTIFIED WITH  auth_plugin Sets the account authentication plugin to  auth_plugin , clears the credentials to the empty string (the credentials are associated with the old authentication plugin, not the new one), and stores the result in the acc
['lower_case_table_names', 'old']	Account Management Statements If the grant tables hold privilege rows that contain mixed-case database or table names and the lower_case_table_names  system variable is set to a nonzero value,  REVOKE  cannot be used to revoke these privileges
['new', 'old']	5 RENAME USER Statement RENAME USER  old_user  TO  new_user     [,  old_user  TO  new_user ] 
['new', 'old']	 An error occurs for old accounts that do not exist or new accounts that already exist
['new', 'old']	 RENAME USER  causes the privileges held by the old user to be those held by the new user
['lower_case_table_names', 'old']	 If the grant tables hold privilege rows that contain mixed-case database or table names and the lower_case_table_names  system variable is set to a nonzero value,  REVOKE  cannot be used to revoke these privileges
['innodb_stats_persistent', 'port']	 When  innodb_stats_persistent  is enabled, it is important to run  ANALYZE TABLE  after major changes to index column data, as statistics are not recalculated periodically (such as after a server restart)
['innodb_stats_persistent', 'innodb_stats_transient_sample_pages']	 If  innodb_stats_persistent  is disabled, modify  innodb_stats_transient_sample_pages  instead
['old', 'port']	7, a table is reported as needing a rebuild if it contains old temporal columns in pre-5
['avoid_temporal_upgrade', 'old']	 If avoid_temporal_upgrade  is enabled,  FOR UPGRADE  ignores the old temporal columns present in the table; consequently, the upgrade procedure does not upgrade them
['new', 'old']	Table Maintenance Statements OPTIMIZE TABLE  table catches and throws any errors that occur while copying table statistics from the old file to the newly created file
['new', 'old']	) REPAIR TABLE  table catches and throws any errors that occur while copying table statistics from the old corrupted file to the newly created file
['avoid_temporal_upgrade', 'port']	4 format ( TIME , DATETIME , and  TIMESTAMP  columns without support for fractional seconds precision) and the avoid_temporal_upgrade  system variable is disabled
['avoid_temporal_upgrade', 'old']	 If  avoid_temporal_upgrade  is enabled, REPAIR TABLE  ignores the old temporal columns present in the table and does not upgrade them
['max_connections', 'sort_buffer_size']	sort_buffer_size = 1000000; SET GLOBAL max_connections = 1000, sort_buffer_size = 1000000; The  @@GLOBAL
['port', 'sql_mode']	 MySQL lets you use different  sql_mode  settings to tell the server the type of SQL syntax to support
['performance_schema_events_waits_history_size', 'performance_schema_max_thread_instances']	count  corresponds to performance_schema_events_waits_history_size  (the number of rows per thread) multiplied by performance_schema_max_thread_instances  ( the number of threads)
['old', 'port']	 This value can be set using the  MASTER_RETRY_COUNT  option of the  CHANGE MASTER TO  statement (preferred) or the older  --master-retry-count  server option (still supported for backward compatibility)
['new', 'relay_log_purge']	 When  relay_log_purge = 1 , the newest relay log is always kept, and the set is not cleared
['big_tables', 'binlog_cache_size', 'binlog_direct_non_transactional_updates', 'binlog_format']	5   | | big_tables                              | OFF                       | | binlog_cache_size                       | 32768                     | | binlog_direct_non_transactional_updates | OFF                       | | binlog_format             
['max_allowed_packet', 'max_binlog_cache_size', 'max_binlog_size', 'max_binlog_stmt_cache_size']	 | max_allowed_packet                      | 4194304                   | | max_binlog_cache_size                   | 18446744073709547520      | | max_binlog_size                         | 1073741824                | | max_binlog_stmt_cache_size     
['thread_handling', 'thread_stack']	SHOW Statements | thread_handling                         | one-thread-per-connection | | thread_stack                            | 262144                    | | time_format                             | %H:%i:%s                  | | time_zone       
['max_error_count', 'sql_mode']	00 sec) mysql>  SET max_error_count=1, sql_mode = ''; Query OK, 0 rows affected (0
['master_info_repository', 'relay_log_info_repository']	 This operation has no effect on tables used for the binary and relay logs (as controlled by the master_info_repository  and  relay_log_info_repository  system variables)
['old', 'port']	3 InnoDB Multi-Versioning InnoDB  is a  multi-versioned storage engine : it keeps information about old versions of changed rows, to support transactional features such as concurrency and  rollback 
['innodb_max_purge_lag', 'new']	 In such a case, throttle new row operations, and allocate more resources to the purge thread by tuning the  innodb_max_purge_lag  system variable
['new', 'old']	 When a secondary index column is updated, old secondary index records are delete-marked, new records are inserted, and delete-marked records are eventually purged
['new', 'old']	 This midpoint insertion strategy treats the list as two sublists: Ł At the head, a sublist of new ( ﬁyoungﬂ ) pages that were accessed recently Ł At the tail, a sublist of old pages that were accessed less recently Figure 14
['new', 'old']	 Ł The midpoint of the list is the boundary where the tail of the new sublist meets the head of the old sublist
['new', 'old']	 Ł Accessing a page in the old sublist makes it  ﬁyoungﬂ , moving it to the head of the new sublist
['new', 'old']	 Pages in both the new and old sublists age as other pages are made new
['new', 'old']	 A table scan, performed for a  mysqldump  operation or a  SELECT  statement with no WHERE  clause, for example, can bring a large amount of data into the buffer pool and evict an equivalent amount of older data, even if the new data is never used ag
['new', 'old']	 Page hits in the old sublist cause pages to move to the new sublist, but page hits in the new sublist cause pages to move to the head of the list only if they are a certain distance from the head
['innodb_old_blocks_time', 'new']	 Ł not (young-making rate)  is the average hit rate at which page accesses have not resulted in making pages young due to the delay defined by  innodb_old_blocks_time  not being met, or due to page hits in the new sublist that did not result in pages
['innodb_change_buffer_max_size', 'new']	 Consider increasing  innodb_change_buffer_max_size  on a MySQL server with heavy insert, update, and delete activity, where change buffer merging does not keep pace with new change buffer entries, causing the change buffer to reach its maximum size 
['innodb_change_buffer_max_size', 'port']	 Consider decreasing  innodb_change_buffer_max_size  on a MySQL server with static data used for reporting, or if the change buffer consumes too much of the memory space shared with the buffer pool, causing pages to age out of the buffer pool sooner 
['innodb_file_format', 'innodb_file_per_table']	 SET GLOBAL innodb_file_per_table=1; SET GLOBAL innodb_file_format=barracuda; CREATE TABLE t3 (a INT, b CHAR (20), PRIMARY KEY (a)) ROW_FORMAT=DYNAMIC; CREATE TABLE t4 (a INT, b CHAR (20), PRIMARY KEY (a)) ROW_FORMAT=COMPRESSED; Alternatively, you ca
['innodb_file_per_table', 'port']	 mysql>  CREATE TABLE t2 (c1 INT PRIMARY KEY) TABLESPACE = innodb_file_per_table         DATA DIRECTORY = '/external/directory'; This method is supported only for tables created in file-per-table tablespaces, but does not require the innodb_file_per_
['flush', 'port']	 FOR EXPORT  is not supported on tables with a  FULLTEXT  index, as full-text search auxiliary tables cannot be flushed
['flush', 'port']	 FOR EXPORT  is run on the source instance: Ł The table being flushed for export is locked in shared mode
['lower_case_table_names', 'old', 'port']	ini  file before creating any databases or tables: [mysqld] lower_case_table_names=1 Techniques for moving or copying  InnoDB  tables include: Ł Importing Tables Ł MySQL Enterprise Backup Ł Copying Data Files (Cold Backup Method) Ł Restoring from a L
['autocommit', 'port']	 To improve the performance of this method, disable  autocommit  when importing data
['autocommit', 'port']	 Handling Too-Long Or Too-Short Transactions Because  MyISAM  tables do not support  transactions , you might not have paid much attention to the autocommit  configuration option and the  COMMIT  and  ROLLBACK  statements
['autocommit', 'port']	 Ł The time when  autocommit=1  is suitable for  InnoDB  tables is when running a sequence of queries for generating reports or analyzing statistics
['innodb_file_format', 'innodb_file_per_table', 'innodb_page_size', 'old']	 When you convert  MyISAM  tables that are large, frequently accessed, and hold vital data, investigate and consider the  innodb_file_per_table ,  innodb_file_format , and  innodb_page_size configuration options, and the  ROW_FORMAT  and  KEY_BLOCK_S
['innodb_file_per_table', 'port']	 During your initial experiments, the most important setting is  innodb_file_per_table 
['new', 'old']	 Cloning the Structure of a Table You might make an  InnoDB  table that is a clone of a MyISAM table, rather than using  ALTER TABLE  to perform conversion, to test the old and new table side-by-side before switching
['new', 'old']	 For better control over the insertion process, you can insert big tables in pieces: INSERT INTO newtable SELECT * FROM oldtable    WHERE yourkey >  something  AND yourkey <=  somethingelse ; After all records are inserted, you can rename the tables
['innodb_file_per_table', 'new']	 When the  innodb_file_per_table  configuration option is enabled (the default), newly created  InnoDB  tables are implicitly created in file-per-table tablespaces
['new', 'old']	 Whether you convert the  MyISAM  table directly or create a cloned  InnoDB  table, make sure that you have sufficient disk space to hold both the old and new tables during the process
['innodb_autoinc_lock_mode', 'new']	 The following terms are used in describing  innodb_autoinc_lock_mode  settings: Ł ﬁ INSERT -likeﬂ  statements All statements that generate new rows in a table, including  INSERT ,  INSERT 
['innodb_autoinc_lock_mode', 'new']	 With  innodb_autoinc_lock_mode  set to 1 ( ﬁconsecutiveﬂ ), the four new rows are also: mysql>  SELECT c1, c2 FROM t1 ORDER BY c2; +-----+------+ | c1  | c2   | +-----+------+ |   1 | a    | | 101 | b    | |   5 | c    | | 102 | d    | +-----+------
['innodb_autoinc_lock_mode', 'new']	 With  innodb_autoinc_lock_mode  set to mode 2 ( ﬁinterleavedﬂ ), the four new rows are: mysql>  SELECT c1, c2 FROM t1 ORDER BY c2; +-----+------+ | c1  | c2   | +-----+------+ |   1 | a    | |    x  | b    | |   5 | c    | 2414 
['flush', 'old']	 Normally, the page cleaner thread flushes dirty pages when the number of clean pages falls below a set threshold
['flush', 'port']	 Most importantly, it stores the FTS_SYNCED_DOC_ID , which identifies documents that have been parsed and flushed to disk
['flush', 'old']	 This in-memory cache structure holds insertions until the cache is full and then batch flushes them to disk (to the auxiliary index tables)
['flush', 'innodb_ft_cache_size']	 The  innodb_ft_cache_size  variable is used to configure the full-text index cache size (on a per-table basis), which affects how often the full-text index cache is flushed
['innodb_data_file_path', 'new']	 Append a new data file to the  innodb_data_file_path  setting, optionally specifying the autoextend  attribute
['innodb_data_file_path', 'new']	 This is the  innodb_data_file_path  setting after modifying the size attribute to reflect the current data file size, and after specifying a new 50MB auto- extending data file: innodb_data_home_dir = innodb_data_file_path = /ibdata/ibdata1:988M;/dis
['innodb_data_file_path', 'new']	 When you create a new data file, specify the keyword  newraw  immediately after the data file size for the  innodb_data_file_path  option
['innodb_data_file_path', 'new']	Tablespaces innodb_data_file_path=/dev/hdd1:3Gnewraw;/dev/hdd2:2Gnewraw 2
['innodb_data_file_path', 'new']	 After  InnoDB  has initialized the new partition, stop the server, change  newraw  in the data file specification to  raw : [mysqld] innodb_data_home_dir= innodb_data_file_path=/dev/hdd1:3Graw;/dev/hdd2:2Graw 4
['innodb_data_file_path', 'new']	 When you create a new data file, specify the keyword  newraw  immediately after the data file size for the  innodb_data_file_path  option: [mysqld] innodb_data_home_dir= innodb_data_file_path=//
['innodb_data_file_path', 'new']	 After  InnoDB  has initialized the new partition, stop the server, change  newraw  in the data file specification to  raw : [mysqld] innodb_data_home_dir= innodb_data_file_path=//
['innodb_file_format', 'innodb_file_per_table', 'port']	 With support for both file formats, general tablespaces have no dependence on  innodb_file_format  or  innodb_file_per_table  settings, nor do these variables have any effect on general tablespaces
['innodb_page_size', 'port']	3 Permitted Page Size, FILE_BLOCK_SIZE, and KEY_BLOCK_SIZE Combinations for Compressed Tables InnoDB Page Size (innodb_page_size) Permitted FILE_BLOCK_SIZE Value Permitted KEY_BLOCK_SIZE Value 64KB 64K (65536) Compression is not supported 32KB 32K (3
['innodb_file_per_table', 'port']	 TABLESPACE=innodb_file_per_table  but is otherwise not supported for use in combination with the TABLESPACE  option
['innodb_max_undo_log_size', 'innodb_undo_log_truncate']	 For example: mysql>  SET GLOBAL innodb_undo_log_truncate=ON; When the  innodb_undo_log_truncate  variable is enabled, undo tablespaces that exceed the size limit defined by the  innodb_max_undo_log_size  variable are subject to truncation
['innodb_max_undo_log_size', 'innodb_undo_log_truncate']	 mysql>  SELECT @@innodb_max_undo_log_size; +----------------------------+ | @@innodb_max_undo_log_size | +----------------------------+ |                 1073741824 | +----------------------------+ When the  innodb_undo_log_truncate  variable is ena
['flush', 'new']	 The second checkpoint flushes the initial pages of the new undo tablespace to disk
['default_tmp_storage_engine', 'internal_tmp_disk_storage_engine']	 Alternatively, configure the  default_tmp_storage_engine  and internal_tmp_disk_storage_engine  options, which define the storage engine to use for user- created and on-disk internal temporary tables, respectively
['innodb_log_file_size', 'new', 'old']	 If  InnoDB  detects that the  innodb_log_file_size  differs from the redo log file size, it writes a log checkpoint, closes and removes the old log files, creates new log files at the requested size, and opens the new log files
['innodb_page_size', 'innodb_rollback_segments', 'port']	 Ł If each transaction performs either an  INSERT   or  an  UPDATE  or  DELETE  operation, the number of concurrent read-write transactions that  InnoDB  is capable of supporting is: ( innodb_page_size  / 16) * ( innodb_rollback_segments  - 32) Ł If 
['autocommit', 'new']	 By default, MySQL starts the session for each new connection with  autocommit  enabled, so MySQL does a commit after each SQL statement if that statement did not return an error
['autocommit', 'innodb_table_locks']	  InnoDB  is aware of table locks if  innodb_table_locks = 1  (the default) and  autocommit = 0 , and the MySQL layer above  InnoDB  knows about row-level locks
['innodb_table_locks', 'old']	2 did not acquire  InnoDB  table locks; the old behavior can be selected by setting innodb_table_locks=0 
['innodb_deadlock_detect', 'innodb_lock_wait_timeout']	 If deadlock detection is disabled using the innodb_deadlock_detect  configuration option,  InnoDB  relies on the  innodb_lock_wait_timeout setting to roll back transactions in case of a deadlock
['autocommit', 'innodb_table_locks']	Deadlocks in InnoDB InnoDB  is aware of table locks if  innodb_table_locks = 1  (the default) and  autocommit = 0 , and the MySQL layer above it knows about row-level locks
['flush', 'innodb_doublewrite']	 Ł With regard to  InnoDB  recovery capabilities that protect user data,  InnoDB  uses a file flush technique involving a structure called the  doublewrite buffer , which is enabled by default ( innodb_doublewrite=ON )
['flush', 'port']	 Ł Running MySQL server on a 4K sector hard drive on Windows is not supported with innodb_flush_method=async_unbuffered , which is the default setting
['innodb_log_file_size', 'innodb_log_files_in_group']	 The combined size of log files ( innodb_log_file_size  *  innodb_log_files_in_group ) cannot exceed a maximum value that is slightly less than 512GB
['innodb_rollback_segments', 'innodb_undo_tablespaces']	 This option is typically used in conjunction with the innodb_rollback_segments  and  innodb_undo_tablespaces  options, which determine the disk layout of the undo logs outside the system tablespace
['innodb_buffer_pool_size', 'old']	 Buffers specific to  InnoDB  are configured using the following parameters: Ł innodb_buffer_pool_size  defines size of the buffer pool, which is the memory area that holds cached data for  InnoDB  tables, indexes, and other auxiliary buffers
['innodb_buffer_pool_size', 'port']	 The size of the buffer pool is important for system performance, and it is typically recommended that  innodb_buffer_pool_size is configured to 50 to 75 percent of system memory
['binlog_cache_size', 'innodb_buffer_pool_size', 'key_buffer_size', 'max_connections', 'read_buffer_size', 'sort_buffer_size']	 innodb_buffer_pool_size + key_buffer_size + max_connections*(sort_buffer_size+read_buffer_size+binlog_cache_size) + max_connections*2MB Each thread uses a stack (often 2MB, but only 256KB in MySQL binaries provided by Oracle Corporation
['read_buffer_size', 'sort_buffer_size']	) and in the worst case also uses  sort_buffer_size + read_buffer_size  additional memory
['innodb_buffer_pool_chunk_size', 'innodb_buffer_pool_instances']	 Buffer pool size must always be equal to or a multiple of  innodb_buffer_pool_chunk_size *  innodb_buffer_pool_instances 
['innodb_buffer_pool_chunk_size', 'innodb_buffer_pool_instances', 'innodb_buffer_pool_size']	 If you configure  innodb_buffer_pool_size to a value that is not equal to or a multiple of  innodb_buffer_pool_chunk_size  * innodb_buffer_pool_instances , buffer pool size is automatically adjusted to a value that is equal to or a multiple of  inno
['innodb_buffer_pool_instances', 'innodb_buffer_pool_size']	 In the following example,  innodb_buffer_pool_size  is set to  8G , and innodb_buffer_pool_instances  is set to  16 
['innodb_buffer_pool_chunk_size', 'innodb_buffer_pool_instances', 'innodb_buffer_pool_size']	 8G  is a valid  innodb_buffer_pool_size  value because  8G  is a multiple of innodb_buffer_pool_instances=16  *  innodb_buffer_pool_chunk_size=128M , which is  2G 
['innodb_buffer_pool_instances', 'innodb_buffer_pool_size']	000000000000 | +------------------------------------------+ In this example,  innodb_buffer_pool_size  is set to  9G , and  innodb_buffer_pool_instances is set to  16 
['innodb_buffer_pool_chunk_size', 'innodb_buffer_pool_instances', 'innodb_buffer_pool_size']	 In this case,  9G  is not a multiple of  innodb_buffer_pool_instances=16  * innodb_buffer_pool_chunk_size=128M , so  innodb_buffer_pool_size  is adjusted to  10G , which is a multiple of  innodb_buffer_pool_chunk_size  *  innodb_buffer_pool_instance
['innodb_buffer_pool_chunk_size', 'innodb_buffer_pool_instances', 'new']	InnoDB Buffer Pool Configuration [mysqld] innodb_buffer_pool_chunk_size=134217728 The following conditions apply when altering  innodb_buffer_pool_chunk_size : Ł If the new   innodb_buffer_pool_chunk_size  value *  innodb_buffer_pool_instances is lar
['innodb_buffer_pool_chunk_size', 'innodb_buffer_pool_instances', 'innodb_buffer_pool_size']	 If you alter  innodb_buffer_pool_chunk_size , innodb_buffer_pool_size  is automatically adjusted to a value that is equal to or a multiple of innodb_buffer_pool_chunk_size  *  innodb_buffer_pool_instances 
['innodb_buffer_pool_chunk_size', 'innodb_buffer_pool_size']	 Before you change innodb_buffer_pool_chunk_size , calculate the effect on  innodb_buffer_pool_size  to ensure that the resulting buffer pool size is acceptable
['innodb_buffer_pool_chunk_size', 'innodb_buffer_pool_size']	 Note To avoid potential performance issues, the number of chunks ( innodb_buffer_pool_size  /  innodb_buffer_pool_chunk_size ) should not exceed 1000
['innodb_buffer_pool_chunk_size', 'innodb_buffer_pool_instances', 'innodb_buffer_pool_size']	 For example: mysql>  SET GLOBAL innodb_buffer_pool_size=402653184; Note The buffer pool size must be equal to or a multiple of innodb_buffer_pool_chunk_size  *  innodb_buffer_pool_instances 
['innodb_buffer_pool_chunk_size', 'new']	 When increasing the size of the buffer pool, the resizing operation: Ł Adds pages in  chunks  (chunk size is defined by  innodb_buffer_pool_chunk_size ) Ł Coverts hash tables, lists, and pointers to use new addresses in memory Ł Adds new pages to th
['innodb_buffer_pool_instances', 'innodb_buffer_pool_size']	InnoDB Buffer Pool Configuration pool instances are configured using the  innodb_buffer_pool_instances  configuration option, and you might also adjust the  innodb_buffer_pool_size  value
['innodb_buffer_pool_instances', 'innodb_buffer_pool_size']	 For best efficiency, specify a combination of  innodb_buffer_pool_instances  and innodb_buffer_pool_size  so that each buffer pool instance is at least 1GB
['innodb_old_blocks_pct', 'innodb_old_blocks_time']	 Both  innodb_old_blocks_pct  and  innodb_old_blocks_time  can be specified in the MySQL option file ( my
['innodb_old_blocks_time', 'port']	 In mixed workloads where most of the activity is OLTP type with periodic batch reporting queries which result in large scans, setting the value of  innodb_old_blocks_time  during the batch runs can help keep the working set of the normal workload in
['innodb_old_blocks_pct', 'port']	 When scanning large tables that cannot fit entirely in the buffer pool, setting  innodb_old_blocks_pct  to a small value keeps the data that is only read once from consuming a significant portion of the buffer pool
['innodb_old_blocks_pct', 'innodb_old_blocks_time']	 The effect of the  innodb_old_blocks_time  parameter is harder to predict than the innodb_old_blocks_pct  parameter, is relatively small, and varies more with the workload
['innodb_buffer_pool_instances', 'innodb_page_cleaners']	 However, if the number of page cleaner threads exceeds the number of buffer pool instances,  innodb_page_cleaners  is automatically set to the same value as innodb_buffer_pool_instances 
['flush', 'innodb_max_dirty_pages_pct_lwm']	 Buffer pool flushing is initiated when the percentage of dirty pages reaches the low water mark value defined by the  innodb_max_dirty_pages_pct_lwm  variable
['innodb_max_dirty_pages_pct_lwm', 'old']	 The purpose of the  innodb_max_dirty_pages_pct_lwm  threshold is to control the percentage dirty pages in the buffer pool, and to prevent the amount of dirty pages from reaching the threshold defined by the  innodb_max_dirty_pages_pct  variable, whi
['flush', 'innodb_max_dirty_pages_pct', 'old']	  InnoDB aggressively flushes buffer pool pages if the percentage of dirty pages in the buffer pool reaches the innodb_max_dirty_pages_pct  threshold
['flush', 'innodb_lru_scan_depth']	 Ł The  innodb_lru_scan_depth  variable specifies, per buffer pool instance, how far down the buffer pool LRU list the page cleaner thread scans looking for dirty pages to flush
['innodb_buffer_pool_instances', 'innodb_lru_scan_depth']	 Also, consider adjusting  innodb_lru_scan_depth when changing the number of buffer pool instances, since  innodb_lru_scan_depth  * innodb_buffer_pool_instances  defines the amount of work performed by the page cleaner thread each second
['innodb_flush_neighbors', 'innodb_lru_scan_depth']	 The  innodb_flush_neighbors  and  innodb_lru_scan_depth  variables are primarily intended for write-intensive workloads
['flush', 'port']	 Before doing so, all dirty pages with redo entries in that portion of the log file must be flushed
['innodb_max_dirty_pages_pct', 'old']	 This scenario can occur even if  innodb_max_dirty_pages_pct  threshold is not reached
['innodb_adaptive_flushing', 'old']	 When that threshold is crossed, adaptive flushing is enabled, even if the  innodb_adaptive_flushing  variable is disabled
['flush', 'innodb_max_dirty_pages_pct', 'old', 'port']	 When setting a high value it is important to ensure that redo log utilization does not reach 75% (the hardcoded limit at which asynchronous flushing starts), and that the  innodb_max_dirty_pages_pct  threshold keeps the number of dirty pages to a le
['innodb_flushing_avg_loops', 'innodb_log_file_size']	 Systems with consistent workloads, a large log file size ( innodb_log_file_size ), and small spikes that do not reach 75% log space utilization should use a high  innodb_flushing_avg_loops  value to keep flushing as smooth as possible
['flush', 'innodb_io_capacity']	 Be aware that if flushing falls behind, the rate of buffer pool flushing can exceed the I/O capacity available to  InnoDB , as defined by  innodb_io_capacity  setting
['innodb_buffer_pool_dump_at_shutdown', 'innodb_buffer_pool_load_at_startup']	7 when innodb_buffer_pool_dump_at_shutdown  and  innodb_buffer_pool_load_at_startup  were enabled by default
['innodb_adaptive_max_sleep_delay', 'innodb_thread_sleep_delay']	3 and higher, you can set the configuration option  innodb_adaptive_max_sleep_delay  to the highest value you would allow for innodb_thread_sleep_delay , and  InnoDB  automatically adjusts  innodb_thread_sleep_delay up or down depending on the curren
['innodb_thread_concurrency', 'innodb_thread_sleep_delay']	 That is, if innodb_thread_concurrency  is  0 , the value of  innodb_thread_sleep_delay  is ignored
['innodb_thread_concurrency', 'new']	 When a new SQL statement starts, a thread has no tickets, and it must observe innodb_thread_concurrency 
['innodb_read_io_threads', 'innodb_write_io_threads']	 You can configure the number of background threads that service read and write I/O on data pages using the innodb_read_io_threads  and  innodb_write_io_threads  configuration parameters
['innodb_read_io_threads', 'innodb_write_io_threads']	 The number of  InnoDB  background threads is controlled by  innodb_read_io_threads  and  innodb_write_io_threads 
['old', 'port']	 For systems with individual 5400 RPM or 7200 RPM drives, you might lower the value to 100, which represents an estimated proportion of the I/O operations per second (IOPS) available to older-generation disk drives that can perform about 100 IOPS
['innodb_flush_sync', 'innodb_io_capacity']	 Ignoring I/O Capacity at Checkpoints The  innodb_flush_sync  variable, which is enabled by default, causes the  innodb_io_capacity setting to be ignored during bursts of I/O activity that occur at  checkpoints 
['innodb_flush_sync', 'innodb_io_capacity']	 To adhere to the I/O rate defined by the  innodb_io_capacity  setting, disable  innodb_flush_sync 
['flush', 'innodb_io_capacity']	 Configuring an I/O Capacity Maximum If flushing activity falls behind,  InnoDB  can flush more aggressively, at a higher rate of I/O operations per second (IOPS) than defined by the  innodb_io_capacity  variable
['innodb_purge_batch_size', 'innodb_purge_threads']	 In a multithreaded purge configuration, the coordinator purge thread divides  innodb_purge_batch_size  by innodb_purge_threads  and assigns that number of pages to each purge thread
['innodb_max_purge_lag', 'old']	 When the purge lag exceeds the  innodb_max_purge_lag  threshold, a delay is imposed on  INSERT ,  UPDATE , and  DELETE operations to allow time for purge operations to catch up
['innodb_max_purge_lag_delay', 'old']	 The  innodb_max_purge_lag_delay variable specifies the maximum delay in microseconds for the delay imposed when the innodb_max_purge_lag  threshold is exceeded
['innodb_stats_auto_recalc', 'innodb_stats_persistent_sample_pages']	 Configuring Optimizer Statistics Parameters for Individual Tables innodb_stats_persistent ,  innodb_stats_auto_recalc , and innodb_stats_persistent_sample_pages  are global variables
['innodb_stats_on_metadata', 'innodb_stats_persistent']	 SET GLOBAL innodb_stats_on_metadata=ON Note innodb_stats_on_metadata  only applies when optimizer  statistics  are configured to be non-persistent (when  innodb_stats_persistent  is disabled)
['innodb_stats_persistent', 'innodb_stats_transient_sample_pages']	 The value of  innodb_stats_transient_sample_pages  affects the index sampling for all  InnoDB tables and indexes when  innodb_stats_persistent=0 
['innodb_stats_persistent', 'innodb_stats_transient_sample_pages']	 If  innodb_stats_persistent=OFF , the number of pages sampled is defined by  innodb_stats_transient_sample_pages 
['innodb_page_size', 'innodb_stats_persistent_sample_pages']	 With innodb_stats_persistent_sample_pages  set to the default value of  20 , and with a default page size of 16  KiB  ( innodb_page_size =16384), you can then estimate that 20 * 12 * 16384  bytes  are read for table  t , or about 4  MiB 
['innodb_file_format', 'innodb_file_per_table']	 After the  innodb_file_per_table  and  innodb_file_format  options are configured, specify the ROW_FORMAT=COMPRESSED  clause or  KEY_BLOCK_SIZE  clause, or both, in a  CREATE TABLE  or  ALTER TABLE  statement to create a compressed table in a file-p
['innodb_file_format', 'innodb_file_per_table']	 For example, you might use the following statements: SET GLOBAL innodb_file_per_table=1; SET GLOBAL innodb_file_format=Barracuda; CREATE TABLE t1  (c1 INT PRIMARY KEY)  ROW_FORMAT=COMPRESSED  KEY_BLOCK_SIZE=8; Creating a Compressed Table in a Genera
['autocommit', 'innodb_file_format', 'innodb_file_per_table']	 For example: USE test; SET GLOBAL innodb_file_per_table=1; SET GLOBAL innodb_file_format=Barracuda; SET GLOBAL autocommit=0; -- Create an uncompressed table with a million or two rows
['innodb_compression_failure_threshold_pct', 'innodb_compression_level', 'innodb_compression_pad_pct_max', 'port']	 Ł If you get a high proportion of  compression failures , you can adjust  innodb_compression_level , innodb_compression_failure_threshold_pct , and  innodb_compression_pad_pct_max options as described in  Section 14
['innodb_compression_failure_threshold_pct', 'innodb_compression_pad_pct_max']	 On a busy server doing frequent writes to compressed tables, you can adjust the innodb_compression_failure_threshold_pct , and  innodb_compression_pad_pct_max configuration options to fine-tune this mechanism
['innodb_strict_mode', 'port']	 innodb_strict_mode  is not applicable to general tablespaces, which also support compressed tables
['old', 'port']	 Tables created in older versions of MySQL use the  Antelope  file format, which supports only ROW_FORMAT=REDUNDANT  and  ROW_FORMAT=COMPACT 
['innodb_file_format', 'innodb_file_per_table']	 To create a compressed table in a file-per-table tablespace,  innodb_file_per_table  must be enabled and  innodb_file_format  must be set to Barracuda 
['innodb_compression_pad_pct_max', 'new', 'old']	 When this threshold is passed, MySQL begins to leave additional free space within each new compressed page, dynamically adjusting the amount of free space up to the percentage of page size specified by  innodb_compression_pad_pct_max Ł innodb_compre
['innodb_file_per_table', 'innodb_strict_mode']	 When  innodb_strict_mode  is disabled, specifying  ROW_FORMAT=COMPRESSED  or KEY_BLOCK_SIZE  in  CREATE TABLE  or  ALTER TABLE  statements produces the following warnings if innodb_file_per_table  is disabled
['innodb_file_format', 'new', 'port']	InnoDB Table Compression To import the dump file into a new database, and have the tables re-created as they exist in the original database, ensure the server has the proper settings for the configuration parameters innodb_file_format  and  innodb_fi
['innodb_file_format', 'innodb_file_per_table', 'port']	 General tablespaces support all row formats (with some restrictions) regardless of  innodb_file_format  and innodb_file_per_table settings
['new', 'port']	10 InnoDB File-Format Management As  InnoDB  evolves, data file formats that are not compatible with prior versions of  InnoDB  are sometimes required to support new features
['new', 'port']	 It supports all  InnoDB  row formats including the newer COMPRESSED  and  DYNAMIC  row formats
['innodb_file_format', 'new']	 Note The following file format configuration parameters have new default values: Ł The  innodb_file_format  default value was changed to  Barracuda 
['innodb_file_format_max', 'innodb_large_prefix']	Enabling File Formats Ł innodb_file_format_max Ł innodb_large_prefix The file format configuration parameters were provided for creating tables compatible with earlier versions of  InnoDB  in MySQL 5
['new', 'old']	2 Verifying File Format Compatibility InnoDB incorporates several checks to guard against the possible crashes and data corruptions that might occur if you run an old release of the MySQL server on InnoDB data files that use a newer file format
['new', 'old']	Verifying File Format Compatibility In general, a newer version of InnoDB may create a table or index that cannot safely be read or written with an older version of InnoDB without risk of crashes, hangs, wrong results or corruptions
['new', 'old']	 This mechanism lets you take advantage of some new features of an InnoDB release (such as performance improvements and bug fixes), and still preserve the option of using your database with an old version of InnoDB, by preventing accidental use of ne
['innodb_fast_shutdown', 'new']	,  innodb_fast_shutdown  is greater than zero), there may be on-disk data structures (such as redo or undo entries, or doublewrite pages) that are in a  ﬁtoo-newﬂ  format for the current software
['innodb_file_format_check', 'new', 'port']	 If the file format tag in the system tablespace is newer or higher than the highest version supported by the particular currently executing software and if  innodb_file_format_check  is  ON , the following error is issued when the server is started:
['new', 'port']	 In some limited circumstances, you might want to start the server and use an ib-file set that is in a new file format that is not supported by the software you are using
['innodb_file_format_check', 'port']	 If you set the configuration parameter innodb_file_format_check  to  OFF , InnoDB opens the database, but issues this warning message in the error log: InnoDB: Warning: the system tablespace is in a file format that this version doesn't support Note
['innodb_fast_shutdown', 'innodb_file_format_check']	 You should only set  innodb_file_format_check  to  OFF  if you are sure that the previous shutdown was done with  innodb_fast_shutdown=0 , so that essentially no recovery process occurs
['innodb_file_format', 'new']	 Conversely, the parameter  innodb_file_format  (which enables a specific format) only determines whether or not a new table can be created in the enabled format and has no effect on whether or not a database can be opened
['innodb_file_format', 'new', 'port']	 The setting of the system configuration parameter  innodb_file_format  can prevent creating a new table that uses a specific file format, even if the file format is supported by a given release
['innodb_file_format_check', 'port']	 If you permit InnoDB to open a database containing files in a format it does not support (by setting the parameter  innodb_file_format_check  to  OFF ), the table-level checking described in this section still applies
['innodb_file_format', 'new']	3 Identifying the File Format in Use If you enable a different  file format  using the  innodb_file_format  configuration option, the change only applies to newly created tables
['innodb_file_format', 'innodb_file_per_table']	 The  innodb_file_per_table  and  innodb_file_format  variables are not applicable to general 2530 
['innodb_file_format', 'innodb_file_per_table']	 To store a COMPRESSED  table in a file-per-table tablespace, the  innodb_file_per_table  variable must be enabled and  innodb_file_format  must be set to  Barracuda 
['innodb_file_format', 'innodb_file_per_table']	 The  innodb_file_per_table  and innodb_file_format  variables are not applicable to general tablespaces
['innodb_default_row_format', 'port']	 Ł Importing a table that does not explicitly define a row format results in a schema mismatch error if the innodb_default_row_format  setting on the source server differs from the setting on the destination server
['flush', 'innodb_doublewrite']	 Doublewrite Buffer InnoDB  uses a novel file flush technique involving a structure called the  doublewrite buffer , which is enabled by default in most cases ( innodb_doublewrite=ON )
['innodb_file_per_table', 'new']	 To avoid the issues that come with storing all tables and indexes inside the system tablespace, you can enable the  innodb_file_per_table  configuration option (the default), which stores each newly created table in a separate tablespace file (with 
['old', 'port']	 They can be created outside of the MySQL data directory, are capable of holding multiple tables, and support tables of all row formats
['new', 'old']	 Ł Renaming an index ALTER TABLE  tbl_name  RENAME INDEX  old_index_name  TO  new_index_name , ALGORITHM=INPLACE, LOCK=NONE; Ł Adding a  FULLTEXT  index CREATE FULLTEXT INDEX  name  ON table( column ); Adding the first  FULLTEXT  index rebuilds the t
['new', 'port']	 Ł Dropping a primary key ALTER TABLE  tbl_name  DROP PRIMARY KEY, ALGORITHM=COPY; Only  ALGORITHM=COPY  supports dropping a primary key without adding a new one in the same  ALTER TABLE  statement
['new', 'old']	 Ł Renaming a column ALTER TABLE  tbl  CHANGE  old_col_name   new_col_name   data_type , ALGORITHM=INPLACE, LOCK=NONE; To permit concurrent DML, keep the same data type and only change the column name
['new', 'old']	 Ł Renaming a table ALTER TABLE  old_tbl_name  RENAME TO  new_tbl_name , ALGORITHM=INPLACE, LOCK=NONE; MySQL renames files that correspond to the table  tbl_name  without making a copy
['new', 'old']	 Ł Phase 3: Commit Table Definition In the commit table definition phase, the metadata lock is upgraded to exclusive to evict the old table definition and commit the new one
['innodb_online_alter_log_max_size', 'innodb_sort_buffer_size']	 The temporary log file is extended as required by the value of  innodb_sort_buffer_size  up to a maximum specified by  innodb_online_alter_log_max_size 
['new', 'old']	 For example, you might take a complicated statement such as: ALTER TABLE t1 ADD INDEX i1(c1), ADD UNIQUE INDEX i2(c2),   CHANGE c4_old_name c4_new_name INTEGER UNSIGNED; and break it down into simpler parts that can be tested and performed independe
['ignore_builtin_innodb', 'innodb_adaptive_flushing_lwm']	InnoDB Startup Options and System Variables Name Cmd-Line Option File System Var Status Var Var Scope Dynamic ignore_builtin_innodb Yes Yes Yes Global No innodb Yes Yes innodb_adaptive_flushing Yes Yes Yes Global Yes innodb_adaptive_flushing_lwm Yes 
['innodb_file_format_check', 'innodb_file_format_max']	InnoDB Startup Options and System Variables Name Cmd-Line Option File System Var Status Var Var Scope Dynamic innodb_file_format Yes Yes Yes Global Yes innodb_file_format_check Yes Yes Yes Global No innodb_file_format_max Yes Yes Yes Global Yes innod
['innodb_read_ahead_threshold', 'innodb_read_io_threads', 'innodb_read_only']	InnoDB Startup Options and System Variables Name Cmd-Line Option File System Var Status Var Var Scope Dynamic innodb_read_ahead_threshold Yes Yes Yes Global Yes innodb_read_io_threads Yes Yes Yes Global No innodb_read_only Yes Yes Yes Global No innod
['innodb_adaptive_max_sleep_delay', 'innodb_thread_sleep_delay']	 Any nonzero value enables automated, dynamic adjustment of the  innodb_thread_sleep_delay  value, up to the maximum value specified in the innodb_adaptive_max_sleep_delay  option
['innodb_buffer_pool_chunk_size', 'innodb_buffer_pool_instances']	 The following conditions apply when altering the  innodb_buffer_pool_chunk_size  value: Ł If   innodb_buffer_pool_chunk_size  *  innodb_buffer_pool_instances  is larger than the current buffer pool size when the buffer pool is initialized,  innodb_b
['innodb_buffer_pool_chunk_size', 'innodb_buffer_pool_instances']	InnoDB System Variables Ł Buffer pool size must always be equal to or a multiple of  innodb_buffer_pool_chunk_size *  innodb_buffer_pool_instances 
['innodb_buffer_pool_chunk_size', 'innodb_buffer_pool_instances', 'innodb_buffer_pool_size']	 If you alter  innodb_buffer_pool_chunk_size , innodb_buffer_pool_size  is automatically rounded to a value that is equal to or a multiple of innodb_buffer_pool_chunk_size  *  innodb_buffer_pool_instances 
['innodb_buffer_pool_chunk_size', 'port']	 Important Care should be taken when changing  innodb_buffer_pool_chunk_size , as changing this value can automatically increase the size of the buffer pool
['innodb_buffer_pool_chunk_size', 'innodb_buffer_pool_size']	 Before changing  innodb_buffer_pool_chunk_size , calculate the effect it has on innodb_buffer_pool_size  to ensure that the resulting buffer pool size is acceptable
['innodb_buffer_pool_chunk_size', 'innodb_buffer_pool_size']	 To avoid potential performance issues, the number of chunks ( innodb_buffer_pool_size  / innodb_buffer_pool_chunk_size ) should not exceed 1000
['innodb_buffer_pool_chunk_size', 'innodb_buffer_pool_instances']	 However, the buffer pool size must be equal to or a multiple of innodb_buffer_pool_chunk_size  *  innodb_buffer_pool_instances , and changing either of those variable settings requires restarting the server
['innodb_buffer_pool_dump_at_shutdown', 'innodb_buffer_pool_load_at_startup']	 Both  innodb_buffer_pool_dump_at_shutdown  and  innodb_buffer_pool_load_at_startup are enabled by default
['innodb_buffer_pool_dump_at_shutdown', 'innodb_buffer_pool_dump_pct', 'innodb_buffer_pool_load_at_startup']	 The change to the  innodb_buffer_pool_dump_pct  default value coincides with default value changes for  innodb_buffer_pool_dump_at_shutdown  and innodb_buffer_pool_load_at_startup , which are both enabled by default in MySQL 5
['innodb_buffer_pool_filename', 'old']	 Ł innodb_buffer_pool_filename Command-Line Format --innodb-buffer-pool-filename=file_name System Variable innodb_buffer_pool_filename Scope Global Dynamic Yes Type File name Default Value ib_buffer_pool Specifies the name of the file that holds the 
['innodb_buffer_pool_instances', 'innodb_buffer_pool_size']	InnoDB System Variables Ł innodb_buffer_pool_instances Command-Line Format --innodb-buffer-pool-instances=# System Variable innodb_buffer_pool_instances Scope Global Dynamic No Type Integer Default Value (Other) 8 (or 1 if innodb_buffer_pool_size < 1
['innodb_buffer_pool_instances', 'innodb_buffer_pool_size']	 For best efficiency, specify a combination of innodb_buffer_pool_instances  and  innodb_buffer_pool_size  so that each buffer pool instance is at least 1GB
['innodb_buffer_pool_instances', 'innodb_buffer_pool_size']	3GB, the default for innodb_buffer_pool_instances  is  innodb_buffer_pool_size /128MB, with individual memory allocation requests for each chunk
['innodb_buffer_pool_load_at_startup', 'innodb_buffer_pool_load_now']	InnoDB System Variables Default Value OFF Interrupts the process of restoring  InnoDB   buffer pool  contents triggered by innodb_buffer_pool_load_at_startup  or  innodb_buffer_pool_load_now 
['innodb_buffer_pool_chunk_size', 'innodb_buffer_pool_instances']	 Buffer pool size must always be equal to or a multiple of  innodb_buffer_pool_chunk_size  * innodb_buffer_pool_instances 
['innodb_buffer_pool_chunk_size', 'innodb_buffer_pool_instances']	 If you alter the buffer pool size to a value that is not equal to or a multiple of  innodb_buffer_pool_chunk_size  *  innodb_buffer_pool_instances , buffer pool size is automatically adjusted to a value that is equal to or a multiple of innodb_buffe
['innodb_checksum_algorithm', 'innodb_checksums']	 innodb_checksum_algorithm  replaces the  innodb_checksums  option
['innodb_checksum_algorithm', 'innodb_checksums']	6: Ł innodb_checksums=ON  is the same as  innodb_checksum_algorithm=innodb 
['innodb_checksum_algorithm', 'innodb_checksums']	InnoDB System Variables Ł innodb_checksums=OFF  is the same as  innodb_checksum_algorithm=none 
['innodb_checksum_algorithm', 'innodb_checksums']	7, with a default  innodb_checksum_algorithm  value of crc32, innodb_checksums=ON  is now the same as  innodb_checksum_algorithm=crc32 
['innodb_checksum_algorithm', 'innodb_checksums']	 innodb_checksums=OFF  is still the same as  innodb_checksum_algorithm=none 
['new', 'old']	 The blocks in a tablespace can use a mix of old, new, and no checksum values, being updated gradually as the data is modified; once blocks in a tablespace are modified to use the  crc32  algorithm, the associated tables cannot be read by earlier ver
['innodb_checksum_algorithm', 'innodb_checksums']	 innodb_checksums  is deprecated, replaced by  innodb_checksum_algorithm 
['innodb_checksum_algorithm', 'innodb_checksums']	7,  innodb_checksums=ON  is the same as innodb_checksum_algorithm=innodb 
['innodb_checksum_algorithm', 'innodb_checksums']	7, the  innodb_checksum_algorithm default value is  crc32 , and  innodb_checksums=ON  is the same as innodb_checksum_algorithm=crc32 
['innodb_checksum_algorithm', 'innodb_checksums']	  innodb_checksums=OFF  is the same as innodb_checksum_algorithm=none 
['innodb_checksum_algorithm', 'innodb_checksums']	 Remove any  innodb_checksums  options from your configuration files and startup scripts to avoid conflicts with  innodb_checksum_algorithm 
['innodb_checksum_algorithm', 'innodb_checksums']	  innodb_checksums=OFF  automatically sets innodb_checksum_algorithm=none 
['innodb_checksum_algorithm', 'innodb_checksums']	  innodb_checksums=ON  is ignored and overridden by any other setting for  innodb_checksum_algorithm 
['innodb_compression_pad_pct_max', 'new', 'old']	 When this threshold is passed, MySQL begins to leave additional free space within each new compressed page, dynamically adjusting the amount of free space up to the percentage of page size specified by  innodb_compression_pad_pct_max 
['innodb_concurrency_tickets', 'innodb_thread_concurrency']	 With a large  innodb_concurrency_tickets  value, large transactions spend less time waiting for a position at the end of the queue (controlled by  innodb_thread_concurrency ) and more time retrieving rows
['innodb_concurrency_tickets', 'innodb_thread_concurrency']	 With a nonzero  innodb_thread_concurrency  value, you may need to adjust the innodb_concurrency_tickets  value up or down to find the optimal balance between larger and smaller transactions
['flush', 'old']	 If the value is 2,  InnoDB  flushes its logs and shuts down cold, as if MySQL had crashed; no committed transactions are lost, but the  crash recovery operation makes the next startup take longer
['new', 'port']	  Barracuda  is the newer file format, which supports  COMPRESSED  and  DYNAMIC  row formats
['innodb_file_format', 'port']	 The  innodb_file_format  setting does not apply to general tablespaces, which support tables of all row formats
['innodb_force_recovery', 'port']	 For the meanings of these values and important information about innodb_force_recovery , see  Section 14
['master_info_repository', 'relay_log_info_repository']	 These restrictions may cause replication administration commands to fail with an error because replication settings such as  relay_log_info_repository=TABLE  and master_info_repository=TABLE  store information in  InnoDB  tables
['innodb_large_prefix', 'port']	 innodb_large_prefix  was introduced to disable large index key prefixes for compatibility with earlier versions of  InnoDB  that do not support large index key prefixes
['innodb_deadlock_detect', 'innodb_lock_wait_timeout']	 When  innodb_deadlock_detect  is disabled,  InnoDB  relies on innodb_lock_wait_timeout  for transaction rollback when a deadlock occurs
['innodb_locks_unsafe_for_binlog', 'new']	 Enabling  innodb_locks_unsafe_for_binlog  may cause phantom problems because other sessions can insert new rows into the gaps when gap locking is disabled
['innodb_locks_unsafe_for_binlog', 'old']	 Enabling  innodb_locks_unsafe_for_binlog  has additional effects: Ł For  UPDATE  or  DELETE  statements,  InnoDB  holds locks only for rows that it updates or deletes
['innodb_log_file_size', 'innodb_log_files_in_group']	 The combined size of log files ( innodb_log_file_size  *  innodb_log_files_in_group ) can be up to 512GB
['flush', 'innodb_max_dirty_pages_pct']	 The  innodb_max_dirty_pages_pct  setting establishes a target for flushing activity
['innodb_max_undo_log_size', 'old']	 Ł innodb_max_undo_log_size Command-Line Format --innodb-max-undo-log-size=# System Variable innodb_max_undo_log_size Scope Global Dynamic Yes Type Integer Default Value 1073741824 Minimum Value 10485760 Maximum Value 2**64-1 Defines a threshold size
['innodb_undo_log_truncate', 'old']	 If an undo tablespace exceeds the threshold, it can be marked for truncation when  innodb_undo_log_truncate  is enabled
['new', 'old']	 Specifies how long in milliseconds a block inserted into the old  sublist  must stay there after its first access before it can be moved to the new sublist
['new', 'old']	 If the value is 0, a block inserted into the old sublist moves immediately to the new sublist the first time it is accessed, no matter how soon after insertion the access occurs
['new', 'old']	 For example, a value of 1000 causes blocks to stay in the old sublist for 1 second after the first access before they become eligible to move to the new sublist
['innodb_online_alter_log_max_size', 'innodb_sort_buffer_size']	 The temporary log file is extended when needed by the value of  innodb_sort_buffer_size , up to the maximum specified by  innodb_online_alter_log_max_size 
['innodb_file_per_table', 'table_open_cache']	 The default value is 300 if  innodb_file_per_table  is not enabled, and the higher of 300 and  table_open_cache otherwise
['flush', 'innodb_page_cleaners']	 Ł innodb_page_cleaners Command-Line Format --innodb-page-cleaners=# System Variable innodb_page_cleaners Scope Global Dynamic No Type Integer Default Value 4 Minimum Value 1 Maximum Value 64 The number of page cleaner threads that flush dirty pages 
['innodb_buffer_pool_instances', 'innodb_page_cleaners']	 If the number of page cleaner threads exceeds the number of buffer pool instances,  innodb_page_cleaners  is automatically set to the same value as  innodb_buffer_pool_instances 
['flush', 'port']	 The  setpriority()  system call is used on Linux platforms where it is supported, and where the mysqld  execution user is authorized to give  page_cleaner  threads priority over other MySQL and InnoDB  threads to help page flushing keep pace with th
['innodb_page_size', 'port']	  ROW_FORMAT=COMPRESSED  is not supported when  innodb_page_size  is set to 32KB or 64KB
['innodb_purge_batch_size', 'innodb_purge_threads']	 In a multithreaded purge configuration, the coordinator purge thread divides innodb_purge_batch_size  by  innodb_purge_threads  and assigns that number of pages to each purge thread
['innodb_purge_batch_size', 'innodb_purge_threads']	 The  innodb_purge_batch_size  option is intended for advanced performance tuning in combination with the  innodb_purge_threads  setting
['innodb_purge_rseg_truncate_frequency', 'innodb_undo_log_truncate']	 innodb_purge_rseg_truncate_frequency  is intended for use with innodb_undo_log_truncate 
['innodb_read_io_threads', 'innodb_write_io_threads']	 Note On Linux systems, running multiple MySQL servers (typically more than 12) with default settings for  innodb_read_io_threads , innodb_write_io_threads , and the Linux  aio-max-nr  setting can exceed system limits
['innodb_ft_sort_pll_degree', 'innodb_spin_wait_delay']	innodb_ft_sort_pll_degree) Ł innodb_spin_wait_delay Command-Line Format --innodb-spin-wait-delay=# System Variable innodb_spin_wait_delay Scope Global Dynamic Yes Type Integer Default Value 6 Minimum Value 0 Maximum Value (64-bit platforms) 2**64-1 M
['innodb_stats_persistent_sample_pages', 'innodb_stats_transient_sample_pages']	 innodb_stats_persistent_sample_pages  only applies when  innodb_stats_persistent is enabled for a table; when  innodb_stats_persistent  is disabled, innodb_stats_transient_sample_pages  applies instead
['innodb_stats_persistent_sample_pages', 'innodb_stats_transient_sample_pages']	 innodb_stats_transient_sample_pages  only applies when  innodb_stats_persistent is disabled for a table; when  innodb_stats_persistent  is enabled, innodb_stats_persistent_sample_pages  applies instead
['flush', 'innodb_support_xa']	10 System Variable innodb_support_xa Scope Global, Session Dynamic Yes Type Boolean Default Value ON Enables  InnoDB  support for two-phase commit in  XA  transactions, causing an extra disk flush for transaction preparation
['autocommit', 'innodb_table_locks']	 Ł innodb_table_locks Command-Line Format --innodb-table-locks[={OFF|ON}] System Variable innodb_table_locks Scope Global, Session Dynamic Yes Type Boolean Default Value ON If  autocommit = 0 ,  InnoDB  honors  LOCK TABLES ; MySQL does not return fro
['autocommit', 'innodb_table_locks']	 The default value of innodb_table_locks  is 1, which means that  LOCK TABLES  causes InnoDB to lock a table internally if  autocommit = 0 
['innodb_adaptive_max_sleep_delay', 'innodb_thread_sleep_delay']	 You can set  innodb_adaptive_max_sleep_delay  to the highest value you would allow for  innodb_thread_sleep_delay , and  InnoDB  automatically adjusts innodb_thread_sleep_delay  up or down depending on current thread-scheduling activity
['innodb_rollback_segments', 'innodb_undo_tablespaces']	 Used in conjunction with  innodb_rollback_segments  and innodb_undo_tablespaces 
['innodb_undo_log_truncate', 'old']	 Ł innodb_undo_log_truncate Command-Line Format --innodb-undo-log-truncate[={OFF|ON}] System Variable innodb_undo_log_truncate Scope Global Dynamic Yes Type Boolean Default Value OFF When enabled, undo tablespaces that exceed the threshold value defi
['innodb_rollback_segments', 'innodb_undo_tablespaces']	 This means that  innodb_undo_tablespaces  must be set to a value equal to or greater than 2, and  innodb_rollback_segments  must set to a value equal to or greater than 35
['innodb_rollback_segments', 'innodb_undo_logs']	 The  innodb_undo_logs  option is an alias for  innodb_rollback_segments 
['innodb_undo_tablespaces', 'port']	 Important innodb_undo_tablespaces  can only be configured prior to initializing the MySQL instance and cannot be changed afterward
['innodb_read_io_threads', 'innodb_write_io_threads']	 The number of these threads are controlled by the  innodb_read_io_threads  and innodb_write_io_threads  parameters
['innodb_doublewrite', 'innodb_flush_log_at_trx_commit']	 For example, consider setting the innodb_doublewrite  to  0  and  innodb_flush_log_at_trx_commit  to  2 
['new', 'port']	 Therefore, consider focussing initial development efforts on write-intensive applications that are I/O-bound, and look for opportunities to use MySQL with the daemon_memcached  plugin for new write-intensive applications
['binlog_format', 'flush']	 Since there is no actual SQL statement being processed by the MySQL server, all  memcached commands (except for  flush_all ) use Row-Based Replication (RBR) logging, which is independent of any server  binlog_format  setting
['innodb_force_recovery', 'port']	  DROP TABLE  is also supported with an  innodb_force_recovery value greater than 3, up to MySQL 5
['innodb_force_recovery', 'port']	 If you encounter a runaway rollback caused by a failing mass import or  ALTER TABLE , you can kill the  mysqld  process and set  innodb_force_recovery  to  3  to bring the database up without the rollback, and then  DROP  the table that is causing t
['innodb_page_size', 'port']	 If you reduce the  InnoDB   page size  to 8KB or 4KB by specifying the  innodb_page_size  option when creating the MySQL instance, the maximum length of the index key is lowered proportionally, based on the limit of 3072 bytes for a 16KB page size
['bulk_insert_buffer_size', 'concurrent_insert', 'delay_key_write']	3 MyISAM Option and Variable Reference Name Cmd-Line Option File System Var Status Var Var Scope Dynamic bulk_insert_buffer_size Yes Yes Yes Both Yes concurrent_insert Yes Yes Yes Global Yes delay_key_write Yes Yes Yes Global Yes have_rtree_keys Yes 
['myisam_use_mmap', 'tmp_table_size']	MyISAM Startup Options Name Cmd-Line Option File System Var Status Var Var Scope Dynamic myisam_use_mmap Yes Yes Yes Global Yes tmp_table_size Yes Yes Yes Both Yes The following system variables affect the behavior of  MyISAM  tables
['delay_key_write', 'flush']	 Note This is a limit  per thread ! Ł delay_key_write=ALL Don't flush key buffers between writes for any  MyISAM  table
['new', 'port']	 The  ARCHIVE  engine also supports the  AUTO_INCREMENT  table option in  CREATE TABLE statements to specify the initial sequence value for a new table or reset the sequence value for an existing table, respectively
['binlog_format', 'port']	 Column Filtering When using row-based replication, ( binlog_format=ROW ), a replica where the last columns are missing from a table is supported, as described in the section  Section 16
['new', 'port']	 If application changes bring about requirements that demand the underlying storage engine change, or that one or more storage engines be added to support new needs, no significant coding or process changes are required to make things work
['innodb_flush_log_at_trx_commit', 'sync_binlog']	 Note The following options have an impact on this procedure: Ł For the greatest possible durability and consistency in a replication setup using  InnoDB  with transactions, you should use innodb_flush_log_at_trx_commit=1  and  sync_binlog=1  in the 
['ft_max_word_len', 'ft_min_word_len', 'ft_stopword_file']	 This method also does not work reliably if the source and replica have different values for ft_stopword_file ,  ft_min_word_len , or  ft_max_word_len  and you are copying tables having full- text indexes
['new', 'server_id']	Setting Up Binary Log File Position Based Replication If the default  server_id  value of 0 was set previously, you must restart the server to initialize the replica with your new nonzero server ID
['new', 'port']	 Setting Up Replication between a New Source and Replicas When there is no snapshot of a previous database to import, configure the replica to start replication from the new source
['new', 'server_id']	 On the new replica, edit the configuration and give the new replica a unique server ID (using the server_id  system variable) that is not used by the source or any of the existing replicas
['slave_parallel_workers', 'slave_preserve_commit_order']	 On a multithreaded replica (with  slave_parallel_workers > 0  ), transactions can be applied in parallel, so replicated transactions can commit out of order (unless  slave_preserve_commit_order=1 is set)
['new', 'old']	 That setting makes the server iterate all the binary log files (not just the newest and oldest) to find where GTID events start to appear
['enforce_gtid_consistency', 'gtid_mode']	   To enable GTID-based replication, each server must be started with GTID mode enabled by setting the  gtid_mode  variable to  ON , and with the enforce_gtid_consistency  variable enabled to ensure that only statements which are safe for GTID- based
['new', 'old']	 To reproduce the identifier set on the new server, it is necessary to copy the identifiers from the old server to the new one, and to preserve the relationship between the identifiers and the actual events
['new', 'port']	 To eliminate this requirement, a snapshot of the data set, the binary logs and the global transaction information the source server contains can be imported to the new replica
['new', 'port']	 Import the binary logs from the source server to the new replica using  mysqlbinlog , with the  --read-from-remote-server and  --read-from-remote-master  options
['enforce_gtid_consistency', 'port']	    CREATE TEMPORARY TABLE  and  DROP TEMPORARY TABLE  statements are not supported inside transactions, procedures, functions, and triggers when using GTIDs (that is, when the enforce_gtid_consistency  system variable is set to  ON )
['enforce_gtid_consistency', 'gtid_mode']	 The ability to configure the replication mode online means that the  gtid_mode  and enforce_gtid_consistency  variables are now both dynamic and can be set from a top-level statement by an account that has privileges sufficient to set global system 
['gtid_mode', 'new']	 When  gtid_mode=OFF_PERMISSIVE  then  new  transactions are anonymous while permitting replicated transactions to be either GTID or anonymous transactions
['gtid_mode', 'new']	 When  gtid_mode=ON_PERMISSIVE  then new  transactions use GTIDs while permitting replicated transactions to be either GTID or anonymous transactions
['gtid_mode', 'port']	 The valid values for  gtid_mode  are as follows and in this order: Ł OFF Ł OFF_PERMISSIVE Ł ON_PERMISSIVE Ł ON It is important to note that the state of  gtid_mode  can only be changed by one step at a time based on the above order
['enforce_gtid_consistency', 'gtid_mode']	 On each server, add  gtid_mode=ON  and  enforce_gtid_consistency=ON  to  my
['master_info_repository', 'relay_log_info_repository']	 Replicas in a multi-source replication topology require  TABLE  repositories for the connection metadata repository and applier metadata repository, as specified by the  master_info_repository  and relay_log_info_repository  system variables
['port', 'server_id']	 Of particular importance is the  server_id  system variable
['flush', 'slave_checkpoint_period']	 Ł slave_checkpoint_period : Update progress status of multithreaded replica and flush relay log info to disk after this number of milliseconds
['old', 'slave_pending_jobs_size_max']	 Ł slave_pending_jobs_size_max : Maximum size of replica worker queues holding events not yet applied
['binlog_cache_size', 'old']	 Ł binlog_cache_size : Size of cache to hold SQL statements for binary log during transaction
['binlog_stmt_cache_size', 'old']	 Ł binlog_stmt_cache_size : Size of cache to hold nontransactional statements for binary log during transaction
['flush', 'sync_binlog']	 Ł sync_binlog : Synchronously flush binary log to disk after every #th event
['auto_increment_increment', 'auto_increment_offset']	 Attempting to set the value of auto_increment_increment  or  auto_increment_offset  to a noninteger value produces an error, and the actual value of the variable remains unchanged
['auto_increment_increment', 'port']	 Note auto_increment_increment  is also supported for use with  NDB  tables
['auto_increment_increment', 'auto_increment_offset']	 When Group Replication is started on a server, the value of  auto_increment_increment  is changed to the value of  group_replication_auto_increment_increment , which defaults to 7, and the value of  auto_increment_offset  is changed to the server ID
['auto_increment_increment', 'auto_increment_offset']	 These changes are only made and reverted if  auto_increment_increment and  auto_increment_offset  each have their default value of 1
['auto_increment_increment', 'auto_increment_offset']	 auto_increment_increment  and  auto_increment_offset  affect  AUTO_INCREMENT  column behavior as follows: Ł auto_increment_increment  controls the interval between successive column values
['auto_increment_increment', 'auto_increment_offset']	 For example: mysql>  SHOW VARIABLES LIKE 'auto_inc%'; +--------------------------+-------+ | Variable_name            | Value | +--------------------------+-------+ | auto_increment_increment | 1     | | auto_increment_offset    | 1     | +---------
['auto_increment_increment', 'auto_increment_offset']	00 sec) mysql>  SHOW VARIABLES LIKE 'auto_inc%'; +--------------------------+-------+ | Variable_name            | Value | +--------------------------+-------+ | auto_increment_increment | 10    | | auto_increment_offset    | 1     | +---------------
['auto_increment_increment', 'auto_increment_offset']	 Consider the following, assuming that these statements are executed during the same session as the example given in the description for  auto_increment_increment : mysql>  SET @@auto_increment_offset=5; Query OK, 0 rows affected (0
['auto_increment_increment', 'auto_increment_offset']	00 sec) mysql>  SHOW VARIABLES LIKE 'auto_inc%'; +--------------------------+-------+ | Variable_name            | Value | +--------------------------+-------+ | auto_increment_increment | 10    | | auto_increment_offset    | 5     | +---------------
['auto_increment_increment', 'auto_increment_offset']	02 sec) When the value of  auto_increment_offset  is greater than that of auto_increment_increment , the value of  auto_increment_offset  is ignored
['auto_increment_increment', 'auto_increment_offset']	 The series is calculated like this: auto_increment_offset  +  N  ×  auto_increment_increment where  N  is a positive integer value in the series [1, 2, 3, 
['auto_increment_increment', 'auto_increment_offset']	 For example: mysql>  SHOW VARIABLES LIKE 'auto_inc%'; +--------------------------+-------+ | Variable_name            | Value | +--------------------------+-------+ | auto_increment_increment | 10    | | auto_increment_offset    | 5     | +---------
['auto_increment_increment', 'auto_increment_offset']	00 sec) The values shown for  auto_increment_increment  and  auto_increment_offset  generate the series 5 +  N  × 10, that is, [5, 15, 25, 35, 45, 
['auto_increment_offset', 'port']	 Note auto_increment_offset  is also supported for use with  NDB  tables
['new', 'old']	 Ł --replicate-rewrite-db= from_name -> to_name Command-Line Format --replicate-rewrite-db=old_name->new_name Type String Tells the replica to create a replication filter that translates the specified database to  to_name  if it was from_name  on the
['new', 'old']	 For example: shell>  mysqld --replicate-rewrite-db=" olddb -> newdb " The effect of the  --replicate-rewrite-db  option differs depending on whether statement-based or row-based binary logging format is used for the query
['binlog_format', 'log_slow_slave_statements']	Replication and Binary Logging Options and Variables is set, or that are logged when  binlog_format=ROW  is set, are not added to the replica's slow query log, even if  log_slow_slave_statements  is enabled
['max_binlog_size', 'max_relay_log_size']	 If max_relay_log_size  is 0, the server uses  max_binlog_size  for both the binary log and the relay log
['relay_log_purge', 'relay_log_recovery']	 Enabling  relay_log_recovery  when  relay_log_purge  is disabled risks reading the relay log from files that were not purged, leading to data inconsistency
['slave_parallel_type', 'slave_preserve_commit_order']	 slave_preserve_commit_order=1  requires that  --log-bin  and  --log-slave-updates  are enabled on the replica, and  slave_parallel_type  is set to  LOGICAL_CLOCK 
['flush', 'sync_relay_log']	 Setting  sync_relay_log  to 0 causes no synchronization to be done to disk; in this case, the server relies on the operating system to flush the relay log's contents from time to time as for any other file
['relay_log_info_repository', 'sync_relay_log_info']	 The effects of these factors on the behavior of the server for  sync_relay_log_info  values of zero and greater than zero are as follows: sync_relay_log_info = 0 Ł If  relay_log_info_repository  is set to  FILE , the MySQL server performs no synchro
['relay_log_info_repository', 'sync_relay_log_info']	 sync_relay_log_info =  N > 0 Ł If  relay_log_info_repository  is set to  FILE , the replica synchronizes its  relay-log
['binlog_cache_size', 'binlog_stmt_cache_size']	 binlog_cache_size  sets the size for the transaction cache only; the size of the statement cache is governed by the  binlog_stmt_cache_size  system variable
['binlog_checksum', 'port']	 binlog_checksum  supports the values  NONE  (disabled) and  CRC32 
['binlog_direct_non_transactional_updates', 'binlog_format']	 binlog_direct_non_transactional_updates  works only for statements that are replicated using the statement-based binary logging format ; that is, it works only when the value of  binlog_format is  STATEMENT , or when  binlog_format  is  MIXED  and a
['binlog_group_commit_sync_delay', 'sync_binlog']	 When  sync_binlog=0  or  sync_binlog=1  is set, the delay specified by binlog_group_commit_sync_delay  is applied for every binary log commit group before 2883 
['binlog_transaction_dependency_tracking', 'slave_parallel_type']	 To benefit from this effect, the replica servers must have  slave_parallel_type=LOGICAL_CLOCK  set, and the effect is more significant when binlog_transaction_dependency_tracking=COMMIT_ORDER  is also set
['binlog_group_commit_sync_delay', 'port']	 It is important to take into account both the source's throughput and the replicas' throughput when you are tuning the setting for  binlog_group_commit_sync_delay 
['binlog_format', 'binlog_row_image']	 When binlog_format  is  MIXED , the setting for  binlog_row_image  is applied to changes that are logged using row-based format, but this setting has no effect on changes logged as statements
['binlog_transaction_dependency_tracking', 'transaction_write_set_extraction']	Replication and Binary Logging Options and Variables of  transaction_write_set_extraction  cannot be changed if the current value of binlog_transaction_dependency_tracking  is  WRITESET  or  WRITESET_SESSION 
['max_binlog_cache_size', 'max_binlog_stmt_cache_size']	 max_binlog_cache_size  sets the size for the transaction cache only; the upper limit for the statement cache is governed by the  max_binlog_stmt_cache_size  system variable
['max_binlog_cache_size', 'new']	 The visibility to sessions of  max_binlog_cache_size  matches that of the  binlog_cache_size system variable; in other words, changing its value affects only new sessions that are started after the value is changed
['max_binlog_size', 'max_relay_log_size']	 If  max_relay_log_size  is 0, the value of  max_binlog_size  applies to relay logs as well
['max_binlog_cache_size', 'max_binlog_stmt_cache_size']	 max_binlog_stmt_cache_size  sets the size for the statement cache only; the upper limit for the transaction cache is governed exclusively by the  max_binlog_cache_size  system variable
['binlog_gtid_simple_recovery', 'old']	 When  binlog_gtid_simple_recovery=TRUE , which is the default, the values of  gtid_executed and  gtid_purged  are computed at startup based on the values of  Previous_gtids_log_event  in the most recent and oldest binary log files
['binlog_gtid_simple_recovery', 'new']	 With  binlog_gtid_simple_recovery=TRUE ,  gtid_executed  and  gtid_purged  might be initialized incorrectly in the following two situations: Ł The newest binary log was generated by MySQL 5
['gtid_mode', 'new']	5 or earlier, and  gtid_mode  was  ON  for some binary logs but  OFF  for the newest binary log
['gtid_mode', 'old']	 If the server's older binary log files do not have GTID log events, for example if  gtid_mode=ON  was only set recently on the server, this process can take a long time
['enforce_gtid_consistency', 'gtid_mode']	 enforce_gtid_consistency  must be true before you can set  gtid_mode=ON 
['binlog_gtid_simple_recovery', 'old']	7 or older are present on the server, you might need to set binlog_gtid_simple_recovery=FALSE  in the server's configuration file to produce the correct computation
['net_retry_count', 'net_write_timeout']	 As for any other client connection, the timeouts for this depend on the values of  net_write_timeout  and  net_retry_count ; for more information about these, see  Section 5
['new', 'old']	 If you encounter the issue after replication has already begun, one way to work around it is to stop the replica server, prepend the contents of the old relay log index file to the new one, and then restart the replica
['max_binlog_size', 'max_relay_log_size']	 Ł If the value of  max_relay_log_size  is 0,  max_binlog_size  determines the maximum relay log file size
['master_info_repository', 'relay_log_info_repository']	 To create the replication metadata repositories as tables, specify  master_info_repository=TABLE  and relay_log_info_repository=TABLE  at server startup
['master_info_repository', 'relay_log_info_repository']	 If you set  master_info_repository  and  relay_log_info_repository  to  TABLE , the mysql
['port', 'sync_relay_log']	 Setting  sync_relay_log=1  is particularly important for a multi-threaded replica, where the recovery process fails if gaps in the sequence of transactions cannot be filled using the information in the relay log
['default_storage_engine', 'new']	 If you want to retain engine differences on the source and replica, you should be careful to use the default_storage_engine  variable on the source when creating a new table
['log_slave_updates', 'new']	Switching Sources During Failover The reason for running the replica without  log_slave_updates  enabled is to prevent replicas from receiving updates twice in case you cause one of the replicas to become the new source
['binlog_format', 'slave_exec_mode']	 When  binlog_format=ROW , you can prevent the replica from stopping if you set  slave_exec_mode=IDEMPOTENT  before you start the replica again
['new', 'old']	25 Replication and Reserved Words You can encounter problems when you attempt to replicate from an older source to a newer replica and you make use of identifiers on the source that are reserved words in the newer MySQL version running on the replica
['flush', 'sync_relay_log_info']	 Setting  sync_relay_log_info  to 0 causes no writes to be forced to disk and the server relies on the operating system to flush the file from time to time
['slave_parallel_type', 'slave_preserve_commit_order']	 To avoid gaps occurring, set  slave_preserve_commit_order=1 , which requires slave_parallel_type=LOGICAL_CLOCK , and that  log-bin  and  log-slave-updates  are also enabled
['binlog_checksum', 'binlog_format']	   The  binlog_format  and binlog_checksum  system variables are read-only as long as a transaction is in progress
['old', 'port']	  Suppose that you upgrade an old server that does not support multiple triggers to MySQL 5
['new', 'old', 'port']	 If the new server is a replication source server and has old replicas that do not support multiple triggers, an error occurs on those replicas if a trigger is created on the source for a table that already has a trigger with the same trigger event a
['old', 'port']	  If you downgrade a server that supports multiple triggers to an older version that does not, the downgrade has these effects: 2981 
['new', 'old']	 However, this should occur only when replicating from a newer source to an older replica, which is not a recommended configuration
['auto_increment_increment', 'auto_increment_offset']	37 Replication and Variables System variables are not replicated correctly when using  STATEMENT  mode, except for the following variables when they are used with session scope: Ł auto_increment_increment Ł auto_increment_offset Ł character_set_clien
['character_set_server', 'collation_server', 'lc_time_names']	Replication Features and Issues Ł character_set_database Ł character_set_server Ł collation_connection Ł collation_database Ł collation_server Ł foreign_key_checks Ł identity Ł last_insert_id Ł lc_time_names Ł pseudo_thread_id Ł sql_auto_is_null Ł ti
['new', 'old', 'port']	 However, you may encounter difficulties when replicating from an older source to a newer replica if the source uses statements or relies on behavior no longer supported in the version of MySQL used on the replica
['new', 'old', 'port']	 Replication from newer sources to older replicas may be possible, but is generally not supported
['new', 'old']	   You cannot replicate from a newer source to an older replica using statement-based replication if the statements to be replicated use SQL features available on the source but not on the replica
['new', 'old']	 This enables Group Replication to be aware of the situation where a new incarnation of the same server (with the same address but a new identifier) is trying to join the group while its old incarnation is still listed as a member
['new', 'old']	 The new incarnation is blocked from joining the group until the old incarnation can be removed by a reconfiguration
['binlog_checksum', 'binlog_format', 'enforce_gtid_consistency', 'gtid_mode', 'log_slave_updates', 'master_info_repository', 'relay_log_info_repository', 'server_id']	 server_id=1 gtid_mode=ON enforce_gtid_consistency=ON master_info_repository=TABLE relay_log_info_repository=TABLE binlog_checksum=NONE log_slave_updates=ON log_bin=binlog binlog_format=ROW These settings configure the server to use the unique identi
['new', 'port']	 Ł Configuring  group_replication_group_seeds  sets the hostname and port of the group members which are used by the new member to establish its connection to the group
['new', 'port']	 The importance of the binary log entries is illustrated in the following section when the group grows and distributed recovery is executed as new members try to catch up and become online
['enforce_gtid_consistency', 'gtid_mode', 'master_info_repository', 'server_id']	 [mysqld] # # Disable other storage engines # disabled_storage_engines="MyISAM,BLACKHOLE,FEDERATED,ARCHIVE,MEMORY" # # Replication configuration parameters # server_id=2 gtid_mode=ON enforce_gtid_consistency=ON master_info_repository=TABLE relay_log_
['enforce_gtid_consistency', 'gtid_mode', 'server_id']	 Create the configuration file [mysqld] # # Disable other storage engines # disabled_storage_engines="MyISAM,BLACKHOLE,FEDERATED,ARCHIVE,MEMORY" # # Replication configuration parameters # server_id=3 gtid_mode=ON enforce_gtid_consistency=ON master_in
['port', 'super_read_only']	 No Important Once an instance enters  ERROR  state, the  super_read_only  option is set to ON 
['new', 'old']	 When a new primary is elected, it is only writable once it has processed all of the transactions that came from the old primary
['new', 'old']	 This avoids possible concurrency issues between old transactions from the old primary and the new ones being executed on this member
['new', 'port']	 Therefore it is important before forcing a new membership configuration to ensure that the servers to be excluded are indeed shutdown and if they are not, shut them down before proceeding
['performance_schema', 'port']	 Consider the following group with three members,  s1 ,  s2 , and  s3 , running on hosts with the same names: mysql>  SELECT member_host, member_port, member_state FROM performance_schema
['performance_schema', 'port']	 To check the member status of the restored instance, issue: mysql> SELECT member_host, member_port, member_state FROM performance_schema
['performance_schema', 'port']	 Once it has caught up with the rest of the group, its  member_state  changes to  ONLINE : mysql> SELECT member_host, member_port, member_state FROM performance_schema
['new', 'old']	 With this approach, we are rebuilding  s3  as a new member, for which we do not need or do not want to use the old binary and relay logs in the backup; therefore, if these logs have been included in your backup, exclude them using the  -- skip-binlo
['event_scheduler', 'super_read_only']	 To avoid this,  before starting the restored server , configure the following system variables in the server option file: group_replication_start_on_boot=OFF super_read_only=ON event_scheduler=OFF These settings ensure that the member becomes read-o
['bind_address', 'port']	 This address is not the same as the MySQL server SQL protocol host and port, and is not specified in the  bind_address  system variable for the server instance
['new', 'ssl_ca']	 new_member> SET GLOBAL group_replication_recovery_use_ssl=1; new_member> SET GLOBAL group_replication_recovery_ssl_ca= '
['new', 'ssl_cert']	pem'; new_member> SET GLOBAL group_replication_recovery_ssl_cert= '
['new', 'ssl_key']	pem'; new_member> SET GLOBAL group_replication_recovery_ssl_key= '
['auto_increment_increment', 'auto_increment_offset']	 When Group Replication is started on a server, the value of the server system variable auto_increment_increment  is changed to this value, and the value of the server system variable auto_increment_offset  is changed to the server ID
['auto_increment_increment', 'auto_increment_offset']	 These changes are only made and reverted if auto_increment_increment  and  auto_increment_offset  each have their default value of 1
['enforce_gtid_consistency', 'gtid_mode']	   Set  gtid_mode=ON  and  enforce_gtid_consistency=ON 
['master_info_repository', 'relay_log_info_repository']	   Set  master_info_repository=TABLE  and relay_log_info_repository=TABLE 
['slave_parallel_type', 'slave_parallel_workers', 'slave_preserve_commit_order']	 Set  slave_parallel_workers= N (where  N  is the number of parallel applier threads),  slave_preserve_commit_order=1 , and slave_parallel_type=LOGICAL_CLOCK 
['flush', 'new', 'old']	 Note that the limitations and issues described for multi-primary mode groups can also apply in single-primary mode clusters during a failover event, while the newly elected primary flushes out its applier queue from the old primary
['port', 'skip_name_resolve']	 Important The assigned value is used directly and is not affected by the skip_name_resolve  system variable
['auto_increment_increment', 'auto_increment_offset']	 The changes are only made and reverted if  auto_increment_increment  and auto_increment_offset  each have their default value of 1
['master_info_repository', 'relay_log_info_repository']	Production Deployment of InnoDB Cluster | master_info_repository           | FILE          | TABLE          | Restart the server                               | | relay_log_info_repository        | FILE          | TABLE          | Restart the server 
['enforce_gtid_consistency', 'gtid_mode']	 {   "config_errors": [     {       "action": "restart",       "current": "OFF",       "option": "enforce_gtid_consistency",       "required": "ON"     },     {       "action": "restart",       "current": "OFF",       "option": "gtid_mode",       "re
['new', 'port']	 This means the current session has been closed, MySQL Shell automatically reconnects for you and when you issue the command again the new port is confirmed
['port', 'super_read_only']	 Important Once an instance enters  ERROR  state, the  super_read_only  option is set to ON 
['new', 'old']	 Verifications are performed to ensure that this invariant holds when adding a new instance to the cluster
['old', 'port']	2 and older release series are no longer supported or maintained 
['new', 'port']	3 are previous GA releases still supported in production, although we recommend that new deployments for production use NDB Cluster 8
['new', 'old', 'port']	 Important The old and new formats are not compatible; different data files or undo log files that are used by the same Disk Data table or tablespace cannot use a mix of formats
['old', 'port']	 In addition, as part of this work,  NDB  code relating to the old SCI transporter has been removed
['new', 'port']	6 and later supports offloading by the receiver thread of the task of waking up other threads to a new thread that wakes up other threads on request (and otherwise simply sleeps), making it possible to improve the capacity of a single cluster connect
['new', 'port']	13, it is possible to divide a backup into roughly equal portions (slices) and to restore these slices in parallel using two new options implemented for ndb_restore : Ł --num-slices  determines the number of slices into which the backup should be div
['new', 'old']	 This is because an update of a primary key is implemented as a delete of the old row (containing the old primary key) plus an insert of the new row (with a new primary key)
['old', 'port']	6) (No longer supported) other hosts, and which acts as a placeholder for processes that are allowed to run on any host
['old', 'port']	4: Threshold for number of epochs to lag behind before reporting binary log status
['old', 'port']	 Ł ndb_report_thresh_binlog_mem_usage : Threshold for percentage of free memory remaining before reporting binary log status
['old', 'port']	  [mgm]  and  [mgm default]  are older aliases for these, supported for backward compatibility
['old', 'port']	 Although the older  Id  continues to be supported for backward compatibility, it is now deprecated and generates a warning when used; it is also subject to removal in a future NDB Cluster release
['new', 'old']	 Unique hash indexes are updated only when the unique index columns are updated, in which case a new entry in the index table is inserted and the old entry is deleted upon commit
['new', 'old']	 It is possible to change this value using a rolling restart, but the amount of traffic on the cluster must be such that no more transactions occur than the lower of the old and new levels while this is taking place
['old', 'port']	 An alias,  Id , was used for this purpose in very old versions of NDB Cluster, and continues to be supported for backward compatibility; it is now deprecated and generates a warning when used, and is subject to removal in a future release of NDB Clu
['old', 'port']	4, the value of this vairable served as a threshold for the number of epochs to be behind before reporting binary log status
['new', 'port']	5 and earlier: When using the shared memory transporter, a process sends an operating system signal to the other process when there is new data available in the shared memory
['new', 'port']	 Important The last entry in the error log file is not necessarily the newest one  (nor is it likely to be)
['new', 'port']	 ENGINE=NDB  on the new table; after this, from the system shell, invoke  ndb_import  to load the data into the new  NDB  table
['auto_increment_increment', 'port']	ndb_import  Š Import CSV Data Into NDB Minimum Value 1 Maximum Value 4294967295 For a table with a hidden primary key, specify the autoincrement increment, like the auto_increment_increment  system variable does in the MySQL Server
['new', 'old', 'port']	7 based releases) --rewrite- database=olddb,newdb Restore to differently named database (Supported in all MySQL 5
['new', 'old', 'port']	7 based releases) --skip-unknown-objects Causes schema objects not recognized by ndb_restore to be ignored when restoring backup made from newer NDB version to older version (Supported in all MySQL 5
['new', 'old', 'port']	 Important It is not possible to restore a backup made from a newer version of NDB Cluster using an older version of  ndb_restore 
['new', 'old']	 You can restore a backup made from a newer version of MySQL to an older cluster, but you must use a copy of ndb_restore  from the newer NDB Cluster version to do so
['new', 'old']	 In older versions of NDB Cluster, tables whose schemas were restored using this option used the same number of partitions as they did on the original cluster, even if it had a differing number of data nodes from the new cluster
['new', 'old']	 Ł --rewrite-database = olddb,newdb Command-Line Format --rewrite-database=olddb,newdb Type String Default Value none This option makes it possible to restore to a database having a different name from that used in the backup
['old', 'port']	 In such cases, it is necessary to alter any tables using  utf8mb4_ai_ci  so that they use a character set supported in the older version prior to performing the backup
['new', 'old']	 Restoring an NDB backup to a later version of NDB Cluster In general, it should be possible to restore a backup created using the  ndb_mgm  client  START BACKUP command in an older version of NDB to a newer version, provided that you use the  ndb_re
['new', 'old']	 Ł When restoring an older backup to a newer version of NDB, it may not be possible to take advantage of newer features such as hashmap partitioning, greater number of hashmap buckets, read backup, and different partitioning layouts
['new', 'old']	 For this reason, it may be preferable to restore older schemas using mysqldump  and the  mysql  client, which allows NDB to make use of the new schema features
['old', 'port']	 Ł Tables using the old temporal types which did not support fractional seconds (used prior to MySQL 5
['old', 'port']	 The threshold free percentage level triggering these reports can be adjusted by setting the ndb_report_thresh_binlog_mem_usage  server variable
['old', 'port']	 The report is generated every second until the number of buffered epochs goes below the threshold, which can be adjusted by setting the ndb_report_thresh_binlog_epoch_slip  server variable
['old', 'port']	 If an event has a priority with a value lower than or equal to the priority threshold, it is reported in the cluster log
['old', 'port']	 Note Events are reported per data node, and that the threshold can be set to different values on different nodes
['old', 'port']	Event Reports Generated in NDB Cluster Thresholds are used to filter events within each category
['new', 'old']	   To upgrade the cluster to a newer version of the NDB Cluster software (or to downgrade it to an older version)
['new', 'port']	 Important Currently, you must add new data nodes to an NDB Cluster as part of a new node group
['new', 'port']	 Important All management servers must be restarted with the  --reload  or  --initial option to force the reading of the new configuration
['new', 'old']	 Once the new data nodes have started, you can see in the output of the management client  SHOW  command that they do not yet belong to any node group (as indicated with bold type here): ndb_mgm>  SHOW Connected to Management Server at: 198
['old', 'port']	 After issuing the statement  ALTER TABLE ips ALGORITHM=INPLACE, REORGANIZE PARTITION , you can see using  ndb_desc  that the data for this table is now stored using 4 partitions, as shown here (with the relevant portions of the output in bold type):
['bind_address', 'port']	 If the SQL node was started with the  bind_address  system variable set, this address is used instead of the transporter address, unless the bind address is set to  * ,  0
['new', 'port']	 When a given transporter is in a state of overload, any new transaction that tries to use this transporter fails with Error 1218 ( Send Buffers overloaded in NDB kernel )
['new', 'port']	 In this state, any new scan using this transporter has its batch size reduced to minimize the load on the transporter
['performance_schema', 'show_compatibility_56']	6, can be be used if show_compatibility_56  is enabled to obtain similar output to the  SHOW STATUS statement discussed in the previous item; the preferred method is to query the performance_schema
['port', 'slave_checkpoint_group', 'slave_parallel_workers']	   NDB Cluster does not support multithreaded replicas, and setting related system variables such as  slave_parallel_workers ,  slave_checkpoint_group , and slave_checkpoint_group  (or the equivalent  mysqld  startup options) has no effect
['slave_compressed_protocol', 'slave_net_timeout', 'slave_skip_errors', 'slave_transaction_retries']	Using Two Replication Channels for NDB Cluster Replication | slave_compressed_protocol | OFF   | | slave_load_tmpdir         | /tmp  | | slave_net_timeout         | 3600  | | slave_skip_errors         | OFF   | | slave_transaction_retries | 10    | +
['new', 'port']	 Important Whether logging of complete rows or of updated columns only is done is decided when the MySQL server is started, and cannot be changed online; you must either restart  mysqld , or start a new  mysqld  instance with different logging option
['new', 'port']	7 also supports a variant of  HASH  partitioning known as  linear hashing  which employs a more complex algorithm for determining the placement of new rows inserted into the partitioned table
['new', 'old']	 , then drop the old table and rename the new one, but this could be very time-consuming when dealing with a large amounts of data
['open_files_limit', 'port']	 In particular, you should make sure that  large_files_support  is enabled and that open_files_limit  is set properly
['new', 'old']	 This is because all partitions (old and new) must be opened concurrently during the reorganization of the table data
['max_sp_recursion_depth', 'thread_stack']	 If you increase the value of max_sp_recursion_depth , it may be necessary to increase thread stack size by increasing the value of thread_stack  at server startup
['innodb_data_file_path', 'innodb_temp_data_file_path']	 Ł AUTOEXTEND_SIZE For  InnoDB :  AUTOEXTEND_SIZE  is the auto-extend size defined by  innodb_data_file_path  for the system tablespace, or by  innodb_temp_data_file_path  for temporary tablespaces
['new', 'old']	 Ł ACTION_REFERENCE_OLD_ROW  and  ACTION_REFERENCE_NEW_ROW The old and new column identifiers, respectively
['port', 'sql_mode']	 Notes MySQL permits different  sql_mode  settings to tell the server the type of SQL syntax to support
['flush', 'new']	 Before information for newly inserted rows appears in  INNODB_FT_INDEX_TABLE , the  FULLTEXT index cache must be flushed to disk
['performance_schema_events_waits_history_long_size', 'performance_schema_events_waits_history_size']	cnf  file to change the sizes of the history tables for wait events: [mysqld] performance_schema performance_schema_events_waits_history_size=20 performance_schema_events_waits_history_long_size=15000 The Performance Schema automatically sizes the va
['old', 'performance_schema_max_mutex_classes']	 Suppose that the following conditions hold: Ł The server was started with the  --performance_schema_max_mutex_classes=200  option and thus has room for 200 mutex instruments
['performance_schema_max_mutex_classes', 'port']	 If the value chosen for  performance_schema_max_mutex_classes  is too small, no error is reported in the error log and there is no failure at runtime
['new', 'old']	 When the history tables become full, old events are discarded as new events are added
['new', 'old']	 Ł For  _history_long , when the table becomes full, the oldest row is discarded when a new row is added, regardless of which thread generated either row
['performance_schema', 'performance_schema_max_digest_length']	 Ł If the Performance Schema has digest instrumentation enabled, it makes a copy of the normalized statement digest, allocating a maximum of  performance_schema_max_digest_length  bytes for it
['performance_schema', 'performance_schema_max_digest_length']	 Consequently, if  performance_schema_max_digest_length  is less than  max_digest_length , the copy is truncated relative to the original
['performance_schema', 'performance_schema_max_digest_length']	 This is a copy of the original normalized statement that was computed to a maximum of  max_digest_length  bytes, further truncated as necessary to  performance_schema_max_digest_length  bytes
['performance_schema', 'performance_schema_max_digest_length']	 The  performance_schema_max_digest_length  system variable determines the maximum number of bytes available per statement for digest value storage in the Performance Schema
['performance_schema', 'performance_schema_max_digest_length']	 Consequently, values selected from the  DIGEST_TEXT  column of statement event tables may appear to exceed the performance_schema_max_digest_length  value
['max_digest_length', 'performance_schema']	 As described previously, normalized statement digests as computed by the parser are constrained to a maximum of  max_digest_length  bytes, whereas normalized statement digests stored in the Performance Schema use  performance_schema_max_digest_lengt
['performance_schema', 'performance_schema_max_digest_length']	 The following memory-use considerations apply regarding the relative values of  max_digest_length  and performance_schema_max_digest_length : Ł If  max_digest_length  is less than  performance_schema_max_digest_length : Ł Server components other tha
['performance_schema', 'performance_schema_max_digest_length']	 Ł If  max_digest_length  equals  performance_schema_max_digest_length : Ł Server components other than the Performance Schema use normalized statement digests that take up to  max_digest_length  bytes
['performance_schema', 'performance_schema_max_digest_length']	 Ł If  max_digest_length  is greater than  performance_schema_max_digest_length : Ł Server components other than the Performance Schema use normalized statement digests that take up to  max_digest_length  bytes
['performance_schema', 'performance_schema_max_digest_length']	 Because the Performance Schema statement event tables might store many digests, setting performance_schema_max_digest_length  smaller than  max_digest_length  enables administrators to balance these factors: Ł The need to have long normalized statem
['performance_schema', 'performance_schema_max_digest_length']	Performance Schema General Table Characteristics Ł The need to limit memory consumption by the Performance Schema statement event tables when storing many statement digests The  performance_schema_max_digest_length  setting is not per session, it is 
['performance_schema', 'performance_schema_max_digest_length']	 A typical number of statements in this table is 10 per session, so each session consumes 10 times the memory indicated by the  performance_schema_max_digest_length  value, for this table alone
['performance_schema', 'performance_schema_max_digest_length']	 Here, too,  N  statements stored consume  N  times the memory indicated by the  performance_schema_max_digest_length  value
['performance_schema_events_waits_history_long_size', 'performance_schema_events_waits_history_size']	 For example, to set the sizes of the wait event history tables, set  performance_schema_events_waits_history_size  and performance_schema_events_waits_history_long_size 
['new', 'old']	 When the table contains the maximum number of rows for a given thread, the oldest thread row is discarded when a new row for that thread is added
['new', 'old']	 When the table becomes full, the oldest row is discarded when a new row is added, regardless of which thread generated either row
['performance_schema', 'performance_schema_max_digest_length']	 The  performance_schema_max_digest_length  system variable determines the maximum number of bytes available per session for digest value storage
['performance_schema', 'performance_schema_max_digest_length']	 Consequently, values selected from the  DIGEST_TEXT  column of statement event tables may appear to exceed the  performance_schema_max_digest_length value
['autocommit', 'new']	 For example, when the  autocommit  system variable is enabled, the start of each statement starts a new transaction
['autocommit', 'new']	 When  autocommit  is disabled, the first statement following a committed transaction marks the start of a new transaction
['performance_schema_accounts_size', 'performance_schema_hosts_size', 'performance_schema_users_size']	 Account, host, and user statistics are not collected if the  performance_schema_accounts_size , performance_schema_hosts_size , and  performance_schema_users_size  system variables, respectively, are set to 0
['max_connect_errors', 'new']	 Once  SUM_CONNECT_ERRORS  for a given host reaches the value of  max_connect_errors , new connections from that host are blocked
['new', 'port']	 This column is reserved for future use, in case new error conditions must be reported, and if preserving the backward compatibility and structure of the  host_cache  table is required
['performance_schema_max_cond_classes', 'performance_schema_max_cond_instances']	Performance Schema Option and Variable Reference Name Cmd-Line Option File System Var Status Var Var Scope Dynamic performance_schema_max_cond_classes Yes Yes Yes Global No performance_schema_max_cond_instances Yes Yes Yes Global No performance_schem
['performance_schema_max_file_handles', 'performance_schema_max_file_instances', 'performance_schema_max_index_stat']	Performance Schema System Variables | performance_schema_max_file_handles                      | 32768 | | performance_schema_max_file_instances                    | -1    | | performance_schema_max_index_stat                        | -1    | | perfo
['performance_schema', 'performance_schema_max_digest_length']	 Ł performance_schema_max_digest_length Command-Line Format --performance-schema-max-digest-length=# System Variable performance_schema_max_digest_length Scope Global Dynamic No Type Integer Default Value 1024 Minimum Value 0 Maximum Value 1048576 Th
['open_files_limit', 'performance_schema_max_file_handles', 'port']	 The value of  performance_schema_max_file_handles  should be greater than the value of open_files_limit :  open_files_limit  affects the maximum number of open file handles the server can support and  performance_schema_max_file_handles  affects how
['performance_schema_hosts_size', 'performance_schema_max_cond_instances', 'performance_schema_max_file_instances', 'performance_schema_max_index_stat', 'performance_schema_max_metadata_locks', 'performance_schema_max_mutex_instances']	Performance Schema and Plugins performance_schema_hosts_size performance_schema_max_cond_instances performance_schema_max_file_instances performance_schema_max_index_stat performance_schema_max_metadata_locks performance_schema_max_mutex_instances pe
['old', 'performance_schema']	 You can determine which thread is holding mutex A: SELECT * FROM performance_schema
['new', 'performance_schema']	6, the Performance Schema includes these tables as new sources of system and status variable information: performance_schema
['flush', 'port']	 Instruments for these stages currently support progress reporting: stage/sql/Copying to tmp table stage/innodb/alter table (end) stage/innodb/alter table (flush) stage/innodb/alter table (insert) stage/innodb/alter table (log apply index) stage/inno
['optimizer_switch', 'sql_mode']	 This function and  list_drop()  can be useful for manipulating the value of system variables such as sql_mode  and  optimizer_switch  that take a comma-separated list of values
['new', 'port']	 The new MySQL Connector/Python component provides an interface to the same Python API, and is built into the MySQL Server and supported by Oracle
['auto_increment_increment', 'auto_increment_offset']	 With the  auto_increment_increment  and auto_increment_offset  system variables, you can set each server to generate auto-increment values that don't conflict with other servers
['new', 'old']	 Can triggers access tables? A trigger can access both old and new data in its own table
['new', 'port']	   This series is no longer supported for new deployments or maintained
['new', 'port']	 For information about new features and other important changes in this series, see  What is New in NDB Cluster 
['new', 'old']	 Tasks in progress that were being coordinated by the old leader may either fail or be continued by the new leader, depending on the actual mechanism involved
['old', 'port']	 MySQL supports the modern Vietnamese script with Western characters, but does not support the old Vietnamese script using Han characters
['delay_key_write', 'low_priority_updates']	 You can also start the replicas with the  --skip-innodb  option, enable the low_priority_updates  system variable, and set the  delay_key_write  system variable to ALL  to get speed improvements on the replica end
['new', 'old', 'port']	 If the port is in use for a new connection, that packet from the old connection could break the protocol or compromise personal information from the original connection
['new', 'old', 'port']	 The default range of port numbers depends on the version of Windows, with a more limited number of ports in older versions: Ł Windows through Server 2003: Ports in range 1025Œ5000 Ł Windows Vista, Server 2008, and newer: Ports in range 49152Œ65535 W
['old', 'port']	 On the  Edit  menu, click  Add Value , and then add the following registry value: Value Name: TcpTimedWaitDelay Data Type: REG_DWORD Value: 30 This sets the number of seconds to hold a TCP port connection in  TIME_WAIT  state before closing
['max_connections', 'port']	 To support more connections, set  max_connections  to a larger value
['interactive_timeout', 'wait_timeout']	 Ł The client had been sleeping more than  wait_timeout  or  interactive_timeout  seconds without issuing any requests to the server
['new', 'old']	 The following list indicates possible causes of and fixes for this problem: Ł You may be running a new version of  mysqld  with an old  user  table
['old', 'port']	 If you have an old version of  mysqld  that does not support setting the open files limit, you can edit the  mysqld_safe  script
['new', 'port']	 For example, to give group access to all new directories, start mysqld_safe  as follows: UMASK_DIR=504  # = 770 in octal export UMASK_DIR mysqld_safe & For additional details, see  Section 4
['new', 'old']	 Use  ALTER TABLE  instead: ALTER TABLE old_name RENAME new_name; Ł You cannot refer to a  TEMPORARY  table more than once in the same query
['autocommit', 'automatic_sp_privileges']	cnf file,  2828 and SHOW SLAVE HOSTS statement,  2336 autocommit,  5040 autocommit mode,  2450 autocommit system variable,  664 automatic_sp_privileges system variable,  664 AutoReconnect API and SQL nodes,  3366 autowrapped JSON values,  1706 auto_g
['default_authentication_plugin', 'port']	mysqld,  640 mysqldump,  426 mysqlimport,  444 mysqlpump,  456 mysqlshow,  469 mysqlslap,  478 mysql_secure_installation,  354 mysql_upgrade,  364 my_print_defaults,  547 NDB client programs,  3553 default_authentication_plugin system variable,  677 
['query_cache_limit', 'query_cache_min_res_unit', 'query_cache_size', 'query_cache_type', 'query_cache_wlock_invalidate']	Qcache_total_blocks,  20 query cache,  20 query_cache_limit,  20 query_cache_min_res_unit,  20 query_cache_size,  20 query_cache_type,  20 query_cache_wlock_invalidate,  20 replace,  23 RESET QUERY CACHE,  20 resolveip,  22 resolve_stack_dump,  22 se
['disconnect_on_expired_password', 'port']	discard_or_import_tablespace thread state,  1498 disconnect-slave-event-count option mysqld,  2853 disconnecting from the server,  261 disconnect_on_expired_password system variable,  683 Disjoint(),  1916 Disk Data tables (NDB Cluster)  (see  NDB Cl
['ft_boolean_syntax', 'ft_max_word_len', 'port']	frm file,  5057 FROM,  2143 FROM_BASE64(),  1793 FROM_DAYS(),  1775 FROM_UNIXTIME(),  1775 fs option (ndb_error_reporter),  3472 FTS,  5059 ft_boolean_syntax system variable,  688 ft_max_word_len myisamchk variable,  494 ft_max_word_len system variab
['innodb_api_trx_level', 'innodb_autoextend_increment', 'innodb_autoinc_lock_mode']	innodb_api_trx_level system variable,  2573 innodb_autoextend_increment system variable,  2574 innodb_autoinc_lock_mode,  5066 innodb_autoinc_lock_mode system variable,  2574 Innodb_available_undo_logs status variable,  808 innodb_background_drop_lis
['innodb_flush_neighbors', 'innodb_flush_sync', 'innodb_force_load_corrupted', 'innodb_force_recovery']	innodb_flush_neighbors system variable,  2598 innodb_flush_sync system variable,  2598 innodb_force_load_corrupted system variable,  2599 innodb_force_recovery system variable,  2599 DROP TABLE,  2101 innodb_ft_aux_table system variable,  2600 INNODB
['innodb_log_compressed_pages', 'innodb_log_file_size', 'innodb_log_files_in_group']	removed features,  25 innodb_log_compressed_pages system variable,  2611 innodb_log_files_in_group system variable,  2612 innodb_log_file_size system variable,  2611 innodb_log_group_home_dir system variable,  2612 Innodb_log_waits status variable,  
['innodb_purge_rseg_truncate_frequency', 'innodb_purge_threads', 'innodb_random_read_ahead', 'innodb_read_ahead_threshold']	innodb_purge_rseg_truncate_frequency system variable,  2623 innodb_purge_threads system variable,  2623 innodb_random_read_ahead system variable,  2624 innodb_read_ahead_threshold,  2476 innodb_read_ahead_threshold system variable,  2624 innodb_read_
['lc_messages', 'lc_time_names']	cc (test program),  3307 lc_messages system variable,  700 lc_messages_dir system variable,  701 lc_time_names system variable,  701 LDAP authentication,  1092 LDAP authentication 4432 
['log_slow_slave_statements', 'log_statements_unsafe_for_binlog', 'log_syslog_facility', 'log_syslog_include_pid']	mysqld,  704 log_slow_slave_statements system variable,  2854 log_statements_unsafe_for_binlog system variable,  2892 log_syslog system variable,  704 log_syslog_facility system variable,  705 log_syslog_include_pid system variable,  705 log_syslog_t
['new', 'port']	include-gtids option,  528 local-load option,  528 login-path option,  529 new features,  16 no-defaults option,  529 offset option,  529 open-files-limit option,  529 password option,  529 plugin-dir option,  529 port option,  530 print-defaults opt
['net_buffer_length', 'net_read_timeout', 'port']	NET,  5076 net-buffer-length option mysql,  376 mysqldump,  436 mysqlpump,  458 mysql_upgrade,  365 netmask notation in account names,  1000 network ports and NDB Cluster,  3710 net_buffer_length system variable,  724 net_read_timeout system variable
['performance_schema_max_cond_classes', 'performance_schema_max_cond_instances']	Performance_schema_index_stat_lost status variable,  4142 Performance_schema_locker_lost status variable,  4142 performance_schema_max_cond_classes system variable,  4131 performance_schema_max_cond_instances system variable,  4132 performance_schema
['query_cache_limit', 'query_cache_min_res_unit', 'query_cache_size']	deprecated features,  20 query_cache_limit system variable,  737 query_cache_min_res_unit deprecated features,  20 query_cache_min_res_unit system variable,  737 query_cache_size deprecated features,  20 query_cache_size system variable,  738 query_c
['read_only', 'read_rnd_buffer_size']	read_only system variable,  742 read_rnd_buffer_size system variable,  744 REAL data type,  1652 RealtimeScheduler,  3339 REAL_AS_FLOAT SQL mode,  832 rebuild-indexes option ndb_restore,  3519 Rebuilding the index on master dump table thread state,  
['performance_schema', 'port']	replication_connection_configuration performance_schema,  4079 replication_connection_status performance_schema,  4081 REPORT command (NDB Cluster),  3558 reporting bugs,  2 ,  42 errors,  42 problems,  2 report_host system variable,  2860 report_pas
['sha256_password_auto_generate_rsa_keys', 'sha256_password_private_key_path', 'sha256_password_proxy_users', 'sha256_password_public_key_path']	sha256_password_auto_generate_rsa_keys system variable,  750 sha256_password_private_key_path system variable,  750 sha256_password_proxy_users system variable,  751 ,  1026 sha256_password_public_key_path system variable,  751 shared lock,  2443 ,  
['new', 'show_compatibility_56', 'show_create_table_verbosity', 'show_old_temporals']	database information,  465 show_compatibility_56 new features,  15 show_compatibility_56 system variable,  752 show_create_table_verbosity system variable,  756 show_old_temporals system variable,  756 shutdown,  5093 server,  857 Shutdown thread com
['sync_binlog', 'sync_frm', 'sync_master_info', 'sync_relay_log']	Syncing ndb table schema operation and binlog thread state,  1507 sync_binlog system variable,  2895 sync_frm deprecated features,  20 sync_frm system variable,  768 sync_master_info system variable,  2872 sync_relay_log system variable,  2873 sync_r
['collation_server', 'completion_type', 'concurrent_insert', 'old']	collation_database,  672 collation_server,  672 completion_type,  673 concurrent_insert,  673 connection_control_failed_connections_threshold,  1133 connection_control_max_connection_delay,  1134 connection_control_min_connection_delay,  1134 connect
['innodb_adaptive_flushing_lwm', 'innodb_adaptive_hash_index_parts', 'innodb_adaptive_max_sleep_delay']	init_connect,  694 init_file,  694 init_slave,  2854 innodb_adaptive_flushing,  2570 innodb_adaptive_flushing_lwm,  2571 innodb_adaptive_hash_index,  2571 innodb_adaptive_hash_index_parts,  2571 innodb_adaptive_max_sleep_delay,  2572 innodb_api_bk_co
['innodb_flush_log_at_trx_commit', 'innodb_flush_neighbors', 'innodb_flush_sync', 'innodb_force_load_corrupted', 'innodb_force_recovery', 'innodb_ft_cache_size']	innodb_flush_log_at_trx_commit,  2594 innodb_flush_method,  2596 innodb_flush_neighbors,  2598 innodb_flush_sync,  2598 innodb_force_load_corrupted,  2599 innodb_force_recovery,  2599 innodb_ft_aux_table,  2600 innodb_ft_cache_size,  2600 innodb_ft_e
['innodb_read_ahead_threshold', 'innodb_read_io_threads', 'innodb_read_only', 'innodb_replication_delay', 'innodb_rollback_on_timeout', 'innodb_rollback_segments', 'innodb_sort_buffer_size']	innodb_read_ahead_threshold,  2624 innodb_read_io_threads,  2625 innodb_read_only,  2625 innodb_replication_delay,  2625 innodb_rollback_on_timeout,  2626 innodb_rollback_segments,  2626 innodb_saved_page_number_debug,  2627 innodb_sort_buffer_size, 
['large_pages', 'lc_messages', 'lc_time_names', 'local_infile', 'lock_wait_timeout', 'port']	large_files_support,  699 large_pages,  700 large_page_size,  700 last_insert_id,  700 lc_messages,  700 lc_messages_dir,  701 lc_time_names,  701 license,  701 local_infile,  701 ,  980 locked_in_memory,  702 lock_wait_timeout,  702 log_bin,  2889 l
['max_seeks_for_key', 'max_sort_length', 'max_sp_recursion_depth', 'max_user_connections', 'max_write_lock_count', 'metadata_locks_cache_size', 'metadata_locks_hash_instances']	max_seeks_for_key,  715 max_sort_length,  716 max_sp_recursion_depth,  716 max_tmp_tables,  716 max_user_connections,  716 max_write_lock_count,  717 mecab_rc_file,  717 metadata_locks_cache_size,  718 metadata_locks_hash_instances,  718 min_examined
['performance_schema_events_stages_history_long_size', 'performance_schema_events_stages_history_size', 'performance_schema_events_statements_history_long_size', 'performance_schema_events_statements_history_size']	performance_schema_events_stages_history_long_size,  4129 performance_schema_events_stages_history_size,  4129 performance_schema_events_statements_history_long_size,  4130 performance_schema_events_statements_history_size,  4130 performance_schema_e
['query_cache_wlock_invalidate', 'query_prealloc_size', 'range_alloc_block_size', 'range_optimizer_max_mem_size', 'read_buffer_size', 'read_only', 'read_rnd_buffer_size']	query_cache_wlock_invalidate,  739 query_prealloc_size,  740 rand_seed1,  740 rand_seed2,  740 range_alloc_block_size,  740 range_optimizer_max_mem_size,  741 rbr_exec_mode,  741 read_buffer_size,  742 read_only,  742 read_rnd_buffer_size,  744 relay
['skip_networking', 'skip_show_database', 'slave_allow_batching', 'slave_checkpoint_group', 'slave_checkpoint_period', 'slave_compressed_protocol', 'slave_exec_mode', 'slave_max_allowed_packet']	skip_networking,  758 skip_show_database,  758 slave_allow_batching,  3398 slave_checkpoint_group,  2862 slave_checkpoint_period,  2863 slave_compressed_protocol,  2864 slave_exec_mode,  2864 slave_load_tmpdir,  2864 slave_max_allowed_packet,  2865 s
['thread_cache_size', 'thread_handling']	thread_cache_size,  770 thread_handling,  770 thread_pool_algorithm,  771 thread_pool_high_priority_connection,  771 thread_pool_max_unused_threads,  772 thread_pool_prio_kickup_timer,  772 thread_pool_size,  773 thread_pool_stall_limit,  773 thread_
['tls_version', 'tmp_table_size']	tls_version system variable,  775 TMPDIR environment variable,  300 ,  552 ,  4330 TMPDIR option CMake,  199 tmpdir option myisamchk,  498 myisampack,  509 mysqld,  661 tmpdir system variable,  776 tmp_table_size system variable,  775 to-last-log opt
['keep_files_on_create', 'port']	14, ﬁ ndb_import  Š Import CSV Data Into NDBﬂ --keep_files_on_create Section 13
['new', 'port']	14, ﬁ ndb_import  Š Import CSV Data Into NDBﬂ CREATE TABLE new_table SELECT 
['old', 'port']	5ﬂ ndb_recv_thread_activation_threshold NDB Cluster System Variables ndb_recv_thread_cpu_mask NDB Cluster System Variables ndb_report_thresh_binlog_epoch_slip Section 21
['performance_schema', 'performance_schema_max_digest_length']	performance_schema_max_digest_length Section 25
['new', 'old']	 If related data is being updated across multiple tables, queries see either all old values or all new values, not a mix of old and new values
['new', 'port']	 It supports the  REDUNDANT  and  COMPACT  row formats, but not the newer  DYNAMIC  and  COMPRESSED  row formats available in the  Barracuda  file format
['innodb_change_buffer_max_size', 'innodb_change_buffering']	 The kinds and amount of data stored in the change buffer are governed by the  innodb_change_buffering and  innodb_change_buffer_max_size  configuration options
['innodb_change_buffer_max_size', 'innodb_change_buffering']	 Controlled by the  innodb_change_buffering  and  innodb_change_buffer_max_size configuration options
['binlog_checksum', 'master_verify_checksum', 'slave_sql_verify_checksum']	 For details, see the configuration options binlog_checksum ,  master_verify_checksum , and  slave_sql_verify_checksum 
['innodb_compression_failure_threshold_pct', 'innodb_compression_level', 'innodb_compression_pad_pct_max']	 Ideally, compression failures do not occur often; when they do, you can adjust the  innodb_compression_level ,  innodb_compression_failure_threshold_pct , and  innodb_compression_pad_pct_max  configuration options
['new', 'port']	 dynamic cursor  A type of  cursor  supported by  ODBC  that can pick up new and changed results when the rows are read again
['new', 'port']	 Barracuda is the newer  InnoDB  file format and supports the  COMPRESSED  and DYNAMIC  row formats
['innodb_file_per_table', 'port']	 file-per-table  A general name for the setting controlled by the  innodb_file_per_table  option, which is an important configuration option that affects aspects of  InnoDB  file storage, availability of features, and I/O characteristics
['old', 'port']	 General tablespaces can be created outside of the MySQL data directory, are capable of holding multiple  tables , and support tables of all row formats
['flush', 'innodb_max_purge_lag']	 If the history list grows longer than the value of the  innodb_max_purge_lag  configuration option, each  DML  operation is delayed slightly to allow the purge operation to finish  flushing  the deleted records
['innodb_file_format', 'new']	 innodb_file_format  The  innodb_file_format  option defines the  file format  to use for new  InnoDB  file-per-table  tablespaces 
['innodb_file_per_table', 'port']	 innodb_file_per_table  An important configuration option that affects many aspects of  InnoDB  file storage, availability of features, and I/O characteristics
['innodb_log_file_size', 'innodb_log_files_in_group']	 The disk layout of the redo log is influenced by the configuration options  innodb_log_file_size , innodb_log_group_home_dir , and (rarely)  innodb_log_files_in_group 
['new', 'port']	 As  InnoDB  gains new capabilities such as  compression , new row formats are introduced to support the resulting improvements in storage efficiency and performance
['innodb_buffer_pool_instances', 'innodb_buffer_pool_size']	 For example, increasing the memory on a server and adjusting memory-related parameters such as innodb_buffer_pool_size  and  innodb_buffer_pool_instances 
['flush', 'port']	 sharp checkpoint  The process of  flushing  to disk all  dirty  buffer pool pages whose redo entries are contained in certain portion of the  redo log 
['new', 'old', 'port']	 sublist  Within the list structure that represents the  buffer pool , pages that are relatively old and relatively new are represented by different portions of the  list 
['new', 'old', 'port']	 A set of parameters control the size of these portions and the dividing point between the new and old pages
['innodb_file_format', 'port']	 General tablespaces support all row formats regardless of the innodb_file_format  setting
['new', 'old']	 Although conceptually it has the same result as a  DELETE  statement with no  WHERE  clause, it operates differently behind the scenes:  InnoDB  creates a new empty table, drops the old table, then renames the new table to take the place of the old 
['innodb_buffer_pool_dump_at_shutdown', 'innodb_buffer_pool_load_at_startup']	6, you can speed up the warmup process by enabling the innodb_buffer_pool_dump_at_shutdown  and  innodb_buffer_pool_load_at_startup  configuration options, to bring the contents of the buffer pool back into memory after a restart
